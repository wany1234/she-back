<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.rsa.baseInfo.mapper.JobMapper">

    <!-- 직무 목록 조회 -->
    <select id= "getJobs" resultType= "com.she.rsa.model.Job">
    /* JobMapper.getJobs [Job.xml] */
        /* JobMapper.getJobs [Job.xml] */
        select rj.job_id
        , rj.job_cd
        , rj.plant_cd
        , ccm.code_nm as plantNm
        , rj.job_revno
        , rj.job_nm
        , rj.sop_no
        , rj.sop_nm
        , rj.dept_cd
        , cd.dept_nm
        , rj.use_yn
        , (case
        when rj.use_yn = 'Y' then '사용'
        else '미사용'
        end) use_yn_nm
        , rj.job_commts
        , rk.assess_date
        , rj.create_user_id
        , rj.create_dt
        , rj.update_user_id
        , rj.update_dt
        , rj.process_cd
        , cp.process_nm
        , case
             when dbo.GET_USER_NM(rj.update_user_id) = '' then dbo.GET_USER_NM(rj.create_user_id)
             else dbo.GET_USER_NM(rj.update_user_id) end    as writer_user_nm
        , case when rj.update_dt is null then convert(date, rj.create_dt) else convert(date, rj.update_dt) end   as writer_dt
        from rsa_job rj
        inner join com_dept cd on rj.dept_cd = cd.dept_cd
        left outer join (select job_id, max(assess_date) as assess_date
        from rsa_kras
        group by job_id) rk
        on rj.job_id = rk.job_id
        inner join com_process cp on cp.process_cd = rj.process_cd
        inner join (select max(job_revno) as job_revno, plant_cd, dept_cd, job_cd
        from rsa_job
        group by plant_cd, dept_cd, job_cd) max_job
        on rj.job_cd = max_job.job_cd and rj.job_revno = max_job.job_revno
        and rj.dept_cd = max_job.dept_cd and rj.plant_cd = max_job.plant_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') ccm
        on ccm.code = rj.plant_cd
        where 1=1
        <if test= "deptCd != null and !deptCd.equals('')">
            <!-- 하위부서 포함여부 관련 쿼리 시작 -->
            AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                        UNION ALL
                        SELECT 1 WHERE #{deptSubYn} = 'Y' AND rj.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                        UNION ALL
                        SELECT 1 WHERE #{deptSubYn} = 'N' AND rj.dept_cd = #{deptCd}
                        )
            <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
            and rj.plant_cd in (select value from dbo.FN_GET_Split(#{plantCd},','))
        </if>
        <if test= "processCd != null and !processCd.equals('')">
            and rj.process_cd = #{processCd}
        </if>
        <if test= "useYn != null and !useYn.equals('')">
            and rj.use_yn = #{useYn}
        </if>
        and rj.job_cd like '%' + #{jobCd} + '%'
        and rj.job_nm like '%' + #{jobNm} + '%'
        and rj.sop_no like '%' + #{sopNo} + '%'
        and rj.sop_nm like '%' + #{sopNm} + '%'
        order by writer_dt desc, rj.plant_cd, rj.dept_cd, rj.job_cd
    </select>

    <!-- 직무 상세 조회 -->
    <select id= "getJob" resultType= "com.she.rsa.model.Job">
    /* JobMapper.getJob [Job.xml] */
       /* JobMapper.getJob [Job.xml] */
        select rj.job_id
            , rj.job_cd
            , rj.plant_cd
            , rj.job_revno
            , rj.job_nm
            , rj.sop_no
            , rj.sop_nm
            , rj.process_cd
            , cp.process_nm
            , rj.dept_cd
            , cd.dept_nm
            , rj.use_yn
            , (case
                when rj.use_yn = 'Y' then '사용'
                else '미사용'
                end) use_yn_nm
            , rj.job_commts
            , rj.create_user_id
            , rj.create_dt
            , rj.update_user_id
            , rj.update_dt
        from rsa_job rj
        inner join com_process cp on rj.process_cd = cp.process_cd
        inner join com_dept cd on rj.dept_cd = cd.dept_cd
        where rj.job_id = #{jobId}
    </select>

    <!-- Rev No 중복검사 -->
    <select id= "countRevno" resultType= "HashMap">
    /* JobMapper.countRevno [Job.xml] */
        select count(*) as cnt
        ,'id' as gubun
        from rsa_job
        where
        job_cd = #{jobCd}
        and plant_cd = #{plantCd}
        <if test= "selectedJobId != null and selectedJobId > 0">
            and job_id != #{selectedJobId}
        </if>
        union all
        select count(*) as cnt
        ,'name' as gubun
        from (SELECT a.*
        FROM rsa_job a
        INNER JOIN (SELECT max(job_revno) as job_revno, job_cd
        FROM rsa_job
        GROUP BY  job_cd) b
        ON a.job_cd = b.job_cd
        AND a.job_revno = b.job_revno) rj
        where 1=1
        <if test= "selectedJobId != null and selectedJobId > 0">
            and job_id != #{selectedJobId}
        </if>
        and job_nm = #{jobNm}
        and plant_cd = #{plantCd}
        union all
        select count(*) as cnt
        ,'rev' as gubun
        from rsa_job
        where
        job_cd = #{jobCd}
        and job_revno = #{jobRevno}
        and plant_cd = #{plantCd}
    </select>

    <!-- 직무 신규등록 -->
    <insert id= "createJob" parameterType= "com.she.rsa.model.Job">
    /* JobMapper.createJob [Job.xml] */
        <selectKey keyProperty= "jobId" resultType= "int" order= "BEFORE">
                  select next value for seq_rsa_job_no as job_id
             </selectKey>
        insert into rsa_job
            (job_id
            , job_cd
            , job_nm
            , job_revno
            , sop_no
            , sop_nm
            , process_cd
            , dept_cd
            , use_yn
            , job_commts
            , plant_cd
            , create_user_id
            , create_dt)
        values
            (#{jobId}
            , #{jobCd}
            , #{jobNm}
            , #{jobRevno}
            , #{sopNo}
            , #{sopNm}
            , #{processCd}
            , #{deptCd}
            , #{useYn}
            , #{jobCommts}
            , #{plantCd}
            , #{createUserId}
            , getDate())
    </insert>

    <!-- 직무 수정 -->
    <update id= "updateJob" parameterType= "com.she.rsa.model.Job">
    /* JobMapper.updateJob [Job.xml] */
        update rsa_job
        set job_cd = #{jobCd}
            , plant_cd = #{plantCd}
            , job_nm = #{jobNm}
            , job_revno = #{jobRevno}
            , sop_no = #{sopNo}
            , sop_nm = #{sopNm}
            , process_cd = #{processCd}
            , dept_cd = #{deptCd}
            , use_yn = #{useYn}
            , job_commts = #{jobCommts}
            , update_user_id = #{updateUserId}
            , update_dt = getDate()
        where job_id = #{jobId}
    </update>

    <!-- 작업절차 목록 조회 -->
    <select id= "getJobSteps" resultType= "com.she.rsa.model.JobStep">
    /* JobMapper.getJobSteps [Job.xml] */
        with A as
        (
            select max(job_step_id) as job_step_id
            from rsa_job_step
            group by job_id, job_step_no, job_step_group_no
        )
        select rjs.job_step_id
            , rjs.job_step_no
            , rjs.job_id
            , rjs.job_step_nm
            , rjs.job_step_desc
            , rjs.use_yn
            , (case
                when rjs.use_yn = 'Y' then '사용'
                else '미사용'
                end) use_yn_nm
            , rjs.create_user_id
            , rjs.create_dt
            , rjs.update_user_id
            , rjs.update_dt
            , rjs.rev_no
            , rjs.rev_contents
            , rjs.job_step_group_no
        from rsa_job_step rjs
        inner join A
        on rjs.job_step_id = A.job_step_id
        where rjs.job_id = #{jobId}
        <if test= "useYn != null and !useYn.equals('')">
        and rjs.use_yn = #{useYn}
        </if>
        order by rjs.job_step_no
    </select>

    <!-- 작업절차 이력 목록 조회 -->
    <select id= "getJobStepHistorys" resultType= "com.she.rsa.model.JobStep">
    /* JobMapper.getJobStepHistorys [Job.xml] */
        select rjs.job_step_id
            , rjs.job_step_no
            , rjs.job_id
            , rjs.job_step_nm
            , rjs.job_step_desc
            , rjs.use_yn
            , (case
                when rjs.use_yn = 'Y' then '사용'
                else '미사용'
                end) use_yn_nm
            , rjs.create_user_id
            , rjs.create_dt
            , rjs.update_user_id
            , rjs.update_dt
            , rjs.rev_no
            , rjs.rev_contents
            , rjs.job_step_group_no
        from rsa_job_step rjs
        where rjs.job_id = #{jobId}
        and rjs.job_step_no = #{jobStepNo}
        order by rjs.job_step_no
    </select>

    <!-- 작업절차 상세 조회 -->
    <select id= "getJobStep" resultType= "com.she.rsa.model.JobStep">
    /* JobMapper.getJobStep [Job.xml] */
        select rjs.job_step_id
            , rjs.job_step_no
            , rjs.job_id
            , rjs.job_step_nm
            , rjs.job_step_desc
            , rjs.use_yn
            , (case
                when rjs.use_yn = 'Y' then '사용'
                else '미사용'
                end) use_yn_nm
            , rjs.create_user_id
            , rjs.create_dt
            , rjs.update_user_id
            , rjs.update_dt
            , rjs.rev_no
            , rjs.rev_contents
            , rjs.job_step_group_no
        from rsa_job_step rjs
        where rjs.job_step_id = #{jobStepId}
    </select>

    <select id="getJobStepCheckRev" resultType="HashMap">
    /* JobMapper.getJobStepCheckRev [Job.xml] */
        select count(*) as cnt
        from rsa_job_step
        where job_id = #{jobId}
        and job_step_no = #{jobStepNo}
        and rev_no = #{revNo}
    </select>

    <!-- 작업절차 신규등록 -->
    <insert id= "createJobStep" parameterType= "com.she.rsa.model.JobStep">
    /* JobMapper.createJobStep [Job.xml] */
        <selectKey keyProperty= "jobStepId" resultType= "int" order= "BEFORE">
            select next value for seq_rsa_job_step as job_step_id
          </selectKey>
        insert into rsa_job_step
            (job_step_id
            , job_step_no
            , job_id
            , job_step_group_no
            , job_step_nm
            , job_step_desc
            , rev_no
            , rev_contents
            , use_yn
            , create_user_id
            , create_dt)
        values
            (#{jobStepId}
            , #{jobStepNo}
            , #{jobId}
            <if test= "jobStepGroupNo != null and jobStepGroupNo > 0">
            , #{jobStepGroupNo}
            </if>
            <if test= "jobStepGroupNo == null or jobStepGroupNo == 0">
            , #{jobStepNo}
            </if>
            , #{jobStepNm}
            , #{jobStepDesc}
            , #{revNo}
            , #{revContents}
            , #{useYn}
            , #{createUserId}
            , getDate())
    </insert>

    <!-- 작업절차 수정 -->
    <update id= "updateJobStep" parameterType= "com.she.rsa.model.JobStep">
    /* JobMapper.updateJobStep [Job.xml] */
        update rsa_job_step
        set job_step_no = #{jobStepNo}
            , job_step_group_no = #{jobStepGroupNo}
            , job_step_nm = #{jobStepNm}
            , job_step_desc = #{jobStepDesc}
            , rev_no = #{revNo}
            , rev_contents = #{revContents}
            , use_yn = #{useYn}
            , update_user_id = #{updateUserId}
            , update_dt = getDate()
        where job_step_id = #{jobStepId}
        and job_id = #{jobId}
        and job_step_no = #{selectedJobStepNo}
    </update>

    <!-- 직무별 유해위험요인 목록 조회 -->
    <select id= "getJobStepRiskHazards" resultType= "com.she.rsa.model.RiskHazard">
    /* JobMapper.getJobStepRiskHazards [Job.xml] */
        with A as (
            select job_id, max(job_step_id) as job_step_id
            from rsa_job_step
            group by job_id, job_step_no
        )
        select rjr.job_step_id
            , rjs.job_step_no
            , rjs.job_step_nm
            , rjr.risk_hazard_no    -- 유해위험요인번호
            , rrh.risk_hazard_nm    -- 유애위험요인명
            , rjr.create_user_id as job_create_user_id    -- 등록자ID
            , rjr.create_dt as job_create_dt    -- 등록일
            , rrh.p_risk_hazard_no    -- 상위 유해위험요인번호
            , lv1.risk_hazard_nm as p_risk_hazard_nm    -- 상위유해위험요인명
        from rsa_job_step rjs
        inner join A
        on rjs.job_step_id = A.job_step_id
        inner join rsa_job_riskhazard rjr
        on rjs.job_step_id = rjr.job_step_id
        inner join rsa_risk_hazard rrh on rjr.risk_hazard_no = rrh.risk_hazard_no
        left outer join rsa_risk_hazard lv1 on rrh.p_risk_hazard_no = lv1.risk_hazard_no
        where rjs.use_yn = 'Y'
        and rjs.job_id = #{jobId}
        order by rjr.job_step_id, rrh.p_risk_hazard_no, rjr.risk_hazard_no
    </select>

    <!-- 직무별 유해위험요인 목록 조회 -->
    <select id= "getJobRiskHazards" resultType= "com.she.rsa.model.RiskHazard">
    /* JobMapper.getJobRiskHazards [Job.xml] */
        select -- rjr.job_id    -- 작업ID
            -- , rjr.job_step_no
            rjr.job_step_id
            , rjr.risk_hazard_no    -- 유해위험요인번호
            , rrh.risk_hazard_nm    -- 유애위험요인명
            , rjr.create_user_id as job_create_user_id    -- 등록자ID
            , rjr.create_dt as job_create_dt    -- 등록일
            , rrh.p_risk_hazard_no    -- 상위 유해위험요인번호
            , lv1.risk_hazard_nm as p_risk_hazard_nm    -- 상위유해위험요인명
        from rsa_job_riskhazard rjr
        inner join rsa_risk_hazard rrh on rjr.risk_hazard_no = rrh.risk_hazard_no
        left outer join rsa_risk_hazard lv1 on rrh.p_risk_hazard_no = lv1.risk_hazard_no
        where rjr.job_step_id = #{jobStepId}
        order by rrh.p_risk_hazard_no, rjr.risk_hazard_no
    </select>

    <!-- 전체 유해위험요인 목록 조회 -->
    <select id= "getAllRiskHazards" resultType= "com.she.rsa.model.RiskHazard">
            /* JobMapper.getAllRiskHazards [Job.xml] */
        select rrh.risk_hazard_no
            , rrh.risk_hazard_nm as risk_hazard_nm
            , rrh.risk_hazard_level
            , rrh.p_risk_hazard_no
            , (case when (select count(risk_hazard_no)
                        from rsa_job_riskhazard rjr
                        where rjr.risk_hazard_no = rrh.risk_hazard_no
                        and rjr.job_step_id = #{jobStepId}) > 0
                    then 'Y'
                    else 'N'
                end) as check_nm
        from rsa_risk_hazard rrh
        where rrh.use_yn = 'Y'
    </select>

    <!-- 직무별 유해위험요인 신규등록 -->
    <insert id= "createJobRiskHazard" parameterType= "com.she.rsa.model.RiskHazard">
        /* JobMapper.createJobRiskHazard [Job.xml] */
        insert into rsa_job_riskhazard
            (job_step_id
            , risk_hazard_no
            , create_user_id
            , create_dt)
        values
            (#{jobStepId}
            , #{riskHazardNo}
            , #{createUserId}
            , getDate())
    </insert>

    <!-- 직무별 유해위험요인 삭제 -->
    <delete id= "deleteJobRiskHazard">
        /* JobMapper.deleteJobRiskHazard [Job.xml] */
        delete from rsa_job_riskhazard
        where job_step_id = #{jobStepId}
        <if test= "riskHazardNo != null and riskHazardNo > 0">
        and risk_hazard_no = #{riskHazardNo}
        </if>
    </delete>

    <!-- 직무 이력 조회 -->
    <select id= "getJobHistories" resultType= "com.she.rsa.model.Job">
        select rj.job_id
            , rj.job_cd
            , rj.job_revno
            , rj.job_nm
            , rj.sop_no
            , rj.sop_nm
            , rj.process_cd
            , cp.process_nm
            , rj.dept_cd
            , cd.dept_nm
            , rj.use_yn
            , (case
                when rj.use_yn = 'Y' then '사용'
                else '미사용'
                end) use_yn_nm
            , rj.job_commts
            , rj.create_user_id
            , rj.create_dt
            , rj.update_user_id
            , rj.update_dt
            , ISNULL(rj.update_dt, rj.create_dt) hist_update_dt
        from rsa_job rj
        inner join com_process cp on rj.process_cd = cp.process_cd
        inner join com_dept cd on rj.dept_cd = cd.dept_cd
        where rj.job_cd = #{jobCd}
        order by rj.job_revno
    </select>

    <delete id="deleteRevJobHistory">
        delete from rsa_job where job_id = #{jobId}
    </delete>
</mapper>