<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.mgt.elect.mapper.ElectEvalRsltMapper">
    <!-- 법정선임자 본인평가결과 목록 조회 -->
    <select id="getElectEvalMeRslts" resultType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.getElectEvalMeRslts [ElectEvalRslt.xml] */
        select	ep.eval_plan_no -- 법정선임자 평가계획번호
                ,eu.eval_user_no -- 법정선임자 평가대상자 번호
                ,mu.plant_cd -- 사업장코드
                ,eu.plant_nm -- 사업장
                ,year -- 대상년도
                ,half_type_cd -- 구분코드(상반기/하반기)
                ,dbo.GET_CODE_NM_LANG('kr', 'MGT_HALF_TYPE', half_type_cd) as half_type_nm -- 구분(상반기/하반기)
                ,ep.eval_nm -- 평가명
                ,ep.saf_elect_titl_no -- 법정선임자번호
                ,e.elect_titl_nm -- 법정선임자
                ,mu.dept_cd as me_dept_cd -- 소속부서코드
                ,md.dept_nm as me_dept_nm -- 소속부서
                ,ep.dept_cd -- 주관부서코드
                ,eu.me_user_id as user_id-- 대상자 사번
                ,mu.user_nm -- 대상자
                ,ep.dept_cd -- 주관부서코드
                ,dbo.GET_DEPT_NM(ep.dept_cd) as dept_nm -- 주관부서
                ,ep.proc_step_cd -- 단계코드
                ,dbo.GET_CODE_NM_LANG('kr', 'SAF_ELECT_TITL_STEP', ep.proc_step_cd) as proc_step_nm -- 단계
                ,eu.me_proc_step -- 상태코드
                ,dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.me_proc_step) as state_nm -- 상태
                ,ep.appr_rqst_no -- 결재요청번호
                --,concat(dbo.GET_CODE_NM_LANG('kr', 'SAF_ELECT_TITL_STEP', ep.proc_step_cd), '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', iif(ep.proc_step_cd = 'SETS2', eu.me_proc_step, eu.up_proc_step)), ')') as step_nm -- 단계(상태)                
                ,iif(eu.me_proc_step = 'PSEND' and eu.up_proc_step != 'PSURE', concat('상위평가', '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.up_proc_step), ')'), concat('본인평가', '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.me_proc_step), ')')) as step_nm -- 단계(상태)
                ,eu.me_user_id -- 본인평가자 사번
                ,mu.user_nm as me_user_nm -- 본인평가자
                ,concat(mu.user_nm, '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.me_proc_step), ')') as me_proc_step_nm -- 본인평가
                ,eu.up_user_id -- 상위평가자 사번
                ,dbo.GET_USER_NM(eu.up_user_id) as up_user_nm -- 상위평가자
                ,concat(dbo.GET_USER_NM(eu.up_user_id), '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.up_proc_step), ')') as up_proc_step_nm -- 상위평가
        from saf_elect_titl_eval_plan ep
        inner join saf_elect_titl e
        on e.saf_elect_titl_no = ep.saf_elect_titl_no
        inner join saf_elect_titl_eval_user eu
        on eu.eval_plan_no = ep.eval_plan_no
        inner join com_user mu
        on mu.user_id = eu.me_user_id
        inner join com_dept md
        on md.dept_cd = mu.dept_cd
        where 1=1
        <if test="startYear != null and !startYear.equals('') and endYear != null and !endYear.equals('')">
        and ep.year between #{startYear} and #{endYear}
        </if>
        <if test="halfTypeCd != null and !halfTypeCd.equals('')">
        and ep.half_type_cd = #{halfTypeCd}
        </if>
        <if test="plantCd != null and !plantCd.equals('')">
        and mu.plant_cd = #{plantCd}
        </if>
        <if test="safElectTitlNo != null and safElectTitlNo > 0">
        and ep.saf_elect_titl_no = #{safElectTitlNo}
        </if>
        <if test="evalNm != null and !evalNm.equals('')">
        and ep.eval_nm like '%' + #{evalNm} +  '%'
        </if>
        <if test="deptCd != null and !deptCd.equals('')">
            <choose>
                <when test='deptSubYn != null and deptSubYn.equals("Y")'>
                and ep.dept_cd in ( select dept_cd from dbo.GET_UNDER_DEPTS(#{deptCd}) )
                </when>
                <otherwise>
                and ep.dept_cd = #{deptCd}
                </otherwise>
            </choose>
        </if>
        <if test="userId != null and !userId.equals('')">
        and eu.me_user_id = #{userId}
        </if>
        <if test="meUserId != null and !meUserId.equals('')">
        and eu.me_user_id = #{meUserId}
        </if>
        <if test="procStepCd != null and !procStepCd.equals('')">
        and ep.step_cd = 'BAPSG' -- 계획만 결재가 있으므로
        and ep.state_cd = 'STATE4' -- 계획만 결재가 있으므로 상태는 결재완료
        </if>
        <if test="stateCd != null and !stateCd.equals('')">
        and eu.me_proc_step = #{stateCd}
        </if>
        <if test='evalIncompleteYn != null and evalIncompleteYn.equals("Y")'>
        and eu.me_proc_step != 'PSEND'
        </if>
        <if test="evalPlanNo != null and evalPlanNo > 0">
        and ep.eval_plan_no = #{evalPlanNo}
        </if>
        order by ep.year, mu.plant_cd, ep.half_type_cd, md.dept_cd
    </select>

    <!-- 법정선임자 본인평가결과/상위평가결과 상세 조회 -->
    <select id="getElectEvalRslt" resultType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.getElectEvalRslt [ElectEvalRslt.xml] */
        select	ep.eval_plan_no -- 평가계획번호
                ,eu.eval_user_no -- 평가대상자번호
                ,ep.year -- 대상년도
                ,ep.half_type_cd -- 구분코드(상반기/하반기)
                ,mu.plant_cd -- 사업장코드
                ,eu.plant_nm -- 사업장
                ,ep.saf_elect_titl_no -- 법정선임자 번호
                ,ep.dept_cd -- 주관부서코드
                ,eu.plant_nm as me_plant_nm -- 평가대상자 사업장
                ,eu.dept_nm as me_dept_nm -- 평가대상자 소속부서
                ,mu.user_nm as me_user_nm -- 평가대상자명
                ,dbo.GET_CODE_NM_LANG('kr', 'COM_PLANT_CD', uu.plant_cd) as up_plant_nm -- 평가자 사업장
                ,ud.dept_nm as up_dept_nm -- 평가자 소속부서
                ,uu.user_nm as up_user_nm -- 평가자명
                ,ep.eval_nm -- 평가명
                ,ep.eval_desc -- 상세내용
                ,eu.me_proc_step -- 본인평가 진행상태
                ,eu.up_proc_step -- 상위평가 진행상태
        from saf_elect_titl_eval_plan ep
        inner join saf_elect_titl_eval_user eu
        on eu.eval_plan_no = ep.eval_plan_no
        inner join com_user mu -- 본인평가자 정보
        on mu.user_id = eu.me_user_id
        inner join com_dept md -- 본인평가자 소속부서 정보
        on md.dept_cd = mu.dept_cd
        inner join com_user uu -- 상위평가자 정보
        on uu.user_id = eu.up_user_id
        inner join com_dept ud -- 상위평가자 소속부서 정보
        on ud.dept_cd = uu.dept_cd
        where eu.eval_user_no = #{evalUserNo}
    </select>

    <!-- 본인평가결과 항목 목록 조회 -->
    <select id="getElectEvalMeRsltItems" resultType="com.she.mgt.model.ElectEvalRsltItem">
        /* ElectEvalPlanMapper.getElectEvalMeRsltItems [ElectEvalRslt.xml] */
        select	ep.eval_plan_no -- 평가계획번호
                ,eu.eval_user_no -- 평가대상자번호
                ,emr.eval_me_rslt_no -- 본인평가 결과 번호
                ,ei.eval_item_no -- 평가항목번호
                ,ei.item_type -- 구분
                ,ei.item_work -- 평가대상업무
                ,emr.remark -- 비고
                ,emr.eval_point as me_eval_point -- 본인평가점수
                ,(select eur.eval_point from saf_elect_titl_eval_up_rslt eur where eur.eval_user_no = eu.eval_user_no and eur.eval_item_no = ei.eval_item_no) as up_eval_point -- 상위평가점수
                ,emr.create_user_id -- 등록자 ID
                ,emr.create_dt -- 등록일
                ,emr.update_user_id -- 수정자 ID
                ,emr.update_dt -- 수정일
        from saf_elect_titl_eval_plan ep
        inner join saf_elect_titl_eval_user eu
        on eu.eval_plan_no = ep.eval_plan_no
        inner join saf_elect_titl_eval_item ei
        on ei.eval_plan_no = ep.eval_plan_no
        left outer join saf_elect_tit_eval_me_rslt emr
        on emr.eval_user_no = eu.eval_user_no
        and emr.eval_item_no = ei.eval_item_no
        where eu.eval_user_no = #{evalUserNo}
        order by ep.eval_plan_no, eu.eval_user_no, ei.eval_item_no
    </select>

    <!-- 본인평가결과 상태 업데이트 -->
    <update id="updateElectEvalMeRslt" parameterType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.updateElectEvalMeRslt [ElectEvalRslt.xml] */
        update saf_elect_titl_eval_user
        set me_proc_step = #{meProcStep}
            <if test='meProcStep != null and meProcStep.equals("PSEND")'>
            <!-- 본인평가결과 확정처리했을 경우 상위평가의 진행단계를 미작성으로 업데이트 -->
            ,up_proc_step = #{upProcStep}
            </if>
        where eval_user_no = #{evalUserNo}
    </update>

    <!-- 본인평가결과 항목 저장 -->
    <insert id="saveElectEvalMeRsltItem" parameterType="com.she.mgt.model.ElectEvalRsltItem">
        /* ElectEvalPlanMapper.saveElectEvalMeRsltItem [ElectEvalRslt.xml] */
        <selectKey keyProperty="evalMeRsltNo" resultType="int" order="BEFORE">
            <choose>
                <when test="evalMeRsltNo != null and evalMeRsltNo > 0">
                    select #{evalMeRsltNo} as evalMeRsltNo
                </when>
                <otherwise>
                    select next value for seq_saf_elect_tit_eval_me_rslt as evalMeRsltNo
                </otherwise>
            </choose>
        </selectKey>
        merge into saf_elect_tit_eval_me_rslt T
        using (
            select  #{evalUserNo} as eval_user_no
                    ,#{evalItemNo} as eval_item_no
                    ,#{evalMeRsltNo} as eval_me_rslt_no
                    ,#{remark} as remark
                    ,#{evalPoint} as eval_point
                    ,#{createUserId} as create_user_id
                    ,#{updateUserId} as update_user_id
        ) S
        on S.eval_me_rslt_no = T.eval_me_rslt_no
        when not matched then
        insert (
            eval_me_rslt_no
            ,eval_user_no
            ,eval_item_no
            ,remark
            ,eval_point
            ,create_user_id
            ,create_dt
        )
        values (
            S.eval_me_rslt_no
            ,S.eval_user_no
            ,S.eval_item_no
            ,S.remark
            ,S.eval_point
            ,S.create_user_id
            ,getDate()
        )
        when matched then
        update
        set eval_user_no = #{evalUserNo}
            ,eval_item_no = #{evalItemNo}
            ,remark = #{remark}
            ,eval_point = #{evalPoint}
            ,update_user_id = #{updateUserId}
            ,update_dt = getDate()
    </insert>

    <!-- 평가계획 상태 업데이트 -->
    <update id="updateProcess" parameterType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.updateProcess [ElectEvalRslt.xml] */
        <!-- 전체 본인평가결과가 완료되었는지 여부 확인 -->
        <selectKey keyProperty="isMeComplete" order="BEFORE" resultType="String">
            select iif(count(eu.eval_user_no) = count(case when eu.me_proc_step = 'PSEND' then eu.eval_user_no end), 'END', 'ING') as isMeComplete
            from saf_elect_titl_eval_plan ep
            inner join saf_elect_titl_eval_user eu
            on eu.eval_plan_no = ep.eval_plan_no
            where ep.eval_plan_no = #{evalPlanNo}
        </selectKey>
        <!-- 본인평가결과 확정처리했을 경우 상위평가 단계로 업데이트 -->
        <if test='isMeComplete != null and isMeComplete.equals("END")'>
            update saf_elect_titl_eval_plan
            set proc_step_cd = 'SETS3'
            where eval_plan_no = #{evalPlanNo}
        </if>
    </update>

    <!-- 본인평가결과 확정취소 -->
    <update id="cancelElectEvalMeRslt" parameterType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.cancelElectEvalMeRslt [ElectEvalRslt.xml] */
        update saf_elect_titl_eval_user
        set me_proc_step = #{meProcStep}
            <!-- 본인평가결과 확정취소했을 경우 상위평가의 진행단계를 null로 업데이트 -->
            ,up_proc_step = null
        where eval_user_no = #{evalUserNo}
    </update>

    <!-- 상위평가결과 -->

    <!-- 법정선임자 상위평가결과 목록 조회 -->
    <select id="getElectEvalUpRslts" resultType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.getElectEvalUpRslts [ElectEvalRslt.xml] */
        select	ep.eval_plan_no -- 법정선임자 평가계획번호
                ,eu.eval_user_no -- 법정선임자 평가대상자 번호
                ,mu.plant_cd -- 사업장코드
                ,eu.plant_nm -- 사업장
                ,year -- 대상년도
                ,half_type_cd -- 구분코드(상반기/하반기)
                ,dbo.GET_CODE_NM_LANG('kr', 'MGT_HALF_TYPE', half_type_cd) as half_type_nm -- 구분(상반기/하반기)
                ,ep.eval_nm -- 평가명
                ,ep.saf_elect_titl_no -- 법정선임자번호
                ,e.elect_titl_nm -- 법정선임자
                ,mu.dept_cd as me_dept_cd -- 소속부서코드
                ,md.dept_nm as me_dept_nm -- 소속부서
                ,ep.dept_cd -- 주관부서코드
                ,eu.me_user_id as user_id-- 대상자 사번
                ,mu.user_nm -- 대상자
                ,ep.dept_cd -- 주관부서코드
                ,dbo.GET_DEPT_NM(ep.dept_cd) as dept_nm -- 주관부서
                ,ep.proc_step_cd -- 단계코드
                ,dbo.GET_CODE_NM_LANG('kr', 'SAF_ELECT_TITL_STEP', ep.proc_step_cd) as proc_step_nm -- 단계
                ,eu.me_proc_step -- 상태코드
                ,dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.me_proc_step) as state_nm -- 상태
                ,ep.appr_rqst_no -- 결재요청번호
                --,concat(dbo.GET_CODE_NM_LANG('kr', 'SAF_ELECT_TITL_STEP', ep.proc_step_cd), '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', iif(ep.proc_step_cd = 'SETS2', eu.me_proc_step, eu.up_proc_step)), ')') as step_nm -- 단계(상태)
                ,concat(iif(eu.me_proc_step = 'PSEND','상위평가','본인평가'), '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', iif(eu.me_proc_step = 'PSEND',  eu.up_proc_step ,eu.me_proc_step)), ')') as step_nm -- 단계(상태)                
                ,eu.me_user_id -- 본인평가자 사번
                ,mu.user_nm as me_user_nm -- 본인평가자
                ,concat(mu.user_nm, '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.me_proc_step), ')') as me_proc_step_nm -- 본인평가
                ,eu.up_user_id -- 상위평가자 사번
                ,dbo.GET_USER_NM(eu.up_user_id) as up_user_nm -- 상위평가자
                ,concat(dbo.GET_USER_NM(eu.up_user_id), '(', dbo.GET_CODE_NM_LANG('kr', 'COM_PROCESS_STEP2', eu.up_proc_step), ')') as up_proc_step_nm -- 상위평가
        from saf_elect_titl_eval_plan ep
        inner join saf_elect_titl e
        on e.saf_elect_titl_no = ep.saf_elect_titl_no
        inner join saf_elect_titl_eval_user eu
        on eu.eval_plan_no = ep.eval_plan_no
        inner join com_user mu
        on mu.user_id = eu.me_user_id
        inner join com_dept md
        on md.dept_cd = mu.dept_cd
        where 1=1
        <if test="startYear != null and !startYear.equals('') and endYear != null and !endYear.equals('')">
        and ep.year between #{startYear} and #{endYear}
        </if>
        <if test="halfTypeCd != null and !halfTypeCd.equals('')">
        and ep.half_type_cd = #{halfTypeCd}
        </if>
        <if test="plantCd != null and !plantCd.equals('')">
        and mu.plant_cd = #{plantCd}
        </if>
        <if test="safElectTitlNo != null and safElectTitlNo > 0">
        and ep.saf_elect_titl_no = #{safElectTitlNo}
        </if>
        <if test="evalNm != null and !evalNm.equals('')">
        and ep.eval_nm like '%' + #{evalNm} +  '%'
        </if>
        <if test="deptCd != null and !deptCd.equals('')">
            <choose>
                <when test='deptSubYn != null and deptSubYn.equals("Y")'>
                and ep.dept_cd in ( select dept_cd from dbo.GET_UNDER_DEPTS(#{deptCd}) )
                </when>
                <otherwise>
                and ep.dept_cd = #{deptCd}
                </otherwise>
            </choose>
        </if>
        <if test="userId != null and !userId.equals('')">
        and eu.me_user_id = #{userId}
        </if>
        <if test="upUserId != null and !upUserId.equals('')">
        and eu.up_user_id = #{upUserId}
        </if>
        <if test="procStepCd != null and !procStepCd.equals('')">
        and ep.step_cd = 'BAPSG' -- 계획만 결재가 있으므로
        and ep.state_cd = 'STATE4' -- 계획만 결재가 있으므로 상태는 결재완료
        and eu.me_proc_step = 'PSEND' -- 본인평가결과가 완료인 건
        </if>
        <if test="stateCd != null and !stateCd.equals('')">
        and eu.up_proc_step = #{stateCd}
        </if>
        <if test='evalIncompleteYn != null and evalIncompleteYn.equals("Y")'>
        and eu.up_proc_step != 'PSEND'
        </if>
        <if test="evalPlanNo != null and evalPlanNo != 0">
        and ep.eval_plan_no = #{evalPlanNo}
        </if>
        order by ep.year, mu.plant_cd, ep.half_type_cd, md.dept_cd
    </select>

    <!-- 상위평가결과 항목 목록 조회 -->
    <select id="getElectEvalUpRsltItems" resultType="com.she.mgt.model.ElectEvalRsltItem">
        /* ElectEvalPlanMapper.getElectEvalUpRsltItems [ElectEvalRslt.xml] */
        select	ep.eval_plan_no -- 평가계획번호
                ,eu.eval_user_no -- 평가대상자번호
                ,eur.eval_up_rslt_no -- 상위평가 결과 번호
                ,ei.eval_item_no -- 평가항목번호
                ,ei.item_type -- 구분
                ,ei.item_work -- 평가대상업무
                ,eur.remark -- 비고
                ,(select emr.eval_point from saf_elect_tit_eval_me_rslt emr where emr.eval_user_no = eu.eval_user_no and emr.eval_item_no = ei.eval_item_no) as me_eval_point -- 본인평가점수
                ,eur.eval_point as up_eval_point -- 상위평가점수
                ,eur.create_user_id -- 등록자 ID
                ,eur.create_dt -- 등록일
                ,eur.update_user_id -- 수정자 ID
                ,eur.update_dt -- 수정일
        from saf_elect_titl_eval_plan ep
        inner join saf_elect_titl_eval_user eu
        on eu.eval_plan_no = ep.eval_plan_no
        inner join saf_elect_titl_eval_item ei
        on ei.eval_plan_no = ep.eval_plan_no
        left outer join saf_elect_titl_eval_up_rslt eur
        on eur.eval_user_no = eu.eval_user_no
        and eur.eval_item_no = ei.eval_item_no
        where eu.eval_user_no = #{evalUserNo}
        order by ep.eval_plan_no, eu.eval_user_no, ei.eval_item_no
    </select>

    <!-- 본인평가결과 상태 업데이트 (확정/확정취소) -->
    <update id="updateElectEvalUpRslt" parameterType="com.she.mgt.model.ElectEvalRslt">
        /* ElectEvalPlanMapper.updateElectEvalUpRslt [ElectEvalRslt.xml] */
        update saf_elect_titl_eval_user
        set up_proc_step = #{upProcStep}
        where eval_user_no = #{evalUserNo}
    </update>

    <!-- 상위평가결과 항목 저장 -->
    <insert id="saveElectEvalUpRsltItem" parameterType="com.she.mgt.model.ElectEvalRsltItem">
        /* ElectEvalPlanMapper.saveElectEvalUpRsltItem [ElectEvalRslt.xml] */
        <selectKey keyProperty="evalUpRsltNo" resultType="int" order="BEFORE">
            <choose>
                <when test="evalUpRsltNo != null and evalUpRsltNo > 0">
                    select #{evalUpRsltNo} as evalUpRsltNo
                </when>
                <otherwise>
                    select next value for seq_saf_elect_titl_eval_up_rslt as evalUpRsltNo
                </otherwise>
            </choose>
        </selectKey>
        merge into saf_elect_titl_eval_up_rslt T
        using (
        select  #{evalUserNo} as eval_user_no
                ,#{evalItemNo} as eval_item_no
                ,#{evalUpRsltNo} as eval_up_rslt_no
                ,#{remark} as remark
                ,#{evalPoint} as eval_point
                ,#{createUserId} as create_user_id
                ,#{updateUserId} as update_user_id 
        ) S
        on S.eval_up_rslt_no = T.eval_up_rslt_no
        when not matched then
        insert (
            eval_up_rslt_no
            ,eval_user_no
            ,eval_item_no
            ,remark
            ,eval_point
            ,create_user_id
            ,create_dt
        )
        values (
            S.eval_up_rslt_no
            ,S.eval_user_no
            ,S.eval_item_no
            ,S.remark
            ,S.eval_point
            ,S.create_user_id
            ,getDate()
        )
        when matched then
        update
        set eval_user_no = #{evalUserNo}
            ,eval_item_no = #{evalItemNo}
            ,remark = #{remark}
            ,eval_point = #{evalPoint}
            ,update_user_id = #{updateUserId}
            ,update_dt = getDate()
    </insert>

    <!-- 평가결과 현황 목록 조회 -->
    <select id="getElectEvalRsltStatus" resultType="com.she.mgt.model.ElectEvalRsltStatus">
        /* ElectEvalPlanMapper.getElectEvalRsltStatus [ElectEvalRslt.xml] */
        with years as (
            select convert(int, #{startYear}) as year
            union all
            select year + 1
            from years
            where year <![CDATA[<]]> convert(int, #{endYear})
        ),
        plants as (
            select	code as plant_cd
                    ,code_nm as plant_nm
            from dbo.LANG_CODE_MASTER('kr', 'COM_PLANT_CD')
            where code != '0000'
        ),
        halfTypes as (
            select	code as half_type_cd
                    ,code_nm as half_type_nm
            from dbo.LANG_CODE_MASTER('kr', 'MGT_HALF_TYPE')
        ),
        electTitles as (
            select	saf_elect_titl_no
                    ,elect_titl_nm
            from saf_elect_titl
            where eval_tgt_yn = 'Y'
            and use_yn = 'Y'
        ),
        evalList as (
            select	ep.year
                    ,mu.plant_cd
                    ,ep.half_type_cd
                    ,ep.saf_elect_titl_no
                    ,count(eu.eval_user_no) as tgt_cnt
                    ,count(case when eu.up_proc_step = 'PSEND' then eu.eval_user_no end) as complete_cnt
            from saf_elect_titl_eval_plan ep
            inner join saf_elect_titl_eval_user eu
            on eu.eval_plan_no = ep.eval_plan_no
            inner join com_user mu
            on mu.user_id = eu.me_user_id
            inner join com_dept md
            on md.dept_cd = mu.dept_cd
            where ep.step_cd = 'BAPSG'
            group by ep.year
                    ,mu.plant_cd
                    ,ep.half_type_cd
                    ,ep.saf_elect_titl_no
        )
        select	convert(varchar, y.year) as year
                ,p.plant_cd
                ,p.plant_nm
                ,h.half_type_cd
                ,h.half_type_nm
                ,et.saf_elect_titl_no
                ,et.elect_titl_nm
                ,isnull(tgt_cnt, 0) as tgt_cnt
                ,format(isnull(tgt_cnt, 0), '##,##0') as tgt_cnt_t
                ,isnull(complete_cnt, 0) as complete_cnt
                ,format(isnull(complete_cnt, 0), '##,##0') as complete_cnt_t
                ,convert(varchar, format(round(isnull(dbo.GET_DIVIDE(complete_cnt, tgt_cnt) * 100, 0), 2),'0.00')) as eval_rate
                ,convert(varchar, round(isnull(dbo.GET_DIVIDE(complete_cnt, tgt_cnt) * 100, 0), 2)) + '%' as eval_rate_t

        from years y
        inner join plants p on 1=1
        inner join halfTypes h on 1=1
        inner join electTitles et on 1=1
        left outer join evalList el
        on el.year = y.year
        and el.plant_cd = p.plant_cd
        and el.half_type_cd = h.half_type_cd
        and el.saf_elect_titl_no = et.saf_elect_titl_no
        where 1=1
        <if test="plantCd != null and !plantCd.equals('')">
        and p.plant_cd = #{plantCd}
        </if>
        <if test="halfTypeCd != null and !halfTypeCd.equals('')">
        and h.half_type_cd = #{halfTypeCd}
        </if>
        <if test="safElectTitlNo != null and safElectTitlNo > 0">
        and et.saf_elect_titl_no = #{safElectTitlNo}
        </if>
        union all
        select	'합계' as year
                ,isnull(#{plantCd}, 'sum') as plant_cd
                ,'합계' as plant_nm
                ,isnull(#{halfTypeCd}, '') as half_type_cd
                ,'합계' as half_type_nm
                ,et.saf_elect_titl_no
                ,et.elect_titl_nm
                ,isnull(sum(tgt_cnt), 0) as tgt_cnt
                ,format(isnull(sum(tgt_cnt), 0), '##,##0') as tgt_cnt_t
                ,isnull(sum(complete_cnt), 0) as complete_cnt
                ,format(isnull(sum(complete_cnt), 0), '##,##0') as complete_cnt_t

                ,convert(varchar, format(round(isnull(dbo.GET_DIVIDE(sum(complete_cnt), sum(tgt_cnt)) * 100, 0), 2),'0.00')) as eval_rate
                ,convert(varchar, round(isnull(dbo.GET_DIVIDE(sum(complete_cnt), sum(tgt_cnt)) * 100, 0), 2)) + '%' as eval_rate_t

        from electTitles et
        left outer join evalList el
        on el.saf_elect_titl_no = et.saf_elect_titl_no
        and el.year between #{startYear} and #{endYear}
        where 1=1
        <if test="plantCd != null and !plantCd.equals('')">
        and el.plant_cd = #{plantCd}
        </if>
        <if test="halfTypeCd != null and !halfTypeCd.equals('')">
        and el.half_type_cd = #{halfTypeCd}
        </if>
        <if test="safElectTitlNo != null and safElectTitlNo > 0">
        and et.saf_elect_titl_no = #{safElectTitlNo}
        </if>
        and year between #{startYear} and #{endYear}
        group by et.saf_elect_titl_no
                ,et.elect_titl_nm
        order by year, plant_nm, half_type_cd, saf_elect_titl_no
    </select>
</mapper>
