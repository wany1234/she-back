<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.safety.accident.mapper.AccidentMapper">

    <select id= "getAccidentOccurs" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentOccurs [Accident.xml] */
        with A as (
            select case when count(sav.victim_nm) = 0 then ''
                        when count(sav.victim_nm) = 1 then max(sav.victim_nm)
                   else max(sav.victim_nm) + ' 외 ' + convert(varchar, count(sav.victim_nm) - 1) + '명'
                   end as victim_nms
                   ,sav.saf_accident_no
            from saf_accident_victim sav
            group by sav.saf_accident_no
        )
        select sa.saf_accident_no
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,concat(dbo.GET_CODE_NM(sa.accident_step_cd, 'SAF_ACCIDENT_STEP'),' (',isnull(bizAppr.code_nm,'결재요청전')  , ')') as state_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            ,case sa.invest_yn when 'Y' then '해당' else '비해당' end as invest_yn_nm
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd
            ,accidentLevel.code_nm as accident_lvl_nm

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,sa.occ_att_cd

            ,sa.imm_cause_cd
            ,sa.ind_cause_cd
            ,sa.cause_contents
            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc

            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            , isnull(updateUser.user_nm,createUser.user_nm) as writer_user_nm
            , convert(date, isnull(sa.update_dt, sa.create_dt)) as writer_dt
            ,stuff((select ', ' + accidentType.code_nm
                        from saf_accident_occtype aco
                        inner join com_code_master accidentType
                        on aco.accident_type_cd = accidentType.code
                        and accidentType.code_group_cd= 'SAF_OCC_TYPE'
                        where aco.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as accident_type_nms
            ,stuff((select ', ' + accidentKind.code_nm
                        from saf_accident_kind ack
                        inner join com_code_master accidentKind
                        on ack.acc_kind_cd = accidentKind.code
                        and accidentKind.code_group_cd= 'SAF_ACCIDENT_KIND'
                        where ack.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as acc_kind_nms
            ,sa.s1_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,A.victim_nms
            ,car.appr_rqst_no
        from saf_accident sa
        left outer join com_appr_rqst car
        on
        (case when sa.accident_step_cd = 'ACCS1' then sa.s1_appr_rqst_no
        when sa.accident_step_cd = 'ACCS2' then sa.s2_appr_rqst_no
        when sa.accident_step_cd = 'ACCS3' then sa.s3_appr_rqst_no
        when sa.accident_step_cd = 'ACCS4' then isnull(sa.s3_appr_rqst_no,sa.s2_appr_rqst_no) end) = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        inner join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_LVL') accidentLevel
        on sa.accident_lvl_cd = accidentLevel.code
        left outer join A
        on sa.saf_accident_no = A.saf_accident_no
        where 1=1
        and sa.area like '%' + #{area} + '%'
        and sa.accident_title like '%' + #{accidentTitle} + '%'
        <if test= "accidentStepCd != null and !''.equals(accidentStepCd)">
        and sa.accident_step_cd = #{accidentStepCd}
        </if>        
       
       <if test='bizApprStepNm != null and !bizApprStepNm.equals("전체")'>
         <choose>
             <when test= 'bizApprStepNm !=null and bizApprStepNm.equals("결재요청전")'>
                 and bizAppr.code_nm is null    
             </when>
             <when test= "bizApprStepNm != null and !''.equals(bizApprStepNm)">
                 and bizAppr.code_nm = #{bizApprStepNm}
             </when>
         </choose>
        </if>
        <if test= "startDate != null and !startDate.equals('') and endDate != null and !endDate.equals('')">
        and convert(date, sa.accident_ymd) &gt;= convert(date, #{startDate}) and convert(date, sa.accident_ymd) &lt;= convert(date, #{endDate})
        </if>
        <if test= "deptCd != null and !deptCd.equals('')">
        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND sa.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND sa.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
        and sa.plant_cd = #{plantCd}
        </if>
        order by writer_dt desc, accidentstep.sort_order, convert(date, sa.accident_ymd) desc
    </select>

    <select id= "getAccidentReceptions" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentReceptions [Accident.xml] */
        with A as (
            select case when count(sav.victim_nm) = 0 then ''
                        when count(sav.victim_nm) = 1 then max(sav.victim_nm)
                   else max(sav.victim_nm) + ' 외 ' + convert(varchar, count(sav.victim_nm) - 1) + '명'
                   end as victim_nms
                   ,sav.saf_accident_no
            from saf_accident_victim sav
            group by sav.saf_accident_no
        )
        select sa.saf_accident_no
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,concat(dbo.GET_CODE_NM(sa.accident_step_cd, 'SAF_ACCIDENT_STEP'),' (',isnull(bizAppr.code_nm,'결재요청전')  , ')') as state_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            ,case sa.invest_yn when 'Y' then '해당' else '비해당' end as invest_yn_nm
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd
            ,accidentLevel.code_nm as accident_lvl_nm

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,sa.occ_att_cd

            ,sa.imm_cause_cd
            ,sa.ind_cause_cd
            ,sa.cause_contents
            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc
            , isnull(updateUser.user_nm,createUser.user_nm) as writer_user_nm
            , convert(date, isnull(sa.update_dt, sa.create_dt)) as writer_dt
            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            ,stuff((select ', ' + accidentType.code_nm
                        from saf_accident_occtype aco
                        inner join com_code_master accidentType
                        on aco.accident_type_cd = accidentType.code
                        and accidentType.code_group_cd= 'SAF_OCC_TYPE'
                        where aco.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as accident_type_nms
            ,stuff((select ', ' + accidentKind.code_nm
                        from saf_accident_kind ack
                        inner join com_code_master accidentKind
                        on ack.acc_kind_cd = accidentKind.code
                        and accidentKind.code_group_cd= 'SAF_ACCIDENT_KIND'
                        where ack.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as acc_kind_nms
            ,sa.s2_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,A.victim_nms
            ,car.appr_rqst_no
        from saf_accident sa
        left outer join com_appr_rqst car
        on
        (case when sa.accident_step_cd = 'ACCS1' then sa.s1_appr_rqst_no
        when sa.accident_step_cd = 'ACCS2' then sa.s2_appr_rqst_no
        when sa.accident_step_cd = 'ACCS3' then sa.s3_appr_rqst_no
        when sa.accident_step_cd = 'ACCS4' then isnull(sa.s3_appr_rqst_no,sa.s2_appr_rqst_no) end) = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        inner join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_LVL') accidentLevel
        on sa.accident_lvl_cd = accidentLevel.code
        left outer join A
        on sa.saf_accident_no = A.saf_accident_no
        where 1=1
        and sa.area like '%' + #{area} + '%'
        and sa.accident_title like '%' + #{accidentTitle} + '%'
         <if test='bizApprStepNm != null and !bizApprStepNm.equals("전체")'>
         <choose>
             <when test= 'bizApprStepNm !=null and bizApprStepNm.equals("결재요청전")'>
                 and bizAppr.code_nm is null    
             </when>
             <when test= "bizApprStepNm != null and !''.equals(bizApprStepNm)">
                 and bizAppr.code_nm = #{bizApprStepNm}
             </when>
         </choose>
        </if>
        <if test= "accidentStepCd != null and !''.equals(accidentStepCd)">
        and sa.accident_step_cd = #{accidentStepCd}
        </if>
        <if test= "startDate != null and !startDate.equals('') and endDate != null and !endDate.equals('')">
        and convert(date, sa.accident_ymd) &gt;= convert(date, #{startDate}) and convert(date, sa.accident_ymd) &lt;= convert(date, #{endDate})
        </if>
        <if test= "deptCd != null and !deptCd.equals('')">
        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND sa.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND sa.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
        and sa.plant_cd = #{plantCd}
        </if>
        order by writer_dt desc, accidentstep.sort_order, convert(date, sa.accident_ymd) desc
    </select>

    <select id= "getAccidentResults" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentResults [Accident.xml] */
        with A as (
            select case when count(sav.victim_nm) = 0 then ''
                        when count(sav.victim_nm) = 1 then max(sav.victim_nm)
                   else max(sav.victim_nm) + ' 외 ' + convert(varchar, count(sav.victim_nm) - 1) + '명'
                   end as victim_nms
                   ,sav.saf_accident_no
            from saf_accident_victim sav
            group by sav.saf_accident_no
        )
        select sa.saf_accident_no
            ,sa.plant_cd
            ,(select count(*) from saf_impr_act sia
              where ((sia.impr_class_cd = 'ICL01' and sia.ref_table_id = sa.saf_accident_no)
                or (sia.impr_class_cd = 'ICL44' 
                    and sia.ref_table_id in (
                                            select saf_accident_cau_meas_no
                                            from saf_accident_cau_meas
                                            where saf_accident_no = sa.saf_accident_no
                                            )
                        )         
             )) as requestCnt
           ,(select count(*)
               from saf_impr_act sia
              where (sia.act_class_cd = 'ACL02' or sia.act_class_cd = 'ACL01')
                and sia.impr_step_cd != 'IMST5'
                and ((impr_class_cd = 'ICL01' and ref_table_id = sa.saf_accident_no)
                    or (impr_class_cd = 'ICL44' and ref_table_id in (
                        select saf_accident_cau_meas_no
                        from saf_accident_cau_meas
                        where saf_accident_no = sa.saf_accident_no
                        )
                        )
                    )) as incompletCnt
            ,(select count(*)
               from saf_impr_act sia                
              where datediff(day, convert(char(10), GETDATE(), 23) , sia.act_limit_ymd) &lt; 0
              and sia.act_class_cd = 'ACL02'
              and sia.impr_step_cd != 'IMST5'
              and ((sia.ref_table_id in
                        (
                        select saf_accident_cau_meas_no
                        from saf_accident_cau_meas
                        where saf_accident_no = sa.saf_accident_no
                        )
                    and sia.impr_class_cd = 'ICL44'
                   )                
                or (sia.impr_class_cd = 'ICL01' and sia.ref_table_id = sa.saf_accident_no)               
                )
               
               ) as overdueCnt
            ,(select count(*)
               from saf_impr_act sia
              where  sia.impr_step_cd = 'IMST5'
                and ((impr_class_cd = 'ICL01' and ref_table_id = sa.saf_accident_no)
                    or (impr_class_cd = 'ICL44' and ref_table_id in (
                        select saf_accident_cau_meas_no
                        from saf_accident_cau_meas
                        where saf_accident_no = sa.saf_accident_no
                        )
                        )
                    )) as completCnt   
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,concat(dbo.GET_CODE_NM(sa.accident_step_cd,'SAF_ACCIDENT_STEP'),'(',isnull(bizAppr.code_nm,'결재요청전'),')') state_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            ,case sa.invest_yn when 'Y' then '해당' else '비해당' end as invest_yn_nm
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd
            ,accidentLevel.code_nm as accident_lvl_nm

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_att_cd
            ,(select a.code_nm
            from com_code_master a
            where sa.occ_att_cd = a.code
            and a.code_group_cd = sa.occ_kind_cd
            ) as occ_att_nm

            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm
            ,sa.cause_contents
            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc
            , isnull(updateUser.user_nm,createUser.user_nm) as writer_user_nm
            , convert(date, isnull(sa.update_dt, sa.create_dt)) as writer_dt
            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            ,stuff((select ', ' + accidentType.code_nm
                        from saf_accident_occtype aco
                        inner join com_code_master accidentType
                        on aco.accident_type_cd = accidentType.code
                        and accidentType.code_group_cd= 'SAF_OCC_TYPE'
                        where aco.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as accident_type_nms
            ,stuff((select ', ' + accidentKind.code_nm
                        from saf_accident_kind ack
                        inner join com_code_master accidentKind
                        on ack.acc_kind_cd = accidentKind.code
                        and accidentKind.code_group_cd= 'SAF_ACCIDENT_KIND'
                        where ack.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as acc_kind_nms
            ,sa.s3_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,A.victim_nms
            ,car.appr_rqst_no
        from saf_accident sa
        left outer join com_appr_rqst car
        on
        (case when sa.accident_step_cd = 'ACCS1' then sa.s1_appr_rqst_no
        when sa.accident_step_cd = 'ACCS2' then sa.s2_appr_rqst_no
        when sa.accident_step_cd = 'ACCS3' then sa.s3_appr_rqst_no
        when sa.accident_step_cd = 'ACCS4' then isnull(sa.s3_appr_rqst_no,sa.s2_appr_rqst_no) end) = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        left outer join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_LVL') accidentLevel
        on sa.accident_lvl_cd = accidentLevel.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_kind_cd = occKind.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        left outer join A
        on sa.saf_accident_no = A.saf_accident_no
        where 1=1
        and sa.area like '%' + #{area} + '%'
        and sa.accident_title like '%' + #{accidentTitle} + '%'
        <if test= "accidentStepCd != null and !''.equals(accidentStepCd)">
        and sa.accident_step_cd = #{accidentStepCd}
        </if>
        <if test='bizApprStepNm != null and !bizApprStepNm.equals("전체")'>
         <choose>
             <when test= 'bizApprStepNm !=null and bizApprStepNm.equals("결재요청전")'>
                 and bizAppr.code_nm is null    
             </when>
             <when test= "bizApprStepNm != null and !''.equals(bizApprStepNm)">
                 and bizAppr.code_nm = #{bizApprStepNm}
             </when>
         </choose>
        </if>
        <if test= "startDate != null and !startDate.equals('') and endDate != null and !endDate.equals('')">
        and convert(date, sa.accident_ymd) &gt;= convert(date, #{startDate}) and convert(date, sa.accident_ymd) &lt;= convert(date, #{endDate})
        </if>
        <if test= "deptCd != null and !deptCd.equals('')">
        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND sa.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND sa.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
        and sa.plant_cd = #{plantCd}
        </if>
        <if test= "assessYear != null and !assessYear.equals('')">
            <if test= "monFlag != null and monFlag > 0  and monFlag == 200">
                and convert(char(4), sa.accident_ymd ,112) &lt; #{assessYear}
            </if>
            <if test= "monFlag != null and monFlag > 0  and monFlag == 300">
                and convert(char(4), sa.accident_ymd ,112) &lt;= #{assessYear}
            </if>
            <if test= "monFlag != null and monFlag > 0  and monFlag != 200 and monFlag != 300">
                and convert(char(4), sa.accident_ymd ,112) = #{assessYear}  
            </if>          
          and sa.accident_step_cd = 'ACCS4'
          and bizAppr.code = 'BAPSG'
        </if>
        <if test= "monFlag != null and monFlag > 0  and monFlag != 100 and monFlag != 200 and monFlag != 300">
          and substring(convert(char(10), sa.accident_ymd, 23), 6, 2) = #{monFlag}
        </if>
        <if test= "accidentType != null and !accidentType.equals('')">
        and exists (select 1
                    from saf_accident_occtype sao
                    where sa.saf_accident_no = sao.saf_accident_no
                    and sao.accident_type_cd = #{accidentType})
        </if>
        <if test= "occKindCd != null and !occKindCd.equals('')">
        and sa.occ_kind_cd = #{occKindCd}
        </if>
        <if test= "occAttCd != null and !occAttCd.equals('')">
        and sa.occ_att_cd = #{occAttCd}
        </if>
        <if test= "immCauseCd != null and !immCauseCd.equals('')">
        and sa.imm_cause_cd = #{immCauseCd}
        </if>
        <if test= "indCauseCd != null and !indCauseCd.equals('')">
        and sa.ind_cause_cd = #{indCauseCd}
        </if>
        order by writer_dt desc, accidentstep.sort_order, convert(date, sa.accident_ymd) desc
    </select>

    <select id= "getAccidentOccur" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentOccur [Accident.xml] */
        select sa.saf_accident_no
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_att_cd

            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm
            ,sa.cause_contents

            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc

            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            ,sa.s1_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
            ,stuff((select ', ' + accidentType.code_nm
                        from saf_accident_occtype aco
                        inner join com_code_master accidentType
                        on aco.accident_type_cd = accidentType.code
                        and accidentType.code_group_cd= 'SAF_OCC_TYPE'
                        where aco.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as accident_type_nms
            ,stuff((select ', ' + accidentKind.code_nm
                        from saf_accident_kind ack
                        inner join com_code_master accidentKind
                        on ack.acc_kind_cd = accidentKind.code
                        and accidentKind.code_group_cd= 'SAF_ACCIDENT_KIND'
                        where ack.saf_accident_no = sa.saf_accident_no
                        for xml path('')),1,1,'') as acc_kind_nms
        from saf_accident sa
        left outer join com_appr_rqst car
        on sa.s1_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        inner join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_kind_cd = occKind.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        where 1=1
        and sa.saf_accident_no = #{safAccidentNo}
    </select>

    <select id= "getAccidentReception" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentReception [Accident.xml] */
        select sa.saf_accident_no
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_att_cd

            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm
            ,sa.cause_contents

            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc

            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            ,sa.s2_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
        from saf_accident sa
        left outer join com_appr_rqst car
        on sa.s2_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        inner join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_kind_cd = occKind.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        where 1=1
        and sa.saf_accident_no = #{safAccidentNo}
    </select>

    <select id= "getAccidentResult" resultType= "com.she.safety.model.Accident">
        /* AccidentMapper.getAccidentResult [Accident.xml] */
        select sa.saf_accident_no
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,sa.accident_title
            ,sa.accident_num
            ,sa.accident_step_cd
            ,accidentstep.code_nm as accident_step_nm
            ,sa.accident_ymd
            ,sa.accident_hour
            ,sa.accident_minute
            ,sa.dept_cd
            ,cd.dept_nm
            ,sa.area
            ,sa.weather_cd
            ,weather.code_nm as weather_nm
            ,sa.accident_type_etc
            ,sa.rpt_user_id
            ,sa.rpt_user_nm
            ,sa.rpt_dept_cd
            ,sa.rpt_dept_nm
            --,sa.rpt_office_tel
            ,sa.rpt_dt
            ,sa.contents
            --,sa.detail_damage_desc
            ,sa.human_injury_cd
            ,sa.human_injury_desc
            --,sa.mat_damage_desc
            ,sa.no_accident_yn
            ,sa.no_accident_dept_yn
            ,sa.first_act
            ,sa.invest_yn
            --,sa.prov_reason
            --,sa.cau_type_cd
            --,sa.cau_type_etc
            --,sa.bgn_meas
            ,sa.dir_loss_amount
            --,sa.indir_loss_amount
            ,sa.env_damage_desc
            ,sa.drain_leak
            ,sa.etc_leak
            ,sa.accident_att_cd
            ,att.code_nm as accident_att_nm
            ,sa.accident_lvl_cd
            ,accLvl.code_nm as accident_lvl_nm

            ,sa.human_damage
            --,humanDamage.code_nm as human_damage_nm
            ,sa.mat_damage
            ,sa.toxi_yn
            ,case when sa.toxi_yn = 'Y' then '독성O'
                else '독성X'
            end as toxi_yn_nm
            ,sa.occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_att_cd

            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm
            ,sa.cause_contents

            ,sa.origin_mat_cd
            ,sa.ass_mat_cd
            ,sa.prcs_state_cd
            ,sa.end_type_cd
            ,sa.work_lost_day
            ,sa.expect_cure_day
            ,sa.etc

            ,sa.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sa.create_dt, 23) as create_dt
            ,sa.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sa.update_dt, 23) as update_dt
            ,sa.s3_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm,'결재요청전') as biz_appr_step_nm
        from saf_accident sa
        left outer join com_appr_rqst car
        on sa.s3_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_STEP') accidentstep
        on sa.accident_step_cd = accidentstep.code
        inner join com_user createUser
        on sa.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sa.update_user_id = updateUser.user_id
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_cd = plant.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_WEATHER') weather
        on sa.weather_cd = weather.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ATT') att
        on sa.accident_att_cd = att.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_kind_cd = occKind.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_LVL') accLvl
        on sa.accident_lvl_cd = accLvl.code
        where 1=1
        and sa.saf_accident_no = #{safAccidentNo}
    </select>

    <insert id= "createAccident" parameterType= "com.she.safety.model.Accident">
        /* AccidentMapper.createAccident [Accident.xml] */
        <selectKey keyProperty= "safAccidentNo,accidentNum" resultType= "com.she.safety.model.Accident" order= "BEFORE">
            select (next value for seq_saf_accident) as saf_accident_no
                ,(select case when max(accident_num) is null or left(max(accident_num), 4) != convert(varchar, year(getdate())) then convert(varchar, year(getdate())) + '-0001'
                        else left(max(accident_num), 5) + REPLICATE('0', 4 - len(convert(varchar, convert(numeric, right(max(accident_num), 4)) + 1))) + convert(varchar, convert(numeric, right(max(accident_num), 4)) + 1)
                    end as accident_num
                from saf_accident) as accidentNum
          </selectKey>
        insert into saf_accident
            (saf_accident_no
            ,plant_cd
            ,accident_title
            ,accident_num
            ,accident_step_cd
            ,accident_ymd
            ,accident_hour
            ,accident_minute
            ,dept_cd
            ,area
            ,weather_cd
            ,accident_type_etc
            ,rpt_user_id
            ,rpt_user_nm
            ,rpt_dept_cd
            ,rpt_dept_nm
            ,rpt_dt
            ,contents
            ,first_act

            <!-- ,detail_damage_desc
            ,human_injury_cd
            ,human_injury_desc
            ,mat_damage_desc
            ,no_accident_yn -->


            <!-- ,invest_yn -->

            ,accident_att_cd
            ,accident_lvl_cd
            ,human_damage
            ,mat_damage
            ,toxi_yn
            ,occ_kind_cd
            ,occ_att_cd
            ,imm_cause_cd
            ,ind_cause_cd
            ,cause_contents
            ,origin_mat_cd
            ,ass_mat_cd
            ,prcs_state_cd
            ,end_type_cd
            <!-- ,dir_loss_amount
            ,indir_loss_amount
            ,env_damage_desc
            ,drain_leak
            ,etc_leak
            ,accident_lvl_cd -->
            ,etc

            ,create_user_id
            ,create_dt)
        values
            (#{safAccidentNo}
            ,#{plantCd}
            ,#{accidentTitle}
            ,#{accidentNum}
            ,#{accidentStepCd}
            ,#{accidentYmd}
            ,#{accidentHour}
            ,#{accidentMinute}
            ,#{deptCd}
            ,#{area}
            ,#{weatherCd}
            ,#{accidentTypeEtc}
            ,#{rptUserId}
            ,#{rptUserNm}
            ,#{rptDeptCd}
            ,#{rptDeptNm}
            ,convert(datetime, #{rptDt})
            ,#{contents}

            <!-- ,#{detailDamageDesc}
            ,#{humanInjuryCd}
            ,#{humanInjuryDesc}
            ,#{matDamageDesc}
            ,#{noAccidentYn} -->

            ,#{firstAct}

            <!-- ,#{investYn} -->

            <!-- ,#{dirLossAmount}
            ,#{indirLossAmount}
            ,#{envDamageDesc}
            ,#{drainLeak}
            ,#{etcLeak}
            ,#{accidentLvlCd} -->
            ,#{accidentAttCd}
            ,#{accidentLvlCd}
            ,#{humanDamage}
            ,#{matDamage}
            ,#{toxiYn}
            ,#{occKindCd}
            ,#{occAttCd}
            ,#{immCauseCd}
            ,#{indCauseCd}
            ,#{causeContents}
            ,#{originMatCd}
            ,#{assMatCd}
            ,#{prcsStateCd}
            ,#{endTypeCd}
            ,#{etc}

            ,#{createUserId}
            ,getdate())
    </insert>

    <update id= "updateAccident" parameterType= "com.she.safety.model.Accident">
        /* AccidentMapper.updateAccident [Accident.xml] */
        update saf_accident
        set accident_title = #{accidentTitle}
            ,plant_cd = #{plantCd}
            ,accident_step_cd = #{accidentStepCd}
            ,accident_ymd = #{accidentYmd}
            ,accident_hour = #{accidentHour}
            ,accident_minute = #{accidentMinute}
            ,dept_cd = #{deptCd}
            ,area = #{area}
            ,weather_cd = #{weatherCd}
            ,accident_type_etc = #{accidentTypeEtc}
            ,contents = #{contents}
            ,accident_att_cd = #{accidentAttCd}
            ,accident_lvl_cd = #{accidentLvlCd}

            <if test= "investYn != null and !investYn.equals('')">
            ,invest_yn = #{investYn}
            </if>

            ,human_injury_cd = #{humanInjuryCd}
            ,human_injury_desc = #{humanInjuryDesc}
            ,no_accident_yn = #{noAccidentYn}
            ,no_accident_dept_yn = #{noAccidentDeptYn}
            ,first_act = #{firstAct}
            ,dir_loss_amount = #{dirLossAmount}
            ,env_damage_desc = #{envDamageDesc}
            ,drain_leak = #{drainLeak}
            ,etc_leak = #{etcLeak}
            ,work_lost_day = #{workLostDay}
            ,expect_cure_day = #{expectCureDay}

            ,human_damage = #{humanDamage}
            ,mat_damage = #{matDamage}
            ,toxi_yn = #{toxiYn}
            ,occ_kind_cd = #{occKindCd}
            ,occ_att_cd = #{occAttCd}
            ,imm_cause_cd = #{immCauseCd}
            ,ind_cause_cd = #{indCauseCd}
            ,cause_contents = #{causeContents}
            ,origin_mat_cd = #{originMatCd}
            ,ass_mat_cd = #{assMatCd}
            ,prcs_state_cd = #{prcsStateCd}
            ,end_type_cd = #{endTypeCd}
            ,etc = #{etc}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_accident_no = #{safAccidentNo}
    </update>

    <select id= "getAccidentKinds" resultType= "com.she.safety.model.AccidentKind">
        /* AccidentMapper.getAccidentKinds [Accident.xml] */
        select sak.acc_kind_cd
              ,kind.code_nm as acc_kind_nm
              ,sak.saf_accident_no
        from saf_accident_kind sak
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_KIND') kind
        on sak.acc_kind_cd = kind.code
        where saf_accident_no = #{safAccidentNo}
        order by kind.sort_order
    </select>

    <select id= "getAccidentOcctypes" resultType= "com.she.safety.model.AccidentOcctype">
        /* AccidentMapper.getAccidentOcctypes [Accident.xml] */
        select sao.accident_type_cd
            ,occtype.code_nm as accident_type_nm
            ,sao.saf_accident_no
        from saf_accident_occtype sao
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_OCC_TYPE') occtype
        on sao.accident_type_cd = occtype.code
        where sao.saf_accident_no = #{safAccidentNo}
        order by occtype.sort_order
    </select>

    <delete id= "deleteAccident">
        /* AccidentMapper.deleteAccident [Accident.xml] */
        delete from saf_accident
        where saf_accident_no = #{safAccidentNo}
    </delete>

    <insert id= "createAccidentOccurtype" parameterType= "com.she.safety.model.AccidentOcctype">
        /* AccidentMapper.createAccidentOccurtype [Accident.xml] */
        insert into saf_accident_occtype
            (accident_type_cd
            ,saf_accident_no)
        values
            (#{accidentTypeCd}
            ,#{safAccidentNo})
    </insert>

    <insert id= "createAccidentKind" parameterType= "com.she.safety.model.AccidentKind">
        /* AccidentMapper.createAccidentKind [Accident.xml] */
        insert into saf_accident_kind
            (acc_kind_cd
            ,saf_accident_no)
        values
            (#{accKindCd}
            ,#{safAccidentNo})
    </insert>

    <delete id= "deleteAccidentOccurtype">
        /* AccidentMapper.deleteAccidentOccurtype [Accident.xml] */
        delete from saf_accident_occtype
        where 1=1
        <if test= "accidentTypeCd != null and !accidentTypeCd.equals('')">
        and accident_type_cd = #{accidentTypeCd}
        </if>
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and saf_accident_no = #{safAccidentNo}
        </if>
    </delete>

    <delete id= "deleteAccidentKind">
        /* AccidentMapper.deleteAccidentKind [Accident.xml] */
        delete from saf_accident_kind
        where 1=1
        and saf_accident_no = #{safAccidentNo}
    </delete>

    <select id= "getAccidentFacilitys" resultType= "com.she.baseInfo.model.FacilityMst">
        /* AccidentMapper.getAccidentFacilitys [Accident.xml] */
        select sfm.*
            ,sft.saf_facility_type_nm
            ,cd.dept_nm
            ,cp.process_nm
            ,sfm.self_chk_ymd
            ,sfm.law_chk_ymd
        from saf_accident sa
        inner join saf_accident_facility saf
        on sa.saf_accident_no = saf.saf_accident_no
        inner join saf_facility_mst sfm
        on saf.saf_facility_cd = sfm.saf_facility_cd
        inner join saf_facility_type sft
        on sfm.saf_facility_type_cd = sft.saf_facility_type_cd
        left outer join com_dept cd
        on sfm.dept_cd = cd.dept_cd
        left outer join com_process cp
        on sfm.process_cd = cp.process_cd
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and sa.saf_accident_no = #{safAccidentNo}
        </if>
    </select>

    <select id= "getAccidentChemprods" resultType= "com.she.chm.model.Chemprod">
        /* AccidentMapper.getAccidentChemprods [Accident.xml] */
        select cc.*
            ,property.code_nm as property_nm
            ,cvm.vendor_nm as maker_nm
        from saf_accident sa
        inner join saf_accident_chemprod sac
        on sa.saf_accident_no = sac.saf_accident_no
        inner join com_chemprod cc
        on sac.chem_prod_no = cc.chem_prod_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'RSA_PROPERTIES') property
            on cc.property = property.code
        left outer join com_vendor_mst cvm
            on cc.maker_cd = cvm.vendor_cd
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and sa.saf_accident_no = #{safAccidentNo}
        </if>
    </select>

    <select id= "getAccidentInvest" resultType= "com.she.safety.model.AccidentInvest">
        /* AccidentMapper.getAccidentInvest [Accident.xml] */
        select sai.saf_accident_no
            ,sai.leader_user_id
            ,sai.leader_user_nm
            ,sai.leader_dept_cd
            ,sai.leader_dept_nm
            --,sai.leader_office_tel
            --,sai.leader_hp
            ,sai.leader_sel_ymd
            --,sai.rmrk
            ,sai.invest_method
            ,sai.invest_plan
            ,sai.invest_start_ymd
            ,sai.invest_end_ymd
            ,sai.faci_user_id
            ,sai.faci_user_nm
            ,sai.faci_dept_cd
            ,sai.faci_dept_nm
            ,sai.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(char(10), sai.create_dt, 23) as create_dt
            ,sai.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(char(10), sai.update_dt, 23) as update_dt
            ,sa.invest_yn
        from saf_accident_invest sai
        inner join saf_accident sa
        on sai.saf_accident_no = sa.saf_accident_no
        inner join com_user createUser
        on sai.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sai.update_user_id = updateUser.user_id
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and sai.saf_accident_no = #{safAccidentNo}
        </if>
    </select>

    <insert id= "createAccidentInvest" parameterType= "com.she.safety.model.AccidentInvest">
        /* AccidentMapper.createAccidentInvest [Accident.xml] */
        insert into saf_accident_invest
            (saf_accident_no
            ,leader_user_id
            ,leader_user_nm
            ,leader_dept_cd
            ,leader_dept_nm
            ,leader_sel_ymd
            ,rmrk
            ,invest_method
            ,invest_plan
            ,invest_start_ymd
            ,invest_end_ymd
            ,faci_user_id
            ,faci_user_nm
            ,faci_dept_cd
            ,faci_dept_nm
            ,create_user_id
            ,create_dt)
        values
            (#{safAccidentNo}
            ,#{leaderUserId}
            ,#{leaderUserNm}
            ,#{leaderDeptCd}
            ,#{leaderDeptNm}
            ,#{leaderSelYmd}
            ,#{rmrk}
            ,#{investMethod}
            ,#{investPlan}
            ,#{investStartYmd}
            ,#{investEndYmd}
            ,#{faciUserId}
            ,#{faciUserNm}
            ,#{faciDeptCd}
            ,#{faciDeptNm}
            ,#{createUserId}
            ,getdate())
    </insert>

    <update id= "updateAccidentInvest" parameterType= "com.she.safety.model.AccidentInvest">
        /* AccidentMapper.updateAccidentInvest [Accident.xml] */
        update saf_accident_invest
        set leader_user_id = #{leaderUserId}
            ,leader_user_nm = #{leaderUserNm}
            ,leader_dept_cd = #{leaderDeptCd}
            ,leader_dept_nm = #{leaderDeptNm}
            ,leader_sel_ymd = #{leaderSelYmd}
            ,rmrk = #{rmrk}
            ,invest_method = #{investMethod}
            ,invest_plan = #{investPlan}
            ,invest_start_ymd = #{investStartYmd}
            ,invest_end_ymd = #{investEndYmd}
            ,faci_user_id = #{faciUserId}
            ,faci_user_nm = #{faciUserNm}
            ,faci_dept_cd = #{faciDeptCd}
            ,faci_dept_nm = #{faciDeptNm}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_accident_no = #{safAccidentNo}
    </update>

    <insert id= "createAccidentFacility" parameterType= "com.she.safety.model.AccidentFacility">
        /* AccidentMapper.createAccidentFacility [Accident.xml] */
        insert into saf_accident_facility
            (saf_accident_no
            ,saf_facility_cd)
        values
            (#{safAccidentNo}
            ,#{safFacilityCd})
    </insert>

    <delete id= "deleteAccidentFacility">
        /* AccidentMapper.deleteAccidentFacility [Accident.xml] */
        delete from saf_accident_facility
        where saf_accident_no = #{safAccidentNo}
    </delete>

    <insert id= "createAccidentChemprod" parameterType= "com.she.safety.model.AccidentChemprod">
        /* AccidentMapper.createAccidentChemprod [Accident.xml] */
        insert into saf_accident_chemprod
            (saf_accident_no
            ,chem_prod_no)
        values
            (#{safAccidentNo}
            ,#{chemProdNo})
    </insert>

    <delete id= "deleteAccidentChemprod">
        /* AccidentMapper.deleteAccidentChemprod [Accident.xml] */
        delete from saf_accident_chemprod
        where saf_accident_no = #{safAccidentNo}
    </delete>

    <select id= "countAccidentInvest" resultType= "int">
        /* AccidentMapper.countAccidentInvest [Accident.xml] */
        select count(*)
        from saf_accident_invest
        where saf_accident_no = #{safAccidentNo}
    </select>

    <select id= "getAccidentInvestPsns" resultType= "com.she.safety.model.AccidentInvestPsn">
        /* AccidentMapper.getAccidentInvestPsns [Accident.xml] */
        select saf_accident_no
            ,user_id
            ,user_nm
            ,dept_cd
            ,dept_nm
            ,duty_nm
            ,position_nm
        from saf_accident_invest_psn saip
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and saip.saf_accident_no = #{safAccidentNo}
        </if>
    </select>

    <insert id= "createAccidentInvestPsn" parameterType= "com.she.safety.model.AccidentInvestPsn">
        /* AccidentMapper.createAccidentInvestPsn [Accident.xml] */
        insert into saf_accident_invest_psn
            (saf_accident_no
            ,user_id
            ,user_nm
            ,dept_cd
            ,dept_nm
            ,duty_nm
            ,position_nm)
        values
            (#{safAccidentNo}
            ,#{userId}
            ,#{userNm}
            ,#{deptCd}
            ,#{deptNm}
            ,#{dutyNm}
            ,#{positionNm})
    </insert>

    <delete id= "deleteAccidentInvestPsn">
        /* AccidentMapper.deleteAccidentInvestPsn [Accident.xml] */
        delete from saf_accident_invest_psn
        where saf_accident_no = #{safAccidentNo}
    </delete>

    <insert id= "createAccidentRefPsn" parameterType= "com.she.safety.model.AccidentRefPsn">
        /* AccidentMapper.createAccidentRefPsn [Accident.xml] */
        <selectKey keyProperty= "safAccidentRefPsnNo" resultType= "int" order= "BEFORE">
            select (next value for seq_saf_accident_ref_psn) as safAccidentRefPsnNo
          </selectKey>
        insert into saf_accident_ref_psn
            (saf_accident_ref_psn_no
            ,saf_accident_no
            ,psn_type_cd
            ,ref_nm
            ,ref_user_id
            ,ref_duty_nm
            ,ref_dept_cd
            ,ref_dept_nm
            ,remarks)
        values
            (#{safAccidentRefPsnNo}
            ,#{safAccidentNo}
            ,#{psnTypeCd}
            ,#{refNm}
            ,#{refUserId}
            ,#{refDutyNm}
            ,#{refDeptCd}
            ,#{refDeptNm}
            ,#{remarks})
    </insert>

    <delete id= "deleteAccidentRefPsn">
        /* AccidentMapper.deleteAccidentRefPsn [Accident.xml] */
        delete from saf_accident_ref_psn
        where saf_accident_no = #{safAccidentNo}
    </delete>

    <select id= "getAccidentVictims" resultType= "com.she.safety.model.AccidentVictim">
        /* AccidentMapper.getAccidentVictims [Accident.xml] */
        select sav.saf_accident_victim_no
            ,sav.damage_lvl_cd
            ,damagelevel.code_nm as damage_lvl_nm
            ,sav.victim_type_cd
            ,victimtype.code_nm as victim_type_nm
            ,sav.victim_nm
            ,sav.victim_user_id
            ,sav.victim_duty_nm
            ,sav.victim_dept_cd
            ,sav.victim_dept_nm
            ,sav.com_sex_type_cd
            ,sav.victim_birthday
            ,sav.ent_dt
            ,isnull(sav.years, '') as years
            ,sav.position
            ,sav.work_his
            ,sav.job_his
            ,sav.accident_his
            ,sav.saf_accident_no
        from saf_accident_victim sav
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_DAMAGE_LVL') damagelevel
        on sav.damage_lvl_cd = damagelevel.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_VICTIM_TYPE') victimtype
        on sav.victim_type_cd = victimtype.code
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and sav.saf_accident_no = #{safAccidentNo}
        </if>
        <if test= "victimTypeCd != null and !victimTypeCd.equals('')">
        and sav.victim_type_cd = #{victimTypeCd}
        </if>
        order by sav.damage_lvl_cd
    </select>

    <select id= "getAccidentVictimHumanInjuryClss" resultType= "String">
        /* AccidentMapper.getAccidentVictimHumanInjuryClss [Accident.xml] */
        select savhic.human_injury_cls_cd
            --,injuryCls.code_nm as human_injury_cls_nm
            --,savhic.saf_accident_victim_no
        from saf_accident_victim_human_injury_cls savhic
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_DMG_CLS') injuryCls
        on savhic.human_injury_cls_cd = injuryCls.code
        where 1=1
        and savhic.saf_accident_victim_no = #{safAccidentVictimNo}
    </select>

    <select id= "getAccidentVictimHumanInjuryParts" resultType= "String">
        /* AccidentMapper.getAccidentVictimHumanInjuryParts [Accident.xml] */
        select savhip.human_injury_part_cd
            --,injuryPart.code_nm as human_injury_part_nm
            --,savhip.saf_accident_victim_no
        from saf_accident_victim_human_injury_part savhip
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_DP_CLS') injuryPart
        on savhip.human_injury_part_cd = injuryPart.code
        where 1=1
        and savhip.saf_accident_victim_no = #{safAccidentVictimNo}
    </select>

    <insert id= "createAccidentVictim" parameterType= "com.she.safety.model.AccidentVictim">
        /* AccidentMapper.createAccidentVictim [Accident.xml] */
        <selectKey keyProperty= "safAccidentVictimNo" resultType= "int" order= "BEFORE">
            select (next value for seq_saf_accident_victim) as saf_accident_victim_no
          </selectKey>
        insert into saf_accident_victim
            (saf_accident_victim_no
            ,damage_lvl_cd
            ,victim_type_cd
            ,victim_nm
            ,victim_user_id
            ,victim_duty_nm
            ,victim_dept_cd
            ,victim_dept_nm
            ,com_sex_type_cd
            ,victim_birthday
            ,ent_dt
            ,years
            ,position
            ,work_his
            ,job_his
            ,accident_his
            ,saf_accident_no)
        values
            (#{safAccidentVictimNo}
            ,#{damageLvlCd}
            ,#{victimTypeCd}
            ,#{victimNm}
            ,#{victimUserId}
            ,#{victimDutyNm}
            ,#{victimDeptCd}
            ,#{victimDeptNm}
            ,#{comSexTypeCd}
            ,#{victimBirthday}
            ,#{entDt}
            ,#{years}
            ,#{position}
            ,#{workHis}
            ,#{jobHis}
            ,#{accidentHis}
            ,#{safAccidentNo})
    </insert>

    <delete id= "deleteAccidentVictim">
        /* AccidentMapper.deleteAccidentVictim [Accident.xml] */
        delete from saf_accident_victim
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and saf_accident_no = #{safAccidentNo}
        </if>
        <if test= "safAccidentVictimNo != null and safAccidentVictimNo > 0">
        and saf_accident_victim_no = #{safAccidentVictimNo}
        </if>
    </delete>

    <insert id= "createAccidentVictimInjuryPart" parameterType= "com.she.safety.model.AccidentVictimHumanInjuryPart">
        /* AccidentMapper.createAccidentVictimInjuryPart [Accident.xml] */
        insert into saf_accident_victim_human_injury_part
            (human_injury_part_cd
            ,saf_accident_victim_no)
        values
            (#{humanInjuryPartCd}
            ,#{safAccidentVictimNo})
    </insert>

    <delete id= "deleteAccidentVictimInjuryPart">
        /* AccidentMapper.deleteAccidentVictimInjuryPart [Accident.xml] */
        delete from saf_accident_victim_human_injury_part
        where saf_accident_victim_no = #{safAccidentVictimNo}
    </delete>

    <insert id= "createAccidentVictimInjuryCls" parameterType= "com.she.safety.model.AccidentVictimHumanInjuryCls">
        /* AccidentMapper.createAccidentVictimInjuryCls [Accident.xml] */
        insert into saf_accident_victim_human_injury_cls
            (human_injury_cls_cd
            ,saf_accident_victim_no)
        values
            (#{humanInjuryClsCd}
            ,#{safAccidentVictimNo})
    </insert>

    <delete id= "deleteAccidentVictimInjuryCls">
        /* AccidentMapper.deleteAccidentVictimInjuryCls [Accident.xml] */
        delete from saf_accident_victim_human_injury_cls
        where saf_accident_victim_no = #{safAccidentVictimNo}
    </delete>

    <select id= "getAccidentCauMeass" resultType= "com.she.safety.model.AccidentCauMeas">
        /* AccidentMapper.getAccidentCauMeass [Accident.xml] */
        select sacm.saf_accident_cau_meas_no
            ,sacm.root_cause
            ,sacm.impr_measure
            ,sacm.saf_accident_no
            ,sacm.act_cls_cd
            ,actCls.code_nm as act_cls_nm
            ,'개선요청' as improvement
            ,'즉시조치등록' as request
        from saf_accident_cau_meas sacm
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_ACT_CLS') actCls
        on sacm.act_cls_cd = actCls.code
        where 1=1
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and sacm.saf_accident_no = #{safAccidentNo}
        </if>
        order by sacm.saf_accident_cau_meas_no
    </select>

    <insert id= "createAccidentCauMeas" parameterType= "com.she.safety.model.AccidentCauMeas">
        /* AccidentMapper.createAccidentCauMeas [Accident.xml] */
        <selectKey keyProperty= "safAccidentCauMeasNo" resultType= "int" order= "BEFORE">
            select (next value for seq_saf_accident_cau_meas) as saf_accident_cau_meas_no
          </selectKey>
          insert into saf_accident_cau_meas
              (saf_accident_cau_meas_no
            ,root_cause
            ,impr_measure
            ,act_cls_cd
            ,saf_accident_no)
        values
            (#{safAccidentCauMeasNo}
            ,#{rootCause}
            ,#{imprMeasure}
            ,#{actClsCd}
            ,#{safAccidentNo})
    </insert>

    <update id= "updateAccidentCauMeas" parameterType= "com.she.safety.model.AccidentCauMeas">
        /* AccidentMapper.updateAccidentCauMeas [Accident.xml] */
        update saf_accident_cau_meas
        set root_cause = #{rootCause}
            ,impr_measure = #{imprMeasure}
            ,act_cls_cd = #{actClsCd}
        where saf_accident_cau_meas_no = #{safAccidentCauMeasNo}
    </update>

    <delete id= "deleteAccidentCauMeas">
        /* AccidentMapper.deleteAccidentCauMeas [Accident.xml] */
        delete from saf_accident_cau_meas
        where 1=1
        <if test= "safAccidentCauMeasNo != null and safAccidentCauMeasNo > 0">
        and saf_accident_cau_meas_no = #{safAccidentCauMeasNo}
        </if>
        <if test= "safAccidentNo != null and safAccidentNo > 0">
        and saf_accident_no = #{safAccidentNo}
        </if>
    </delete>

    <update id= "updateAccidentStepCd" parameterType= "HashMap">
        /* AccidentMapper.updateAccidentStepCd [Accident.xml] */
        update saf_accident
        set accident_step_cd = #{accidentStepCd}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_accident_no = #{safAccidentNo}
    </update>

    <select id= "getAccidentRefPsns" resultType= "com.she.safety.model.AccidentRefPsn">
        select sarp.saf_accident_ref_psn_no
              ,sarp.psn_type_cd
              ,psnType.code_nm as psn_type_nm
              ,sarp.ref_nm
              ,sarp.ref_user_id
              ,sarp.ref_duty_nm
              ,sarp.ref_dept_cd
              ,sarp.ref_dept_nm
              ,sarp.remarks
              ,sarp.saf_accident_no
        from saf_accident_ref_psn sarp
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_PSN_TYPE') psnType
        on sarp.psn_type_cd = psnType.code
        where sarp.saf_accident_no = #{safAccidentNo}
    </select>

    <select id= "getAccidentStatus" resultType= "HashMap">
        /* AccidentMapper.getAccidentStatus [Accident.xml] */
        <!-- 보안취약점 점검에서 예외처리가 안 될 경우 SP로 사용 -->
        <!--EXEC SP_GET_ACCIDENT_STATUS #{accidentYear}, #{yearMonthStr}, #{plantCd}, #{deptCd}, #{accidentGubun}, #{accidentType}, #{occKindCd}, #{occAttCd}, #{immCauseCd}, #{indCauseCd}, #{defaultParam.lang}-->
        <if test= "accidentGubun == null or ''.equals(accidentGubun) or 'nearmiss'.equals(accidentGubun)">
        SELECT 'Nearmiss' as accident_gubun
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,'아차사고' + plant.code_nm as plant_gubun

            ,sa.occ_ptn_cls_cd as occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_ptn_m_cls_cd as occ_att_cd
            ,(SELECT a.code_nm
                FROM dbo.LANG_CODE_MASTER(#{defaultParam.lang}, sa.occ_ptn_cls_cd) a
               WHERE sa.occ_ptn_m_cls_cd = a.code
             ) as occ_att_nm
            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm

            ,sa.dept_cd
            ,cd.dept_nm
            ,sao.occ_type_cd as accident_type_cd
            ,accidentType.code_nm as accident_type_nm

            <foreach collection= "yearMonth" item= "ym">
            ,(SELECT count(*)
                FROM saf_nearmiss a
               INNER JOIN saf_nearmiss_occtype b
                  ON a.saf_nearmiss_no = b.saf_nearmiss_no
               WHERE a.process_step_cd = sa.process_step_cd
                 AND a.plant_cd = sa.plant_cd
                 AND a.dept_cd = sa.dept_cd
                 AND b.occ_type_cd = sao.occ_type_cd
                 AND a.occ_ptn_cls_cd = sa.occ_ptn_cls_cd
                 AND a.occ_ptn_m_cls_cd = sa.occ_ptn_m_cls_cd
                 AND a.imm_cause_cd = sa.imm_cause_cd
                 AND a.ind_cause_cd = sa.ind_cause_cd
                 AND format(convert(datetime, a.nearmiss_ymd), 'yyyy-MM') = #{ym}) as '${ym}'
            </foreach>

            ,(SELECT count(*)
                FROM saf_nearmiss a
               INNER JOIN saf_nearmiss_occtype b
                  ON a.saf_nearmiss_no = b.saf_nearmiss_no
               WHERE a.process_step_cd = sa.process_step_cd
                 AND a.plant_cd = sa.plant_cd
                 AND a.dept_cd = sa.dept_cd
                 AND b.occ_type_cd = sao.occ_type_cd
                 AND a.occ_ptn_cls_cd = sa.occ_ptn_cls_cd
                 AND a.occ_ptn_m_cls_cd = sa.occ_ptn_m_cls_cd
                 AND a.imm_cause_cd = sa.imm_cause_cd
                 AND a.ind_cause_cd = sa.ind_cause_cd
                 AND convert(datetime, a.nearmiss_ymd) between convert(datetime, #{accidentYear} + '-01-01') and convert(datetime, #{accidentYear} + '-12-31')) as sum
        from saf_nearmiss sa
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_Cd = plant.code
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join saf_nearmiss_occtype sao
        on sa.saf_nearmiss_no = sao.saf_nearmiss_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_OCC_TYPE') accidentType
        on sao.occ_type_cd = accidentType.code

        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_ptn_cls_cd = occKind.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        where 1=1
        and sa.process_step_cd = 'NEMS2'
        <if test= "plantCd != null and !''.equals(plantCd)">
        and sa.plant_Cd = #{plantCd}
        </if>
        <if test= "deptCd != null and !''.equals(deptCd)">
        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND sa.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND sa.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "accidentType != null and !''.equals(accidentType)">
        and sao.occ_type_cd = #{accidentType}
        </if>

        <if test= "occKindCd != null and !''.equals(occKindCd)">
        and sa.occ_ptn_cls_cd = #{occKindCd}
        </if>
        <if test= "occAttCd != null and !''.equals(occAttCd)">
        and sa.occ_ptn_m_cls_cd = #{occAttCd}
        </if>
        <if test= "immCauseCd != null and !''.equals(immCauseCd)">
        and sa.imm_cause_cd = #{immCauseCd}
        </if>
        <if test= "indCauseCd != null and !''.equals(indCauseCd)">
        and sa.ind_cause_cd = #{indCauseCd}
        </if>
        and convert(datetime, sa.nearmiss_ymd) between convert(datetime, #{accidentYear} + '-01-01') and convert(datetime, #{accidentYear} + '-12-31')
        group by sa.process_step_cd, sa.plant_cd, plant.code_nm, sa.occ_ptn_cls_cd, occKind.code_nm, sa.occ_ptn_m_cls_cd, sa.imm_cause_cd, immCause.code_nm, sa.ind_cause_cd, indCause.code_nm, sa.dept_cd,cd.dept_nm,sao.occ_type_cd,accidentType.code_nm
        </if>
        <if test= "accidentGubun == null or ''.equals(accidentGubun)">
        union all
        </if>
        <if test= "accidentGubun == null or ''.equals(accidentGubun) or 'accident'.equals(accidentGubun)">
        select 'Accident' as accident_gubun
            ,sa.plant_cd
            ,plant.code_nm as plant_nm
            ,'사고' + plant.code_nm as plant_gubun

            ,sa.occ_kind_cd
            ,occKind.code_nm as occ_kind_nm
            ,sa.occ_att_cd
            ,(SELECT a.code_nm
                FROM dbo.LANG_CODE_MASTER(#{defaultParam.lang}, sa.occ_kind_cd) a
               WHERE sa.occ_att_cd = a.code
            ) as occ_att_nm
            ,sa.imm_cause_cd
            ,immCause.code_nm as imm_cause_nm
            ,sa.ind_cause_cd
            ,indCause.code_nm as ind_cause_nm
            ,sa.dept_cd
            ,cd.dept_nm
            ,sao.accident_type_cd
            ,accidentType.code_nm as accident_type_nm

            <foreach collection= "yearMonth" item= "ym">
            ,(SELECT count(*)
                FROM saf_accident a
               INNER JOIN saf_accident_occtype b
                  ON a.saf_accident_no = b.saf_accident_no
               WHERE a.accident_step_cd = sa.accident_step_cd
                 AND a.plant_cd = sa.plant_cd
                 AND a.dept_cd = sa.dept_cd
                 AND b.accident_type_cd = sao.accident_type_cd
                 AND a.occ_kind_cd = sa.occ_kind_cd
                 AND a.occ_att_cd = sa.occ_att_cd
                 AND a.imm_cause_cd = sa.imm_cause_cd
                 AND a.ind_cause_cd = sa.ind_cause_cd
                 AND format(convert(datetime, a.accident_ymd), 'yyyy-MM') = #{ym}) as '${ym}'
            </foreach>
            ,(SELECT count(*)
                FROM saf_accident a
               INNER JOIN saf_accident_occtype b
                  ON a.saf_accident_no = b.saf_accident_no
               WHERE a.accident_step_cd = sa.accident_step_cd
                 AND a.plant_cd = sa.plant_cd
                 AND a.dept_cd = sa.dept_cd
                 AND b.accident_type_cd = sao.accident_type_cd
                 AND a.occ_kind_cd = sa.occ_kind_cd
                 AND a.occ_att_cd = sa.occ_att_cd
                 AND a.imm_cause_cd = sa.imm_cause_cd
                 AND a.ind_cause_cd = sa.ind_cause_cd
                 AND convert(datetime, a.accident_ymd) between convert(datetime, #{accidentYear} + '-01-01') and convert(datetime, #{accidentYear} + '-12-31')) as sum
        from saf_accident sa
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
        on sa.plant_Cd = plant.code
        inner join com_dept cd
        on sa.dept_cd = cd.dept_cd
        inner join saf_accident_occtype sao
        on sa.saf_accident_no = sao.saf_accident_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_OCC_TYPE') accidentType
        on sao.accident_type_cd = accidentType.code

        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_OCC_PTN_CLS') occKind
        on sa.occ_kind_cd = occKind.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IMM_CAUSE') immCause
        on sa.imm_cause_cd = immCause.code
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_ACCIDENT_IND_CAUSE') indCause
        on sa.ind_cause_cd = indCause.code
        where 1=1
        and sa.accident_step_cd = 'ACCS4'
        <if test= "plantCd != null and !''.equals(plantCd)">
        and sa.plant_Cd = #{plantCd}
        </if>
        <if test= "deptCd != null and !''.equals(deptCd)">
        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND sa.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND sa.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->
        </if>
        <if test= "accidentType != null and !''.equals(accidentType)">
        and sao.accident_type_cd = #{accidentType}
        </if>

        <if test= "occKindCd != null and !''.equals(occKindCd)">
        and sa.occ_kind_cd = #{occKindCd}
        </if>
        <if test= "occAttCd != null and !''.equals(occAttCd)">
        and sa.occ_att_cd = #{occAttCd}
        </if>
        <if test= "immCauseCd != null and !''.equals(immCauseCd)">
        and sa.imm_cause_cd = #{immCauseCd}
        </if>
        <if test= "indCauseCd != null and !''.equals(indCauseCd)">
        and sa.ind_cause_cd = #{indCauseCd}
        </if>
        and convert(datetime, sa.accident_ymd) between convert(datetime, #{accidentYear} + '-01-01') and convert(datetime, #{accidentYear} + '-12-31')
        group by sa.accident_step_cd, sa.plant_cd, plant.code_nm, sa.occ_kind_cd, occKind.code_nm, sa.occ_att_cd, sa.imm_cause_cd, immCause.code_nm, sa.ind_cause_cd, indCause.code_nm, sa.dept_cd,cd.dept_nm,sao.accident_type_cd,accidentType.code_nm
        </if>
    </select>

    <update id="completeAccidentOccur">
        /* AccidentMapper.completeAccidentOccur [Accident.xml] */
        update saf_accident
        set s1_appr_rqst_no = #{apprRqstNo}
        <if test="accidentStepCd != null and !accidentStepCd.equals('')">
        ,accident_step_cd = #{accidentStepCd}
        </if>
        where saf_accident_no = #{safAccidentNo}
    </update>

    <update id="completeAccidentReception">
        /* AccidentMapper.completeAccidentReception [Accident.xml] */
        update saf_accident
        set s2_appr_rqst_no = #{apprRqstNo}
        <if test="accidentStepCd != null and !accidentStepCd.equals('')">
        ,accident_step_cd = #{accidentStepCd}
        </if>
        where saf_accident_no = #{safAccidentNo}
    </update>

    <update id="completeAccidentResult">
        /* AccidentMapper.completeAccidentResult [Accident.xml] */
        update saf_accident
        set s3_appr_rqst_no = #{apprRqstNo}
        <if test="accidentStepCd != null and !accidentStepCd.equals('')">
        ,accident_step_cd = #{accidentStepCd}
        </if>
        where saf_accident_no = #{safAccidentNo}
    </update>
    <select id="getAccidentResultsStatusList" resultType="hashMap">
        /* AccidentMapper.getAccidentResultsStatusList [Accident.xml] */
         with plant as (
             select code as plantCd
             from com_code_master
             where code_group_cd = 'COM_PLANT_CD'
             and code != '0000'
         ),
         gubunList as (
             select p.plantCd
                     ,g.gubun_type
                     ,g.gubun
                     ,g.sort_order
             from plant p
             inner join (
                 select 'total' as gubun_type
                         ,'발생(건수)' as gubun
                         ,1 as sort_order
                 union
                 select 'impr' as gubun_type
                         ,'요청(건수)' as gubun
                         ,4 as sort_order
                 union
                 select 'impr' as gubun_type
                         ,'조치미완료(건수)' as gubun
                         ,5 as sort_order
                 union
                 select 'impr' as gubun_type
                         ,'기한초과(건수)' as gubun
                         ,6 as sort_order
                 union
                 select 'impr' as gubun_type
                         ,'조치완료(건수)' as gubun
                         ,7 as sort_order
                 union
                 select 'impr' as gubun_type
                         ,'개선 조치율(%)' as gubun
                         ,8 as sort_order
             ) g on 1=1
         ),
         testItem as (
            select
            sa.plant_cd as plantCd
            ,dbo.GET_CODE_NM(sa.plant_cd, 'COM_PLANT_CD') as plant_nm
            ,'발생(건수)' as gubun
           ,convert(varchar,sum(case when left(sa.accident_ymd, 4) &lt; #{assessYear} then 1 else 0 end)) as oldCnt
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 1 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon1
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 2 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon2
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 3 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon3
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 4 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon4
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 5 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon5
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 6 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon6
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 7 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon7
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 8 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon8
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 9 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon9
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 10 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon10
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 11 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon11
           ,convert(varchar,sum(case when subString(sa.accident_ymd, 6, 2) = 12 and left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as mon12
           ,convert(varchar,sum(case when left(sa.accident_ymd, 4) = #{assessYear} then 1 else 0 end)) as total
           ,convert(varchar,sum(case when left(sa.accident_ymd, 4) &lt;= #{assessYear} then 1 else 0 end)) as allCnt           
           ,1 as sort_order
        from
        saf_accident sa
        left outer join com_appr_rqst car
        on isnull(sa.s3_appr_rqst_no,sa.s2_appr_rqst_no) = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
        on car.biz_appr_step_cd = bizAppr.code
        where sa.accident_step_cd = 'ACCS4'
          and bizAppr.code = 'BAPSG'
        group by sa.plant_cd
         ),
         impr as (
             select
                     sa.plant_cd as plantCd
                     ,dbo.GET_CODE_NM(sa.plant_cd, 'COM_PLANT_CD') as plant_nm
                     ,iif(sia.impr_step_cd = 'IMST5', '조치완료(건수)', iif(datediff(dd, sia.act_limit_ymd, getdate()) > 0 , '기한초과(건수)','조치미완료(건수)')) AS gubun
                     ,convert(numeric(10),sum(case when left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) &lt; #{assessYear} then 1 else 0 end)) as oldCnt
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 1 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon1
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 2 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon2
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 3 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon3
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 4 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon4
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 5 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon5
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 6 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon6
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 7 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon7
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 8 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon8
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 9 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon9
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 10 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon10
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 11 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon11
                     ,convert(numeric(10),sum(case when substring(convert(char(10), iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 23), 6, 2) = 12 and left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear}  then 1 else 0 end)) as mon12
                     ,convert(numeric(10),sum(case when left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) = #{assessYear} then 1 else 0 end)) as total
                     ,convert(numeric(10),sum(case when left(iif(isnull(sia.act_limit_ymd, '') = '', sia.act_confirm_ymd, sia.act_limit_ymd), 4) &lt;= #{assessYear} then 1 else 0 end)) as allCnt
             from saf_accident sa
             left outer join com_appr_rqst car
             on isnull(sa.s3_appr_rqst_no,sa.s2_appr_rqst_no) = car.appr_rqst_no
             left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
             on car.biz_appr_step_cd = bizAppr.code
             inner join saf_impr_act sia on ((sia.impr_class_cd = 'ICL01' and sia.ref_table_id = sa.saf_accident_no)
                 or (sia.impr_class_cd = 'ICL44' 
                        and sia.ref_table_id in (
                                 select saf_accident_cau_meas_no
                                 from saf_accident_cau_meas
                                 where saf_accident_no = sa.saf_accident_no
                                 )
                         )                    
                 )
              and sa.accident_step_cd = 'ACCS4'
              and bizAppr.code = 'BAPSG'
             where 1=1

             group by sa.plant_cd, iif(sia.impr_step_cd = 'IMST5', '조치완료(건수)', iif(datediff(dd, sia.act_limit_ymd, getdate()) > 0 , '기한초과(건수)','조치미완료(건수)'))
         )
        select
            g.plantCd
           ,dbo.GET_CODE_NM_LANG('kr', 'COM_PLANT_CD', g.plantCd) as plant_nm
           ,'사고현황' as rsa_result
           ,g.gubun
           ,isnull(s.oldCnt , 0) as oldCnt
           ,isnull(s.mon1 , 0) as mon1
           ,isnull(s.mon2 , 0) as mon2
           ,isnull(s.mon3 , 0) as mon3
           ,isnull(s.mon4 , 0) as mon4
           ,isnull(s.mon5 , 0) as mon5
           ,isnull(s.mon6 , 0) as mon6
           ,isnull(s.mon7 , 0) as mon7
           ,isnull(s.mon8 , 0) as mon8
           ,isnull(s.mon9 , 0) as mon9
           ,isnull(s.mon10, 0) as mon10
           ,isnull(s.mon11, 0) as mon11
           ,isnull(s.mon12, 0) as mon12
           ,isnull(s.total, 0) as total
           ,isnull(s.allCnt, 0) as allCnt
           ,isnull(s.sort_order, 1) as sort_order
        from gubunList g
        left outer join testItem s on s.plantCd = g.plantCd
         where 1=1
            and g.gubun_type = 'total'
            <if test= "plantCd != null and !plantCd.equals('')">
              and g.plantCd = #{plantCd}
            </if>
        union all
         select  g.plantCd
                 ,dbo.GET_CODE_NM_LANG('kr', 'COM_PLANT_CD', g.plantCd) as plant_nm
                 ,'개선현황' as rsa_result
                 ,g.gubun
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.oldCnt else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.oldCnt, 0) else iif(g.gubun = r.gubun, r.oldCnt, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.oldCnt, 0)), sum(r.oldCnt)) * 100, 2), '0.00')) end as oldCnt
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon1 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon1, 0) else iif(g.gubun = r.gubun, r.mon1, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon1, 0)), sum(r.mon1)) * 100, 2), '0.00')) end as mon1
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon2 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon2, 0) else iif(g.gubun = r.gubun, r.mon2, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon2, 0)), sum(r.mon2)) * 100, 2), '0.00')) end as mon2
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon3 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon3, 0) else iif(g.gubun = r.gubun, r.mon3, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon3, 0)), sum(r.mon3)) * 100, 2), '0.00')) end as mon3
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon4 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon4, 0) else iif(g.gubun = r.gubun, r.mon4, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon4, 0)), sum(r.mon4)) * 100, 2), '0.00')) end as mon4
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon5 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon5, 0) else iif(g.gubun = r.gubun, r.mon5, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon5, 0)), sum(r.mon5)) * 100, 2), '0.00')) end as mon5
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon6 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon6, 0) else iif(g.gubun = r.gubun, r.mon6, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon6, 0)), sum(r.mon6)) * 100, 2), '0.00')) end as mon6
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon7 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon7, 0) else iif(g.gubun = r.gubun, r.mon7, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon7, 0)), sum(r.mon7)) * 100, 2), '0.00')) end as mon7
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon8 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon8, 0) else iif(g.gubun = r.gubun, r.mon8, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon8, 0)), sum(r.mon8)) * 100, 2), '0.00')) end as mon8
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon9 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon9, 0) else iif(g.gubun = r.gubun, r.mon9, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon9, 0)), sum(r.mon9)) * 100, 2), '0.00')) end as mon9
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon10 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon10, 0) else iif(g.gubun = r.gubun, r.mon10, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon10, 0)), sum(r.mon10)) * 100, 2), '0.00')) end as mon10
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon11 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon11, 0) else iif(g.gubun = r.gubun, r.mon11, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon11, 0)), sum(r.mon11)) * 100, 2), '0.00')) end as mon11
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon12 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon12, 0) else iif(g.gubun = r.gubun, r.mon12, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon12, 0)), sum(r.mon12)) * 100, 2), '0.00')) end as mon12
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.total else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.total, 0) else iif(g.gubun = r.gubun, r.total, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.total, 0)), sum(r.total)) * 100, 2), '0.00')) end as total
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.allCnt else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.allCnt, 0) else iif(g.gubun = r.gubun, r.allCnt, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.allCnt, 0)), sum(r.allCnt)) * 100, 2), '0.00')) end as allCnt
                 ,max(g.sort_order)
         from gubunList g
         left outer join impr r on r.plantCd = g.plantCd
         where 1=1
         and g.gubun_type = 'impr'
         <if test= "plantCd != null and !plantCd.equals('')">
            and g.plantCd = #{plantCd}
         </if>
         group by g.plantCd, g.gubun

         <!-- 전체일 경우 합계 데이터 조회 -->
         <if test='!totalFlag != null and totalFlag.equals("Y")'>
         union all
         select  '합계'
                 ,'합계'
                 ,'개선현황' as rsa_result
                 ,g.gubun
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.oldCnt else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.oldCnt, 0) else iif(g.gubun = r.gubun, r.oldCnt, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.oldCnt, 0)), sum(r.oldCnt)) * 100, 2), '0.00')) end as oldCnt
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon1 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon1, 0) else iif(g.gubun = r.gubun, r.mon1, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon1, 0)), sum(r.mon1)) * 100, 2), '0.00')) end as mon1
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon2 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon2, 0) else iif(g.gubun = r.gubun, r.mon2, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon2, 0)), sum(r.mon2)) * 100, 2), '0.00')) end as mon2
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon3 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon3, 0) else iif(g.gubun = r.gubun, r.mon3, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon3, 0)), sum(r.mon3)) * 100, 2), '0.00')) end as mon3
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon4 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon4, 0) else iif(g.gubun = r.gubun, r.mon4, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon4, 0)), sum(r.mon4)) * 100, 2), '0.00')) end as mon4
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon5 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon5, 0) else iif(g.gubun = r.gubun, r.mon5, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon5, 0)), sum(r.mon5)) * 100, 2), '0.00')) end as mon5
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon6 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon6, 0) else iif(g.gubun = r.gubun, r.mon6, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon6, 0)), sum(r.mon6)) * 100, 2), '0.00')) end as mon6
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon7 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon7, 0) else iif(g.gubun = r.gubun, r.mon7, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon7, 0)), sum(r.mon7)) * 100, 2), '0.00')) end as mon7
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon8 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon8, 0) else iif(g.gubun = r.gubun, r.mon8, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon8, 0)), sum(r.mon8)) * 100, 2), '0.00')) end as mon8
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon9 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon9, 0) else iif(g.gubun = r.gubun, r.mon9, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon9, 0)), sum(r.mon9)) * 100, 2), '0.00')) end as mon9
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon10 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon10, 0) else iif(g.gubun = r.gubun, r.mon10, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon10, 0)), sum(r.mon10)) * 100, 2), '0.00')) end as mon10
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon11 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon11, 0) else iif(g.gubun = r.gubun, r.mon11, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon11, 0)), sum(r.mon11)) * 100, 2), '0.00')) end as mon11
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.mon12 else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.mon12, 0) else iif(g.gubun = r.gubun, r.mon12, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.mon12, 0)), sum(r.mon12)) * 100, 2), '0.00')) end as mon12
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.total else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.total, 0) else iif(g.gubun = r.gubun, r.total, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.total, 0)), sum(r.total)) * 100, 2), '0.00')) end as total
                 ,case when g.gubun != '개선 조치율(%)' then convert(varchar, isnull(sum(case when g.gubun = '요청(건수)' then r.allCnt else case when g.gubun = '조치미완료(건수)' then iif(g.gubun = r.gubun or r.gubun = '기한초과(건수)', r.allCnt, 0) else iif(g.gubun = r.gubun, r.allCnt, 0) end end), 0))
                     else convert(varchar, format(round(dbo.GET_DIVIDE(sum(iif(r.gubun = '조치완료(건수)', r.allCnt, 0)), sum(r.allCnt)) * 100, 2), '0.00')) end as allCnt
                 ,max(g.sort_order)
         from gubunList g
         left outer join impr r on r.plantCd = g.plantCd
         where 1=1
         and g.gubun_type = 'impr'
         group by g.gubun
         </if>
         order by plantCd, sort_order
    </select>
</mapper>