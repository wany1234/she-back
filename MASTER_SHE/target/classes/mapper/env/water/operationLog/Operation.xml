<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.she.env.water.operationLog.mapper.OperationMapper">
    <select id="getDailyReports" resultType="com.she.env.water.model.OpLogResult">
        select
            dd.ymd as measure_ymd
            ,bd.ewtr_clean_fac_no
            ,cf.ewtr_clean_fac_nm
            ,r.env_op_log_st_cd
            ,case when r.env_op_log_st_cd is null then '미작성'
                     else dbo.GET_CODE_NM(r.env_op_log_st_cd, 'SAF_PROCESS_STEP') end as env_op_log_st_nm
            ,cf.plant_cd
            ,bd.dept_cd
            ,dbo.GET_DEPT_NM(bd.dept_cd) as dept_nm
            ,cf.dept_cd as mg_dept_cd
            ,dbo.GET_DEPT_NM(cf.dept_cd) as mg_dept_nm
            ,r.weather
            ,dbo.GET_CODE_NM(r.weather,'SAF_WEATHER') as weather_nm
            ,case when car.biz_appr_step_cd = 'BAPSA' then '결재중'
                when car.biz_appr_step_cd = 'BAPSG' then '결재완료'
                else '결재요청전' end as biz_appr_step_nm
            ,car.appr_rqst_no
            , case
            when dbo.GET_USER_NM(r.update_user_id) = '' then dbo.GET_USER_NM(r.create_user_id)
            else dbo.GET_USER_NM(r.update_user_id) end    as writer_user_nm
            , case when r.update_dt is null then convert(date, r.create_dt) else convert(date, r.update_dt) end   as writer_dt
        from com_dummy_date dd
        inner join ewtr_oplog_base_dept bd
        on 1=1
        left join ewtr_clean_fac cf
        on bd.ewtr_clean_fac_no = cf.ewtr_clean_fac_no
        left join ewtr_op_log_result r
        on cf.ewtr_clean_fac_no = r.ewtr_clean_fac_no
        and r.dept_cd = bd.dept_cd
        and dd.ymd = r.measure_ymd
        left join com_appr_rqst car
        on r.appr_rqst_no = car.appr_rqst_no
        where 1=1
        <if test="fromDate != null and !fromDate.equals('') and toDate != null and !toDate.equals('')">
        and dd.ymd between #{fromDate} and #{toDate}
        </if>
        <if test="plantCd !=null and !plantCd.equals('')">
        and cf.plant_cd = #{plantCd}
        </if>
        <!--
        <if test="deptCd !=null and !deptCd.equals('')">
        and bd.dept_cd = #{deptCd}
        </if>
         -->
        <if test="mgDeptCd !=null and !mgDeptCd.equals('')">
        and cf.dept_cd = #{mgDeptCd}
        </if>
        <if test="ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
        and cf.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        </if>
        <if test="envOpLogStCd !=null and !envOpLogStCd.equals('')">
        and r.env_op_log_st_cd = #{envOpLogStCd}
        </if>

        <!-- 하위부서 포함여부 관련 쿼리 시작 -->
        AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'Y' AND bd.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                    UNION ALL
                    SELECT 1 WHERE #{deptSubYn} = 'N' AND bd.dept_cd = #{deptCd}
                    )
        <!-- 하위부서 포함여부 관련 쿼리 끝 -->

        order by dd.ymd desc, cf.ewtr_clean_fac_nm




    </select>

    <!-- 운영일지 기본정보 등록여부 체크 : 1이면 등록, 0이면 미등록 1101-->
    <select id="createOperationLogChk" resultType="int">
        select count(*) as icnt
         from ewtr_op_log_result t
         where 1=1
         and t.measure_ymd = #{measureYmd}
         and t.ewtr_clean_fac_no=#{ewtrCleanFacNo}
         and t.plant_cd = #{plantCd}
         and t.dept_cd = #{deptCd}
    </select>

    <delete id = "deleteOperationLog">

        delete from ewtr_op_log_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_waste_disch_fac_run_tm where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_supl_chk_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_disch_chk_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_chem_chk_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_pwrc_chk_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        delete from ewtr_test_item_result where measure_ymd = #{measureYmd} and ewtr_clean_fac_no = #{ewtrCleanFacNo}

    </delete>

    <select id="getDailyReport" resultType="com.she.env.water.model.OpLogResult">
        select
            o.plant_cd
            ,cf.ewtr_clean_fac_nm as ewtrCleanFacNm
            ,cf.ewtr_clean_fac_no as ewtrCleanFacNo
            ,o.measure_ymd
            ,o.dept_cd
            ,o.env_op_log_st_cd
            ,o.day
            ,o.weather            /* 날씨 코드*/
            ,o.temp
            ,o.amt_sludge_gen   /* 슬러지 발생량(㎥) */
            ,o.amt_sludge_tx    /* 슬러지 처리량(㎥) */
            ,o.amt_sludge_sto    /* 슬러지 보관량(㎥) */
            ,o.sludge_mc        /* 슬러지 함수율(%) */
            ,o.sludge_sto_po    /* 슬러지 보관장소 */
            ,o.sludge_tx_po        /* 슬러지 처리장소 또는 위탁처리업체 */
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_gen,0) as money),1),'.00','') as  amt_sludge_gen_t  /* 슬러지 발생량(㎥) /일지용*/
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_tx,0) as money),1),'.00','') as  amt_sludge_tx_t   /* 슬러지 처리량(㎥) / 일지용*/
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_sto,0) as money),1),'.00','') as  amt_sludge_sto_t   /* 슬러지 보관량(㎥) / 일지용 */
            ,replace(convert(varchar, cast( isnull(o.sludge_mc,0) as money),1),'.00','')  as sludge_mc_t      /* 슬러지 함수율(%)/ 일지용 */
            ,o.pwrc_per_day        /* 금일 폐수 (단위 부피당) 소모전력량*/
            ,o.shift_worker1    /* 시간대별근무자1 */
            ,o.shift_worker2    /* 시간대별근무자2 */
            ,o.shift_worker3    /* 시간대별근무자3 */
            ,o.shift_worker4    /* 시간대별근무자4 */
            ,o.shift_worker5    /* 시간대별근무자5 */
            ,o.shift_worker6    /* 시간대별근무자6 */
            ,o.shift_wktm1
            ,o.shift_wktm2
            ,o.shift_wktm3
            ,o.shift_wktm4
            ,o.shift_wktm5
            ,o.shift_wktm6
            ,concat(o.shift_wktm1, '  ' ,  o.shift_worker1) as shift_concat1
            ,concat(o.shift_wktm2, '  ' ,  o.shift_worker2) as shift_concat2
            ,concat(o.shift_wktm3, '  ' ,  o.shift_worker3) as shift_concat3
            ,concat(o.shift_wktm4, '  ' ,  o.shift_worker4) as shift_concat4
            ,concat(o.shift_wktm5, '  ' ,  o.shift_worker5) as shift_concat5
            ,concat(o.shift_wktm6, '  ' ,  o.shift_worker6) as shift_concat6
            ,o.regulator        /* 단속 기관 */
            ,o.regulator_worker    /* 단속 기관 점검자 */
            ,o.violation        /* 위반사항 */
            ,o.action            /* 조치사항 */
            ,o.create_user_id
            ,u.user_nm as create_user_nm
            ,d.dept_nm
            ,car.biz_appr_step_cd
            ,o.appr_rqst_no
            ,o.create_dt
            ,o.update_user_id
            ,o.update_dt
            ,cu.user_nm as create_user_nm
            ,uu.user_nm as update_user_nm
        from ewtr_oplog_base_dept bd
        inner join ewtr_clean_fac cf
        on bd.ewtr_clean_fac_no = cf.ewtr_clean_fac_no
        left join ewtr_op_log_result o
        on o.ewtr_clean_fac_no = cf.ewtr_clean_fac_no
        and o.dept_cd = bd.dept_cd
        left join com_appr_rqst car on o.appr_rqst_no = car.appr_rqst_no
        left join com_user u on o.create_user_id = u.user_id
        left join com_dept d on u.dept_cd = d.dept_cd
        left join com_user cu on o.create_user_id = cu.user_id
        left join com_user uu on o.update_user_id = uu.user_id
        where 1=1
        and o.measure_ymd = #{measureYmd}
        and o.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        <if test="plantCd != null and !plantCd.equals('')">
        and o.plant_cd = #{plantCd}
        </if>
        and o.dept_cd = #{deptCd}


    </select>

    <update id="updateDailyReport" parameterType="com.she.env.water.model.OpLogResult">
        merge into ewtr_op_log_result as t
        using (select #{measureYmd} measure_ymd, #{plantCd} plant_cd, #{ewtrCleanFacNo} ewtr_clean_fac_no
                    , #{weather} weather, #{temp} temp
                    , #{shiftWorker1} shift_worker1, #{shiftWorker2} shift_worker2, #{shiftWorker3} shift_worker3, #{shiftWorker4} shift_worker4, #{shiftWorker5} shift_worker5, #{shiftWorker6} shift_worker6
                    , #{shiftWktm1} shift_wktm1, #{shiftWktm2} shift_wktm2, #{shiftWktm3} shift_wktm3, #{shiftWktm4} shift_wktm4, #{shiftWktm5} shift_wktm5, #{shiftWktm6} shift_wktm6
                    , #{amtSludgeGen} amt_sludge_gen, #{amtSludgeTx} amt_sludge_tx, #{amtSludgeSto} amt_sludge_sto
                    , #{sludgeMc} sludge_mc, #{sludgeStoPo} sludge_sto_po, #{sludgeTxPo} sludge_tx_po
                    , #{regulator} regulator
                    , #{regulatorWorker} regulator_worker
                    , #{violation} violation
                    , #{action} action
                    , #{deptCd} dept_cd
               ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no and t.plant_cd = s.plant_cd and t.dept_cd = s.dept_cd)
        when not matched then
        insert  (
                      measure_ymd
                    , plant_cd
                    , ewtr_clean_fac_no
                    , day
                    , weather
                    , temp
                    , shift_worker1
                    , shift_worker2
                    , shift_worker3
                    , shift_worker4
                    , shift_worker5
                    , shift_worker6
                     ,shift_wktm1
                     ,shift_wktm2
                     ,shift_wktm3
                     ,shift_wktm4
                     ,shift_wktm5
                     ,shift_wktm6
                    , amt_sludge_gen   /* 슬러지 발생량(㎥) */
                    , amt_sludge_tx    /* 슬러지 처리량(㎥) */
                    , amt_sludge_sto    /* 슬러지 보관량(㎥) */
                    , sludge_mc        /* 슬러지 함수율(%) */
                    , sludge_sto_po    /* 슬러지 보관장소 */
                    , sludge_tx_po        /* 슬러지 처리장소 또는 위탁처리업체 */
                    , regulator        /* 단속 기관 */
                    , regulator_worker    /* 단속 기관 점검자 */
                    , violation        /* 위반사항 */
                    , action            /* 조치사항 */
                    , env_op_log_st_cd
                    , create_user_id
                    , create_dt
                    , dept_cd
                )
                values (
                      s.measure_ymd, #{plantCd}, s.ewtr_clean_fac_no
                    , case DATEPART(WEEKDAY, convert(date, s.measure_ymd ))
                        when 1 then '일요일' when 2 then '월요일' when 3 then '화요일'
                        when 4 then '수요일' when 5 then '목요일' when 6 then '금요일'
                        when 7 then '토요일' end
                    , s.weather, s.temp
                    , s.shift_worker1, s.shift_worker2, s.shift_worker3, s.shift_worker4, s.shift_worker5, s.shift_worker6
                    , s.shift_wktm1, s.shift_wktm2, s.shift_wktm3, s.shift_wktm4, s.shift_wktm5, s.shift_wktm6
                    , s.amt_sludge_gen
                    , s.amt_sludge_tx
                    , s.amt_sludge_sto
                    , s.sludge_mc
                    , s.sludge_sto_po
                    , s.sludge_tx_po
                    , s.regulator
                    , s.regulator_worker
                    , s.violation
                    , s.action
                    ,'STEP1'
                    , #{createUserId}
                    , getdate()
                    , s.dept_cd
                )
         when matched then
         update set  weather = s.weather
                    , temp = s.temp

                    ,shift_worker1 = s.shift_worker1
                    ,shift_worker2 = s.shift_worker2
                    ,shift_worker3 = s.shift_worker3
                    ,shift_worker4 = s.shift_worker4
                    ,shift_worker5 = s.shift_worker5
                    ,shift_worker6 = s.shift_worker6

                    ,shift_wktm1 = s.shift_wktm1
                    ,shift_wktm2 = s.shift_wktm2
                    ,shift_wktm3 = s.shift_wktm3
                    ,shift_wktm4 = s.shift_wktm4
                    ,shift_wktm5 = s.shift_wktm5
                    ,shift_wktm6 = s.shift_wktm6

                    ,amt_sludge_gen = s.amt_sludge_gen
                    ,amt_sludge_tx = s.amt_sludge_tx
                    ,amt_sludge_sto = s.amt_sludge_sto
                    ,sludge_mc = s.sludge_mc
                    ,sludge_sto_po = s.sludge_sto_po
                    ,sludge_tx_po = s.sludge_tx_po
                    ,regulator =  s.regulator
                    ,regulator_worker =  s.regulator_worker
                    ,violation = s.violation
                    ,action = s.action
                    ,update_user_id = #{updateUserId}
                    ,update_dt = getdate()
                    ,create_user_id = #{createUserId}
                    ,create_dt = getdate()
        ;
    </update>

    <!-- 수질운영일지 배출시설 가동시간 초기데이터-->
    <insert id="createDischRunTms" parameterType= "com.she.env.water.model.OpLogResult">
        INSERT INTO ewtr_waste_disch_fac_run_tm
              (ewtr_waste_disch_fac_no
              ,ewtr_disch_grp_cd
              ,measure_ymd
              ,ewtr_clean_fac_no
              ,h00_yn
              ,h01_yn
              ,h02_yn
              ,h03_yn
              ,h04_yn
              ,h05_yn
              ,h06_yn
              ,h07_yn
              ,h08_yn
              ,h09_yn
              ,h10_yn
              ,h11_yn
              ,h12_yn
              ,h13_yn
              ,h14_yn
              ,h15_yn
              ,h16_yn
              ,h17_yn
              ,h18_yn
              ,h19_yn
              ,h20_yn
              ,h21_yn
              ,h22_yn
              ,h23_yn
              ,create_user_id
              ,create_dt)
        SELECT ewtr_waste_disch_fac_no
              ,ewtr_disch_grp_cd
              ,#{measureYmd}
              ,ewtr_clean_fac_no
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,#{createUserId}
              ,getdate()
          FROM ewtr_waste_disch_fac
         WHERE use_yn = 'Y'
           AND plant_cd = #{plantCd}
           AND ewtr_clean_fac_no = #{ewtrCleanFacNo}
    </insert>

    <!-- 수질운영일지 방지시설 가동시간 초기데이터-->
    <insert id="createPreventRunTms" parameterType= "com.she.env.water.model.OpLogResult">
        <selectKey keyProperty= "preventRunFacNo" resultType= "int" order= "BEFORE">
            select next value for seq_prevent_run_fac_no
        </selectKey>
        INSERT INTO ewtr_prevent_fac_run_tm
              (ewtr_prevent_fac_no
              ,measure_ymd
              ,ewtr_prevent_run_fac_no
              ,ewtr_clean_fac_no
              ,h00_yn
              ,h01_yn
              ,h02_yn
              ,h03_yn
              ,h04_yn
              ,h05_yn
              ,h06_yn
              ,h07_yn
              ,h08_yn
              ,h09_yn
              ,h10_yn
              ,h11_yn
              ,h12_yn
              ,h13_yn
              ,h14_yn
              ,h15_yn
              ,h16_yn
              ,h17_yn
              ,h18_yn
              ,h19_yn
              ,h20_yn
              ,h21_yn
              ,h22_yn
              ,h23_yn
              ,create_user_id
              ,create_dt)
          VALUES (
              #{ewtrPreventFacNo}
              ,#{measureYmd}
              ,#{preventRunFacNo}
              ,#{ewtrCleanFacNo}
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,#{createUserId}
              ,getdate()
          )
       <!--  SELECT ewtr_prevent_fac_no
              ,#{measureYmd}
              ,#{preventRunFacNo}
              ,ewtr_clean_fac_no
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,'Y'
              ,#{createUserId}
              ,getdate()
          FROM ewtr_prevent_fac
         WHERE use_yn = 'Y'
           AND plant_cd = #{plantCd}
           AND ewtr_clean_fac_no = #{ewtrCleanFacNo} -->
    </insert>

      <select id="getPreventTms" resultType="com.she.env.water.model.OpLogResult">
        SELECT ewtr_prevent_fac_no
            ,ewtr_clean_fac_no
        FROM ewtr_prevent_fac
         WHERE use_yn = 'Y'
           AND plant_cd = #{plantCd}
           AND ewtr_clean_fac_no = #{ewtrCleanFacNo}
    </select>

      <!-- 수질운영일지 약품 사용량 초기데이터-->
    <insert id="createChems" parameterType= "com.she.env.water.model.OpLogResult">
        INSERT INTO ewtr_chem_chk_result
              (ewtr_chem_no
              ,ewtr_clean_fac_no
              ,measure_ymd
              ,create_user_id
              ,create_dt)
        SELECT ewtr_chem_no
              ,ewtr_clean_fac_no
              ,#{measureYmd} as measureYmd
              ,#{createUserId} as createUserId
              ,getdate()
          FROM ewtr_clean_fac_chem
         WHERE ewtr_clean_fac_no = #{ewtrCleanFacNo}
    </insert>

     <!-- 수질운영일지 자가측정 초기데이터-->
    <insert id="createTestItems" parameterType= "com.she.env.water.model.OpLogResult">
        INSERT INTO ewtr_test_item_result
              (ewtr_mon_pos_no
              ,ewtr_test_item_cd
              ,measure_ymd
              ,ewtr_clean_fac_no
              ,create_user_id
              ,create_dt)
        SELECT clean.ewtr_mon_pos_no
              ,item.ewtr_test_item_cd
              ,#{measureYmd} as measureYmd
              ,#{ewtrCleanFacNo} as ewtr_clean_fac_no
              ,#{createUserId} as createUserId
              ,getdate()
          FROM ewtr_clean_fac_pos clean
          inner join ewtr_mon_pos mst
          on mst.ewtr_mon_pos_no = clean.ewtr_mon_pos_no
          inner join ewtr_mon_pos_test_item item
          on item.ewtr_mon_pos_no = mst.ewtr_mon_pos_no
          where clean.ewtr_clean_fac_no = #{ewtrCleanFacNo}
    </insert>

    <select id="getSequenceNumber" resultType="int">
        select (next value for seq_ewtr_clean_fac) as ewtrCleanFacNo
    </select>

    <update id="updateSludge" parameterType="com.she.env.water.model.OpLogResult">
        update ewtr_op_log_result
        SET  amt_sludge_gen = #{amtSludgeGen}
            ,amt_sludge_tx = #{amtSludgeTx}
            ,amt_sludge_sto = #{amtSludgeSto}
            ,sludge_mc = #{sludgeMc}
            ,sludge_sto_po = #{sludgeStoPo}
            ,sludge_tx_po = #{sludgeTxPo}
        where measure_ymd = #{measureYmd}
            and ewtr_clean_fac_no=#{ewtrCleanFacNo}
    </update>


    <update id = "updateAppr" >
        update ewtr_op_log_result
        SET  appr_rqst_no = #{apprRqstNo}
        <if test="envOpLogStCd != null and !envOpLogStCd.equals('')">
        ,env_op_log_st_cd    = #{envOpLogStCd}
        </if>
        where measure_ymd = #{measureYmd}
        and ewtr_clean_fac_no = #{ewtrCleanFacNo}
        and dept_cd = #{deptCd}
    </update>

    <insert id="createOperationLog" parameterType="com.she.env.water.model.OpLogResult">
        <selectKey keyProperty= "ewtrGuidedHistNo" resultType= "int" order= "BEFORE">
            select next value for seq_ewtr_guided_hist
        </selectKey>
        insert into ewtr_op_log_result (
            measure_ymd
            ,ewtr_clean_fac_no
            , env_op_log_st_cd
            , weather
            , plant_cd
            , day
            , temp
            , shift_worker1
            , shift_worker2
            , shift_worker3
            , shift_worker4
            , shift_worker5
            , shift_worker6
            , shift_wktm1
            , shift_wktm2
            , shift_wktm3
            , shift_wktm4
            , shift_wktm5
            , shift_wktm6
            , sludge_tx_po
            , amt_sludge_gen
            , amt_sludge_sto
            , pwrc_per_day
            , sludge_mc
            , sludge_sto_po
            , regulator
            , regulator_worker
            , violation
            , action
            , create_user_id
            , create_dt
        )
        values (
            #{measureYmd}
            , #{ewtrCleanFacNo}
            , #{envOpLogStCd}
            , #{weather}
            , #{plantCd}
            , #{day}
            , #{temp}
            , #{shiftWorker1}
            , #{shiftWorker2}
            , #{shiftWorker3}
            , #{shiftWorker4}
            , #{shiftWorker5}
            , #{shiftWorker6}
            , #{shiftWktm1}
            , #{shiftWktm2}
            , #{shiftWktm3}
            , #{shiftWktm4}
            , #{shiftWktm5}
            , #{shiftWktm6}
            , #{sludgeTxPo}
            , #{amtSludgeGen}
            , #{amtSludgeSto}
            , #{pwrcPerDay}
            , #{sludgeMc}
            , #{sludgeStoPo}
            , #{regulator}
            , #{regulatorWorker}
            , #{violation}
            , #{action}
            , #{createUserId}
            , getdate()
        )

        <!-- 수질일지 배출시설가동시간 -->
        insert into ewtr_waste_disch_fac_run_tm (ewtr_disch_grp_cd, ewtr_clean_fac_no, measure_ymd, create_user_id, create_dt)
        select distinct ewtr_disch_grp_cd, ewtr_clean_fac_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_waste_disch_fac
        where use_yn = 'Y'
        and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        <!-- 수질일지 방지시설가동시간 -->
        insert into ewtr_prevent_fac_run_tm (ewtr_clean_fac_no, ewtr_prevent_fac_no, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo}, ewtr_prevent_fac_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_prevent_fac
        where use_yn = 'Y' and ewtr_clean_fac_no = #{ewtrCleanFacNo}

        <!-- 수질일지 용수사용량 -->
        insert into ewtr_supl_chk_result (ewtr_clean_fac_no, ewtr_supl_no, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo}, a.ewtr_supl_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_supl a inner join ewtr_clean_fac_supl b  on a.ewtr_supl_no= b.ewtr_supl_no
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo}

        <!-- 수질일지 폐수배출량 -->
        insert into ewtr_disch_chk_result (ewtr_clean_fac_no,ewtr_disch_no, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo}, a.ewtr_disch_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_disch a inner join ewtr_clean_fac_disch b  on a.ewtr_disch_no= b.ewtr_disch_no
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo}

        <!-- 수질일지 원료사용량 -->
        insert into ewtr_ingr_chk_result (ewtr_clean_fac_no, ewtr_ingr_no, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo}, a.ewtr_ingr_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_ingr a inner join ewtr_clean_fac_ingr b  on a.ewtr_ingr_no= b.ewtr_ingr_no
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo}

        <!-- 수질일지 전력사용량 -->
        insert into ewtr_pwrc_chk_result (ewtr_clean_fac_no, ewtr_pwr_meter_no, pwr_meter_magn, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo},ewtr_pwr_meter_no, pwr_meter_magn, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_pwr_meter
        where use_yn = 'Y' and ewtr_clean_fac_no=#{ewtrCleanFacNo}

        <!-- select #{ewtrCleanFacNo},ewtr_chem_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_chem a inner join ewtr_clean_fac_chem b  on a.ewtr_chem_no= b.ewtr_chem_no
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo}-->

        insert into ewtr_guided_hist( ewtr_guided_hist_no,measure_ymd ,ewtr_clean_fac_no,create_user_id,create_dt )
        VALUES
        ( #{ewtrGuidedHistNo} ,#{measureYmd} ,#{ewtrCleanFacNo} ,#{createUserId} ,getDate())

        <!-- 수질일지 약품사용량 수정1031-->
        insert into ewtr_chem_chk_result (ewtr_clean_fac_no, ewtr_disch_grp_cd, ewtr_chem_no, measure_ymd, create_user_id, create_dt)

        select   #{ewtrCleanFacNo}, d.ewtr_disch_grp_cd,  a.ewtr_chem_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_chem a inner join ewtr_clean_fac_chem b  on a.ewtr_chem_no= b.ewtr_chem_no
                        inner join ewtr_clean_fac c on b.ewtr_clean_fac_no = c.ewtr_clean_fac_no
                        inner join (select distinct efc.ewtr_disch_grp_cd
                                    from ewtr_waste_disch_fac efc
                                    where efc.use_yn = 'Y' and efc.ewtr_clean_fac_no=#{ewtrCleanFacNo} ) d on 1=1
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo} and c.wtr_chem_reg_cd='WTCR1'
        union
        select #{ewtrCleanFacNo}, '0' as ewtr_disch_grp_cd, a.ewtr_chem_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_chem a inner join ewtr_clean_fac_chem b  on a.ewtr_chem_no= b.ewtr_chem_no
                        inner join ewtr_clean_fac c on b.ewtr_clean_fac_no = c.ewtr_clean_fac_no
        where a.use_yn = 'Y' and b.ewtr_clean_fac_no=#{ewtrCleanFacNo} and c.wtr_chem_reg_cd='WTCR0'


        <!-- 수질일지 폭기조 -->
        <!--
        insert into ewtr_aeration_tank_chk_result (ewtr_clean_fac_no, ewtr_aeration_tank_no, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo},ewtr_aeration_tank_no, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_aeration_tank
        where use_yn = 'Y'
        -->

        <!-- 수질일지 자가측정 -->
        insert into ewtr_test_item_result (ewtr_clean_fac_no, ewtr_mon_pos_no, ewtr_test_item_cd, measure_ymd, create_user_id, create_dt)
        select #{ewtrCleanFacNo}, mt.ewtr_mon_pos_no, mt.ewtr_test_item_cd, #{measureYmd}, #{createUserId}, getdate()
        from ewtr_mon_pos_test_item mt inner join ewtr_mon_pos m on mt.ewtr_mon_pos_no = m.ewtr_mon_pos_no
            inner join ewtr_test_item t on mt.ewtr_test_item_cd = t.ewtr_test_item_cd
            inner join ewtr_clean_fac_pos p on p.ewtr_mon_pos_no=m.ewtr_mon_pos_no and p.ewtr_clean_fac_no=#{ewtrCleanFacNo}
        where m.use_yn = 'Y'
        and t.use_yn = 'Y'
    </insert>

    <!-- 용수사용량 결과 조회 -->
    <select id="getSuplChkResults" resultType="com.she.env.water.model.SuplChkResult">
        select
             b.ewtr_supl_no
            ,b.ewtr_supl_nm
            ,b.ewtr_supl_class_cd
            ,d.code_nm as ewtr_supl_class_nm
            ,isnull(c.measure_ymd,#{measureYmd}) as measure_ymd
            ,isnull(c.dept_cd,#{deptCd}) as dept_cd
            ,replace(convert(varchar, cast((select max(pr2.meter_cnt_t) from  ewtr_supl_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
                  and pr2.ewtr_supl_no = b.ewtr_supl_no
                  and pr2.ewtr_clean_fac_no = a.ewtr_clean_fac_no) as money),1),'.00','')  as meter_cnt_y_t

            ,replace(convert(varchar, cast(c.meter_cnt_t as money),1),'.00','')   as meter_cnt_t_t
            ,replace(convert(varchar, cast(c.consum_amt as money),1),'.00','')   as consum_amt_t

            ,    (select max(pr2.meter_cnt_t) from  ewtr_supl_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
                  and pr2.ewtr_supl_no = b.ewtr_supl_no
                  and pr2.ewtr_clean_fac_no = a.ewtr_clean_fac_no)  as meter_cnt_y

            ,c.meter_cnt_t
            ,c.consum_amt
            ,c.chk_time
            ,c.create_user_id
            ,c.create_dt
            ,c.update_user_id
            ,c.update_dt
            ,dbo.GET_USER_NM(c.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(c.update_user_id) as update_user_nm
        from
        ewtr_clean_fac_supl a
        inner join ewtr_supl b
        on a.ewtr_supl_no = b.ewtr_supl_no and b.use_yn = 'Y'
        left join ewtr_supl_chk_result c
        on  c.measure_ymd = #{measureYmd}
        and a.ewtr_supl_no = c.ewtr_supl_no and a.ewtr_clean_fac_no = c.ewtr_clean_fac_no
        and c.dept_cd = #{deptCd      }
        left outer join dbo.LANG_CODE_MASTER('kr', 'EWTR_SUPL_CLASS') d on b.ewtr_supl_class_cd = d.code
        where  a.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        order by b.sort_order

    </select>

    <update id="updateSuplChkResult" parameterType="com.she.env.water.model.SuplChkResult">
        merge into ewtr_supl_chk_result as t
        using (select #{measureYmd} measure_ymd, #{ewtrCleanFacNo} ewtr_clean_fac_no, #{ewtrSuplNo} ewtr_supl_no
                    ,#{meterCntY} meter_cnt_y, #{meterCntT} meter_cnt_t, #{consumAmt} consum_amt, #{chkTime} chk_time, #{deptCd} dept_cd
              ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no and t.ewtr_supl_no = s.ewtr_supl_no and t.dept_cd = s.dept_cd)
        when not matched then
        insert  (
                      measure_ymd
                    , ewtr_supl_no
                    , ewtr_clean_fac_no
                    , meter_cnt_y
                    , meter_cnt_t
                    , consum_amt
                    , chk_time
                    , dept_cd
                    , create_user_id
                    , create_dt
                )
                values (
                      s.measure_ymd
                    , s.ewtr_supl_no
                    , s.ewtr_clean_fac_no
                    , s.meter_cnt_y
                    , s.meter_cnt_t
                    , s.consum_amt
                    , s.chk_time
                    , s.dept_cd
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set   meter_cnt_y = s.meter_cnt_y
                    , meter_cnt_t = s.meter_cnt_t
                    , consum_amt = s.consum_amt
                    , chk_time = s.chk_time
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;
    </update>

    <!-- 폐수배출량 결과 조회 -->
    <select id="getDischChkResults" resultType="com.she.env.water.model.DischChkResult">
        select
            b.ewtr_disch_no
            ,class.code_nm as ewtr_disch_class_nm
            ,b.ewtr_disch_nm
            ,class.code_nm as ewtr_class_nm
            ,isnull(c.measure_ymd ,#{measureYmd}) as measure_ymd
            ,isnull(c.dept_cd,#{deptCd}) as dept_cd
            ,replace(convert(varchar, cast((select max(pr2.meter_cnt_t) from  ewtr_disch_chk_result pr2
                              where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
                              and pr2.ewtr_disch_no = b.ewtr_disch_no
                              and pr2.ewtr_clean_fac_no = a.ewtr_clean_fac_no) as money),1),'.00','') as meter_cnt_y_t

            ,replace(convert(varchar, cast(c.meter_cnt_t as money),1),'.00','') as meter_cnt_t_t
            ,replace(convert(varchar, cast(c.consum_amt as money),1),'.00','') as consum_amt_t
            ,(select max(pr2.meter_cnt_t) from  ewtr_disch_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
                  and pr2.ewtr_disch_no = b.ewtr_disch_no
                  and pr2.ewtr_clean_fac_no = a.ewtr_clean_fac_no)  as meter_cnt_y
            ,c.meter_cnt_t
            ,c.consum_amt
            ,c.create_user_id
            ,c.create_dt
            ,c.update_user_id
            ,c.update_dt
            ,dbo.GET_USER_NM(c.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(c.update_user_id) as update_user_nm
        from ewtr_clean_fac_disch a
            inner join ewtr_disch b on a.ewtr_disch_no = b.ewtr_disch_no
            inner join dbo.LANG_CODE_MASTER('kr', 'EWTR_DISCH_CLASS') class
            on b.ewtr_disch_class_cd = class.code
            left join ewtr_disch_chk_result c
            on b.ewtr_disch_no = c.ewtr_disch_no
            and a.ewtr_clean_fac_no = c.ewtr_clean_fac_no
            and c.measure_ymd = CONVERT(varchar(10),DATEADD(Day,0,CONVERT (DATE, #{measureYmd} )),23)
            and c.dept_cd = #{deptCd}
        where a.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        order by b.sort_order

    </select>

    <update id="updateDischChkResult" parameterType="com.she.env.water.model.DischChkResult">
        merge into ewtr_disch_chk_result as t
        using (select #{measureYmd} measure_ymd, #{ewtrCleanFacNo} ewtr_clean_fac_no, #{ewtrDischNo} ewtr_disch_no
                    ,#{meterCntY} meter_cnt_y, #{meterCntT} meter_cnt_t, #{consumAmt} consum_amt,#{deptCd} as dept_cd
              ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no and t.ewtr_disch_no = s.ewtr_disch_no and t.dept_cd = s.dept_cd)
        when not matched then
        insert  (
                      measure_ymd
                    , ewtr_disch_no
                    , ewtr_clean_fac_no
                    , meter_cnt_y
                    , meter_cnt_t
                    , consum_amt
                    , dept_cd
                    , create_user_id
                    , create_dt
                )
                values (
                      s.measure_ymd
                    , s.ewtr_disch_no
                    , s.ewtr_clean_fac_no
                    , s.meter_cnt_y
                    , s.meter_cnt_t
                    , s.consum_amt
                    , s.dept_cd
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set   meter_cnt_y = s.meter_cnt_y
                    , meter_cnt_t = s.meter_cnt_t
                    , consum_amt = s.consum_amt
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;
    </update>


    <!--방지시설 고장유무 및 특기사항 -->
    <select id="getPreventBreakHists" resultType="com.she.env.water.model.PreventFacBreakHist">
        select
             f.ewtr_prevent_fac_nm -- 고장시설명
            ,p.measure_ymd+' '+convert(varchar, p.from_down_time)+'시 ~ '+p.complete_ymd+' '+convert(varchar, p.to_down_time)+'시' as down_time -- 고장시간
            ,p.down_cond-- 고장 상태
            ,p.action -- 조치 상태
            ,p.remark -- 특기사항
        from ewtr_prevent_fac_break_hist p
        left outer join ewtr_prevent_fac f on p.ewtr_prevent_fac_no = f.ewtr_prevent_fac_no
        left outer join ewtr_clean_fac clean on p.ewtr_clean_fac_no = clean.ewtr_clean_fac_no
        left outer join com_user cu on p.create_user_id = cu.user_id
        left outer join com_user uu on p.update_user_id = uu.user_id
        where 1=1
        and convert(datetime, #{measureYmd}) between convert(datetime, measure_ymd) and convert(datetime, complete_ymd)
        and f.ewtr_clean_fac_no= #{ewtrCleanFacNo}
        and f.plant_cd = #{plantCd}
        order by p.measure_ymd desc
    </select>


    <!--약품사용량 결과조회 -->
    <select id="getChemChkResults" resultType="com.she.env.water.model.ChemChkResult">
        select
             c.ewtr_chem_no
            ,cr.ewtr_disch_grp_cd
            , isnull(cmr.code_nm,'클린센터') as ewtr_disch_grp_nm
            ,c.ewtr_chem_nm
            ,isnull(cr.measure_ymd,#{measureYmd}) as measure_ymd
            ,isnull(cr.dept_cd,#{deptCd}) as dept_cd
            ,(select max(pr2.amount_curr) from  ewtr_chem_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd} )),23)
                  and pr2.ewtr_chem_no = cr.ewtr_chem_no
                  and pr2.ewtr_clean_fac_no = cr.ewtr_clean_fac_no
                  and pr2.dept_cd = cr.dept_cd
             ) as prev_amount_curr
            ,replace(convert(varchar, cast((select max(pr2.amount_curr) from  ewtr_chem_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd} )),23)
                  and pr2.ewtr_chem_no = cr.ewtr_chem_no
                  and pr2.ewtr_clean_fac_no = cr.ewtr_clean_fac_no
                  and pr2.dept_cd = cr.dept_cd
             ) as money),1),'.00','') as prev_amount_curr_t
            ,in_amt  as inAmt
            ,replace(convert(varchar, cast(in_amt as money),1),'.00','') as in_amt_t
            ,cr.consum_amt
            ,replace(convert(varchar, cast(cr.consum_amt as money),1),'.00','') as consum_amt_t
            ,cr.amount_curr
            ,replace(convert(varchar, cast(cr.amount_curr  as money),1),'.00','') as amount_curr_t
            ,cr.create_user_id
            ,cr.create_dt
            ,cr.update_user_id
            ,cr.update_dt
            ,cu.user_nm as create_user_nm
            ,uu.user_nm as update_user_nm
            ,cr.remarks
        from ewtr_chem c
        inner join ewtr_clean_fac_chem fc
        on c.ewtr_chem_no = fc.ewtr_chem_no
        left join ewtr_chem_chk_result cr
        on c.ewtr_chem_no = cr.ewtr_chem_no
        and cr.measure_ymd = #{measureYmd}
        and cr.dept_cd = #{deptCd}
        left outer join dbo.LANG_CODE_MASTER('kr', 'EWTR_DISCH_GRP') cmr on cr.ewtr_disch_grp_cd=cmr.code
        left outer join com_user cu on cr.create_user_id = cu.user_id
        left outer join com_user uu on cr.update_user_id = uu.user_id
        where 1=1
        and c.use_yn = 'Y'
        and fc.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        order by cr.ewtr_disch_grp_cd, c.sort_order,c.ewtr_chem_nm
    </select>


    <update id="updateChemChkResult" parameterType="com.she.env.water.model.ChemChkResult">
        merge into ewtr_chem_chk_result as t
            using(
                select #{ewtrChemNo} ewtr_chem_no, #{measureYmd} measure_ymd, #{ewtrCleanFacNo} ewtr_clean_fac_no
                ,#{deptCd} dept_cd, #{ewtrDischGrpCd} ewtr_disch_grp_cd,#{prevAmountCurr} prev_amount_curr
                ,#{inAmt} in_amt, #{consumAmt} as consum_amt, #{amountCurr} amount_curr
                ,#{remarks} remarks, #{createUserId} create_user_id, #{updateUserId} update_user_id
            ) as s
            on (t.ewtr_chem_no = s.ewtr_chem_no and t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no = s.ewtr_clean_fac_no
                and  t.dept_cd = s.dept_cd )
         when not matched then
         insert (
            ewtr_chem_no
            ,measure_ymd
            ,ewtr_clean_fac_no
            ,dept_cd
            ,ewtr_disch_grp_cd
            ,prev_amount_curr
            ,in_amt
            ,consum_amt
            ,amount_curr
            ,remarks
            ,create_user_id
            ,create_dt
         )
         values(
             s.ewtr_chem_no
            ,s.measure_ymd
            ,s.ewtr_clean_fac_no
            ,s.dept_cd
            ,s.ewtr_disch_grp_cd
            ,s.prev_amount_curr
            ,s.in_amt
            ,s.consum_amt
            ,s.amount_curr
            ,s.remarks
            ,s.create_user_id
            ,getdate()
         )
         when matched then
         update  set  prev_amount_curr = s.prev_amount_curr
                    , in_amt = s.in_amt
                    , consum_amt = s.consum_amt
                    , amount_curr = s.amount_curr
                    , update_user_id = s.update_user_id
                    , update_dt = getdate()
        ;
    </update>

    <!--전력사용량 결과조회 -->
    <select id="getPwrcChkResults" resultType="com.she.env.water.model.PwrcChkResult">
        SET ANSI_WARNINGS OFF
        SET ARITHIGNORE ON
        SET ARITHABORT OFF
        select
            p.ewtr_pwr_meter_no
            ,p.ewtr_pwr_meter_nm
            ,isnull(pr.measure_ymd,#{measureYmd}) as measure_ymd
            ,isnull(pr.dept_cd,#{deptCd}) as dept_cd
            ,case when pr.pwr_meter_magn is null then p.pwr_meter_magn
                else pr.pwr_meter_magn
            end as pwrMeterMagn
            ,pr.run_tm

              , case pr.pwr_consum_amt when 0 then null when null then null
                  else
                                              case
                                                      case p.ewtr_pwr_meter_no when 305 then
                                                                      (select sum(isnull(a.zrcydw,0))
                                                                     from ewtr_op_log_result a
                                                                     where a.ewtr_clean_fac_no=#{ewtrCleanFacNo} and measure_ymd=#{measureYmd} and a.dept_cd =#{deptCd}
                                                                     )
                                                         else
                                                         (select sum(isnull(a.consum_amt,0))
                                                              from ewtr_disch_chk_result a inner join ewtr_clean_fac_disch b
                                                               on a.ewtr_disch_no = b.ewtr_disch_no and a.ewtr_clean_fac_no=b.ewtr_clean_fac_no
                                                             where a.ewtr_clean_fac_no=#{ewtrCleanFacNo} and measure_ymd=#{measureYmd} and a.dept_cd =#{deptCd}
                                                              and b.pwr_meter_code=p.pwr_meter_code
                                                              )
                                                        end
                                              when 0 then null
                                              else
                                              convert(numeric(10,2),
                       case p.ewtr_pwr_meter_no when 300 then
                               (select sum(ew.pwr_consum_amt) from ewtr_pwrc_chk_result ew
                               where ew.measure_ymd = #{measureYmd} and ew.ewtr_clean_fac_no = #{ewtrCleanFacNo}
                               and  ew.ewtr_pwr_meter_no in (300,301)
                               and ew.dept_cd =#{deptCd}
                               )
                       else pr.pwr_consum_amt end
                       /
                                                 case p.ewtr_pwr_meter_no when 305 then
                                                               (select sum(isnull(a.zrcydw,0))
                                                              from ewtr_op_log_result a
                                                              where a.ewtr_clean_fac_no=#{ewtrCleanFacNo} and measure_ymd=#{measureYmd} and dept_cd =#{deptCd}
                                                              )
                                                 else
                        (select sum(isnull(a.consum_amt,0))
                         from ewtr_disch_chk_result a inner join ewtr_clean_fac_disch b
                          on a.ewtr_disch_no = b.ewtr_disch_no and a.ewtr_clean_fac_no=b.ewtr_clean_fac_no
                         where a.ewtr_clean_fac_no=#{ewtrCleanFacNo} and measure_ymd=#{measureYmd}
                         and b.pwr_meter_code=p.pwr_meter_code
                         and a.dept_cd =#{deptCd}
                                                      )
                                                end
                     )
                                              end
                                         end
                   as pwrc_per_day

            ,pr.pwr_consum_amt
            ,replace(convert(varchar, cast(pr.pwr_consum_amt as money),1),'.00','') as pwr_consum_amt_t
            ,pr.chk_time
            ,pr.pwr_meter_cnt_t
            ,substring(convert(varchar, convert (money, pr.pwr_meter_cnt_t ),1),1, len(convert(varchar, convert(money, pr.pwr_meter_cnt_t), 1))-1) as pwr_meter_cnt_t_t
            ,    (select max(pr2.pwr_meter_cnt_t) from  ewtr_pwrc_chk_result pr2
                  where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
                  and pr2.ewtr_pwr_meter_no = pr.ewtr_pwr_meter_no)
            as pwr_meter_cnt_y

           , substring(convert(varchar, convert (money,
            (select max(pr2.pwr_meter_cnt_t) from  ewtr_pwrc_chk_result pr2
            where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
            and pr2.ewtr_pwr_meter_no = pr.ewtr_pwr_meter_no)
            ),1),1, len(convert(varchar, convert(money,
             (select max(pr2.pwr_meter_cnt_t) from  ewtr_pwrc_chk_result pr2
            where pr2.measure_ymd = CONVERT(varchar(10),DATEADD(Day,-1,CONVERT (DATE, #{measureYmd})),23)
            and pr2.ewtr_pwr_meter_no = pr.ewtr_pwr_meter_no)
            ), 1))-1) as pwr_meter_cnt_y_t

            ,pr.remark
            ,pr.create_user_id
            ,pr.create_dt
            ,pr.update_user_id
            ,pr.update_dt
            ,dbo.GET_USER_NM(pr.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(pr.update_user_id) as update_user_nm
        from ewtr_pwr_meter p
        left join ewtr_pwrc_chk_result pr
        on pr.measure_ymd =#{measureYmd}
        and p.ewtr_pwr_meter_no = pr.ewtr_pwr_meter_no
        and pr.dept_cd = #{deptCd}
        where 1=1
        and p.ewtr_clean_fac_no =  #{ewtrCleanFacNo}
            --and p.use_yn = 'Y'
        order by p.sort_order
    </select>

    <update id="updatePwrcChkResult" parameterType="com.she.env.water.model.PwrcChkResult">
        merge into ewtr_pwrc_chk_result as t
        using (select #{measureYmd} measure_ymd, #{ewtrCleanFacNo} ewtr_clean_fac_no, #{ewtrPwrMeterNo} ewtr_pwr_meter_no
                    ,#{runTm} run_tm, #{pwrConsumAmt} pwr_consum_amt, #{chkTime} chk_time
                    ,#{pwrMeterCntT} pwr_meter_cnt_t, #{pwrMeterCntY} pwr_meter_cnt_y, #{pwrMeterMagn} pwr_meter_magn
                    ,#{pwrcPerDay} pwrc_per_day, #{remark} remark, #{deptCd} dept_cd
              ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no
            and t.ewtr_pwr_meter_no = s.ewtr_pwr_meter_no and t.dept_cd = s.dept_cd
            )
        when not matched then
        insert  (
                      measure_ymd
                    , ewtr_clean_fac_no
                    , ewtr_pwr_meter_no
                    , run_tm
                    , pwr_consum_amt
                    , chk_time
                    , pwr_meter_cnt_t
                    , pwr_meter_cnt_y
                    , pwr_meter_magn
                    , pwrc_per_day
                    , remark
                    , dept_cd
                    , create_user_id
                    , create_dt
                )
                values (
                      s.measure_ymd
                    , s.ewtr_clean_fac_no
                    , s.ewtr_pwr_meter_no
                    , s.run_tm
                    , s.pwr_consum_amt
                    , s.chk_time
                    , s.pwr_meter_cnt_t
                    , s.pwr_meter_cnt_y
                    , s.pwr_meter_magn
                    , s.pwrc_per_day
                    , s.remark
                    , s.dept_cd
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set   run_tm = #{runTm}
                    ,pwr_consum_amt = s.pwr_consum_amt
                    ,chk_time = s.chk_time
                    ,pwr_meter_cnt_t = s.pwr_meter_cnt_t
                    ,pwr_meter_cnt_y = s.pwr_meter_cnt_y
                    ,pwr_meter_magn = s.pwr_meter_magn
                    ,pwrc_per_day = s.pwrc_per_day
                    ,remark = s.remark
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;
    </update>

    <!-- 금일폐수 1m³당 소모전력량계산에서 폐수는 하드코딩으로 가져옴. 각자 프젝에 맞춰서 계산 필요. -->
    <!-- 풍산에서는 사용안하므로 주석처리 : 별도 로직으로 구현예정. -->
    <update id="updatePwrcPerDay" parameterType="com.she.env.water.model.PwrcChkResult">
        update ewtr_pwrc_chk_result
        set pwrc_per_day = (pwr_consum_amt/(select meter_cnt_t from ewtr_disch_chk_result where ewtr_disch_no=7 and measure_ymd = #{measureYmd} and ewtr_clean_fac_no =  #{ewtrCleanFacNo}))
        where measure_ymd = #{measureYmd}
        <if test="ewtrPwrMeterNo != null and ewtrPwrMeterNo != 0">
        and ewtr_pwr_meter_no = #{ewtrPwrMeterNo}
        </if>
    </update>

    <!--원료사용량  조회-->
    <select id="getIngrChkResults" resultType="com.she.env.water.model.IngrChkResult">
          select
            i.ewtr_ingr_no
            ,i.ewtr_ingr_nm
            ,isnull(ir.measure_ymd,#{measureYmd}) as measure_ymd
            ,isnull(ir.dept_cd, #{deptCd}) as dept_cd
            ,ir.consum_amt
            ,ir.create_user_id
            ,ir.create_dt
            ,ir.update_user_id
            ,ir.update_dt
            ,dbo.GET_USER_NM(ir.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(ir.update_user_id) as update_user_nm
        from ewtr_ingr i
        inner join ewtr_clean_fac_ingr fi
        on i.ewtr_ingr_no = fi.ewtr_ingr_no
        left join ewtr_ingr_chk_result ir
        on i.ewtr_ingr_no = ir.ewtr_ingr_no
        and ir.measure_ymd = #{measureYmd}
        and ir.dept_cd = #{deptCd}
        where 1=1
        and i.use_yn = 'Y'
        and fi.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        order by i.sort_order
    </select>

    <update id="updateIngrChkResult" parameterType="com.she.env.water.model.IngrChkResult">
        merge into ewtr_ingr_chk_result as t
        using (select #{measureYmd} measure_ymd, #{ewtrIngrNo} ewtr_ingr_no, #{ewtrCleanFacNo} ewtr_clean_fac_no
                     ,#{consumAmt} consum_amt, #{deptCd} dept_cd
              ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no and t.ewtr_ingr_no = s.ewtr_ingr_no and t.dept_cd = s.dept_cd)
        when not matched then
        insert  (
                      measure_ymd
                    , ewtr_ingr_no
                    , ewtr_clean_fac_no
                    , consum_amt
                    , dept_cd
                    , create_user_id
                    , create_dt
                )
                values (
                      s.measure_ymd
                    , s.ewtr_ingr_no
                    , s.ewtr_clean_fac_no
                    , s.consum_amt
                    , s.dept_cd
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set  consum_amt = s.consum_amt
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate();
    </update>

    <select id="getTestItemResultsNewItems" resultType="com.she.env.water.model.TestItemResult">
        select distinct c.ewtr_test_item_cd, c.ewtr_test_item_nm, c.sort_order, c.input_type_cd
        from ewtr_clean_fac_pos a
        inner join ewtr_mon_pos b
        on a.ewtr_mon_pos_no=b.ewtr_mon_pos_no and b.use_yn='Y'
        inner join ewtr_mon_pos_test_item ti
        on b.ewtr_mon_pos_no = ti.ewtr_mon_pos_no
        inner join ewtr_test_item c
        on c.ewtr_test_item_cd = ti.ewtr_test_item_cd
        and c.plant_cd= #{plantCd} and c.use_yn='Y'
        where a.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        <!-- and c.input_type_cd != 'TXT01' -->
        order by c.sort_order


    </select>

    <select id="getTestItemResultStatusNewItems" resultType="com.she.env.water.model.TestItemResult">
        select distinct c.ewtr_test_item_cd, c.ewtr_test_item_nm, c.sort_order, c.input_type_cd
        from ewtr_clean_fac_pos a inner join ewtr_mon_pos b on a.ewtr_mon_pos_no=b.ewtr_mon_pos_no and b.use_yn='Y'
        inner join ewtr_test_item c on c.plant_cd=#{plantCd} and c.use_yn='Y'
        where 1=1 and input_type_cd != 'TXT01'
        order by c.ewtr_test_item_cd, c.ewtr_test_item_nm
    </select>

    <!-- 수질자가측정  조회-->
    <select id="getTestItemResults" resultType="java.util.HashMap">
        /* OperationMapper.getTestItemResults [Operation.xml] */
        <!-- 보안취약점 점검에서 예외처리가 안 될 경우 SP로 사용 -->
        <!--EXEC SP_GET_TEST_ITEM_RESULTS #{measureYmd}, #{ewtrCleanFacNo}, #{deptCd}, #{testItemResultStr}-->
        select
            fp.ewtr_mon_pos_no as ewtrMonPosNo, mp.ewtr_mon_pos_nm as ewtrMonPosNm
            ,isnull(r.measure_ymd,#{measureYmd}) as measureYmd
            ,isnull(r.dept_cd, #{deptCd}) as deptCd
             <foreach collection="testItemResult" item="arr">

                <if test = "arr.inputTypeCd == 'NUM01'.toString()">
                , isnull(max( case when c.ewtr_test_item_cd = #{arr.ewtrTestItemCd} and r.ewtr_mon_pos_no = fp.ewtr_mon_pos_no then  isnull(r.num_result, r.char_result) else '0.00' end),'0.00') as '${arr.inputTypeCd}${arr.ewtrTestItemCd}'
                </if>

                <if test = "arr.inputTypeCd == 'TXT01'.toString()">
                <!--  , max( case when c.ewtr_test_item_cd = #{arr.ewtrTestItemCd} and r.ewtr_mon_pos_no = fp.ewtr_mon_pos_no then  case r.num_result when 0.00 then r.char_result end else '' end) as '${arr.inputTypeCd}${arr.ewtrTestItemCd}' -->
                , isnull(max( case when c.ewtr_test_item_cd = #{arr.ewtrTestItemCd} and r.ewtr_mon_pos_no = fp.ewtr_mon_pos_no then  isnull(r.num_result, r.char_result) else '0.00' end),'0.00') as '${arr.inputTypeCd}${arr.ewtrTestItemCd}'
                </if>
                , stuff((
					select ',' + eti.input_type_cd + empti.ewtr_test_item_cd
					from ewtr_mon_pos emp
					inner join ewtr_mon_pos_test_item empti on empti.ewtr_mon_pos_no = emp.ewtr_mon_pos_no
					inner join ewtr_test_item eti on eti.ewtr_test_item_cd = empti.ewtr_test_item_cd
					where emp.ewtr_mon_pos_no = fp.ewtr_mon_pos_no
					<!--  and eti.input_type_cd != 'TXT01' -->
					and eti.use_yn='Y'
					order by eti.sort_order
				for xml path(''))
				, 1, 1, '') as ewtrst
            </foreach>
        from ewtr_clean_fac_pos fp
        inner join ewtr_mon_pos mp
        on mp.ewtr_mon_pos_no = fp.ewtr_mon_pos_no
        inner join ewtr_mon_pos_test_item ti
        on mp.ewtr_mon_pos_no = ti.ewtr_mon_pos_no
        inner join ewtr_test_item c
        on ti.ewtr_test_item_cd = c.ewtr_test_item_cd
        left join ewtr_test_item_result r
        on fp.ewtr_clean_fac_no = r.ewtr_clean_fac_no
        <!-- and r.ewtr_test_item_cd = ti.ewtr_test_item_cd -->
        and r.measure_ymd = #{measureYmd}
        and r.dept_cd = #{deptCd}
        where fp.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        group by fp.ewtr_mon_pos_no, mp.ewtr_mon_pos_nm ,r.measure_ymd, r.dept_cd
        order by fp.ewtr_mon_pos_no, mp.ewtr_mon_pos_nm
    </select>

    <!-- 수질자가측정  신규 등록 조회 1104-->
    <select id="getTestItemResultsNew" resultType="java.util.HashMap">
        <!-- 보안취약점 점검에서 예외처리가 안 될 경우 SP로 사용 -->
        <!--EXEC SP_GET_TEST_ITEM_RESULTS_NEW #{measureYmd}, #{ewtrCleanFacNo}, #{plantCd}, #{testItemResultStr}-->
        select b.ewtr_mon_pos_no as ewtrMonPosNo, b.ewtr_mon_pos_nm as ewtrMonPosNm
            <foreach collection="testItemResult" item="arr">

                <if test = "arr.inputTypeCd == 'NUM01'.toString()">
                , 0 AS '${arr.inputTypeCd}${arr.ewtrTestItemCd}'
                </if>

                <if test = "arr.inputTypeCd == 'TXT01'.toString()">
                , null AS '${arr.inputTypeCd}${arr.ewtrTestItemCd}'
                </if>


            </foreach>
        from ewtr_clean_fac_pos a inner join ewtr_mon_pos b on a.ewtr_mon_pos_no=b.ewtr_mon_pos_no and b.use_yn='Y'
                                  inner join ewtr_test_item c on c.plant_cd=#{plantCd} and c.use_yn='Y'
        where a.ewtr_clean_fac_no=#{ewtrCleanFacNo}
        group by b.ewtr_mon_pos_no, b.ewtr_mon_pos_nm
        order by b.ewtr_mon_pos_no, b.ewtr_mon_pos_nm

    </select>
    <!-- 수질자가측정  결과저장 -->
    <update id="updateTestItemResult" parameterType="com.she.env.water.model.TestItemResult">
        merge into ewtr_test_item_result as t
        using (select #{measureYmd} measure_ymd, #{ewtrMonPosNo} ewtr_mon_pos_no, #{ewtrCleanFacNo} ewtr_clean_fac_no
                     ,#{itemCd} ewtr_test_item_cd, #{numResult} num_result, #{charResult} char_result, #{deptCd} dept_cd
              ) as s
        on (t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no
            and t.ewtr_mon_pos_no = s.ewtr_mon_pos_no and t.ewtr_test_item_cd = s.ewtr_test_item_cd and t.dept_cd = s.dept_cd
            )
        when not matched then
        insert  (
                      measure_ymd
                    , ewtr_mon_pos_no, ewtr_test_item_cd
                    , ewtr_clean_fac_no
                    , num_result, char_result
                    , dept_cd
                    , create_user_id
                    , create_dt
                )
                values (
                      s.measure_ymd
                    , s.ewtr_mon_pos_no, s.ewtr_test_item_cd
                    , s.ewtr_clean_fac_no
                    , s.num_result, s.char_result
                    , s.dept_cd
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set  num_result = s.num_result
                    , char_result = s.char_result
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;

    </update>
    <!--배출시설 가동시간-->
    <select id="getDischRunTms" resultType="com.she.env.water.model.WasteDischFacRunTm">
        select
            df.ewtr_disch_grp_cd as ewtr_disch_grp_cd
            ,w.code_nm as ewtr_waste_disch_fac_nm
            ,df.ewtr_clean_fac_no
            ,isnull(wr.measure_ymd,#{measureYmd}) as measure_ymd
            ,df.ewtr_waste_disch_fac_no
            ,df.ewtr_waste_disch_fac_nm as fac_nm
            ,isnull(wr.h00_yn,'Y') as h00_yn,isnull(wr.h01_yn,'Y') as h01_yn,isnull(wr.h02_yn,'Y') as h02_yn,isnull(wr.h03_yn,'Y') as h03_yn
            ,isnull(wr.h04_yn,'Y') as h04_yn,isnull(wr.h05_yn,'Y') as h05_yn,isnull(wr.h06_yn,'Y') as h06_yn,isnull(wr.h07_yn,'Y') as h07_yn
            ,isnull(wr.h08_yn,'Y') as h08_yn,isnull(wr.h09_yn,'Y') as h09_yn,isnull(wr.h10_yn,'Y') as h10_yn,isnull(wr.h11_yn,'Y') as h11_yn
            ,isnull(wr.h12_yn,'Y') as h12_yn,isnull(wr.h13_yn,'Y') as h13_yn,isnull(wr.h14_yn,'Y') as h14_yn,isnull(wr.h15_yn,'Y') as h15_yn
            ,isnull(wr.h16_yn,'Y') as h16_yn,isnull(wr.h17_yn,'Y') as h17_yn,isnull(wr.h18_yn,'Y') as h18_yn,isnull(wr.h19_yn,'Y') as h19_yn
            ,isnull(wr.h20_yn,'Y') as h20_yn,isnull(wr.h21_yn,'Y') as h21_yn,isnull(wr.h22_yn,'Y') as h22_yn,isnull(wr.h23_yn,'Y') as h23_yn
            ,wr.create_user_id
            ,wr.create_dt
            ,wr.update_user_id
            ,wr.update_dt
            ,dbo.GET_USER_NM(wr.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(wr.update_user_id) as update_user_nm
            ,isnull(wr.dept_cd, #{deptCd}) as dept_cd
        from dbo.LANG_CODE_MASTER('kr', 'EWTR_DISCH_GRP') w
        inner join ewtr_waste_disch_fac df
        on w.code = df.ewtr_disch_grp_cd
        and df.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        left join ewtr_waste_disch_fac_run_tm wr
        on wr.ewtr_disch_grp_cd = df.ewtr_disch_grp_cd
        and df.ewtr_waste_disch_fac_no = wr.ewtr_waste_disch_fac_no
        and wr.dept_cd = #{deptCd}
        and wr.measure_ymd = #{measureYmd}
        order by w.sort_order

    </select>

    <update id="updateDischRunTm" parameterType="com.she.env.water.model.WasteDischFacRunTm">
        merge into ewtr_waste_disch_fac_run_tm as t
            using(
                select #{ewtrDischGrpCd} ewtr_disch_grp_cd, #{measureYmd} measure_ymd, #{ewtrCleanFacNo} ewtr_clean_fac_no
                ,#{ewtrWasteDischFacNo} ewtr_waste_disch_fac_no, #{deptCd} dept_cd
                ,#{createUserId} create_user_id, #{updateUserId} update_user_id
                ,#{h00Yn} h00_yn , #{h01Yn} h01_yn, #{h02Yn} h02_yn , #{h03Yn} h03_yn,#{h04Yn} h04_yn , #{h05Yn} h05_yn,#{h06Yn} h06_yn , #{h07Yn} h07_yn
                ,#{h08Yn} h08_yn , #{h09Yn} h09_yn, #{h10Yn} h10_yn , #{h11Yn} h11_yn,#{h12Yn} h12_yn , #{h13Yn} h13_yn, #{h14Yn} h14_yn , #{h15Yn} h15_yn
                ,#{h16Yn} h16_yn , #{h17Yn} h17_yn, #{h18Yn} h18_yn , #{h19Yn} h19_yn,#{h20Yn} h20_yn , #{h21Yn} h21_yn,#{h22Yn} h22_yn , #{h23Yn} h23_yn
            ) as s
           on( t.measure_ymd = s.measure_ymd and t.ewtr_disch_grp_cd = s.ewtr_disch_grp_cd and t.ewtr_clean_fac_no = s.ewtr_clean_fac_no and t.ewtr_waste_disch_fac_no = s.ewtr_waste_disch_fac_no and t.dept_cd = s.dept_cd)
         when not matched then
           insert (
                ewtr_disch_grp_cd
                ,measure_ymd
                ,ewtr_clean_fac_no
                ,ewtr_waste_disch_fac_no
                ,dept_cd
                ,h00_yn ,h01_yn, h02_yn , h03_yn, h04_yn ,h05_yn
                ,h06_yn ,h07_yn, h08_yn , h09_yn, h10_yn ,h11_yn
                ,h12_yn ,h13_yn, h14_yn , h15_yn, h16_yn ,h17_yn
                ,h18_yn ,h19_yn, h20_yn , h21_yn, h22_yn ,h23_yn
                ,create_user_id
                ,create_dt
           )
           values(
                s.ewtr_disch_grp_cd
                ,s.measure_ymd
                ,s.ewtr_clean_fac_no
                ,s.ewtr_waste_disch_fac_no
                ,s.dept_cd
                ,s.h00_yn ,s.h01_yn, s.h02_yn , s.h03_yn, s.h04_yn ,s.h05_yn
                ,s.h06_yn ,s.h07_yn, s.h08_yn , s.h09_yn, s.h10_yn ,s.h11_yn
                ,s.h12_yn ,s.h13_yn, s.h14_yn , s.h15_yn, s.h16_yn ,s.h17_yn
                ,s.h18_yn ,s.h19_yn, s.h20_yn , s.h21_yn, s.h22_yn ,s.h23_yn
                ,s.create_user_id
                ,getdate()
           )
        when matched then
        update set   h00_yn = s.h00_yn, h01_yn= s.h01_yn, h02_yn= s.h02_yn, h03_yn= s.h00_yn
                    , h04_yn = s.h04_yn, h05_yn = s.h05_yn, h06_yn = s.h06_yn, h07_yn = s.h07_yn
                    , h08_yn = s.h08_yn, h09_yn = s.h09_yn, h10_yn = s.h10_yn, h11_yn = s.h11_yn
                    , h12_yn = s.h12_yn, h13_yn = s.h13_yn, h14_yn = s.h14_yn, h15_yn = s.h15_yn
                    , h16_yn = s.h16_yn, h17_yn = s.h17_yn, h18_yn = s.h18_yn, h19_yn = s.h19_yn
                    , h20_yn = s.h20_yn, h21_yn = s.h21_yn, h22_yn = s.h22_yn, h23_yn = s.h23_yn
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;
    </update>

    <select id="getPreventRunTms" resultType="com.she.env.water.model.PreventFacRunTm">
        select
            p.ewtr_prevent_fac_no
            ,p.ewtr_prevent_fac_nm
            ,pr.ewtr_prevent_run_fac_no
            ,isnull(pr.measure_ymd,#{measureYmd}) as measure_ymd
            ,isnull(pr.dept_cd,#{deptCd}) as dept_cd
            ,isnull(pr.h00_yn,'Y') as h00_yn,isnull(pr.h01_yn,'Y') as h01_yn,isnull(pr.h02_yn,'Y') as h02_yn,isnull(pr.h03_yn,'Y') as h03_yn
            ,isnull(pr.h04_yn,'Y') as h04_yn,isnull(pr.h05_yn,'Y') as h05_yn,isnull(pr.h06_yn,'Y') as h06_yn,isnull(pr.h07_yn,'Y') as h07_yn
            ,isnull(pr.h08_yn,'Y') as h08_yn,isnull(pr.h09_yn,'Y') as h09_yn,isnull(pr.h10_yn,'Y') as h10_yn,isnull(pr.h11_yn,'Y') as h11_yn
            ,isnull(pr.h12_yn,'Y') as h12_yn,isnull(pr.h13_yn,'Y') as h13_yn,isnull(pr.h14_yn,'Y') as h14_yn,isnull(pr.h15_yn,'Y') as h15_yn
            ,isnull(pr.h16_yn,'Y') as h16_yn,isnull(pr.h17_yn,'Y') as h17_yn,isnull(pr.h18_yn,'Y') as h18_yn,isnull(pr.h19_yn,'Y') as h19_yn
            ,isnull(pr.h20_yn,'Y') as h20_yn,isnull(pr.h21_yn,'Y') as h21_yn,isnull(pr.h22_yn,'Y') as h22_yn,isnull(pr.h23_yn,'Y') as h23_yn
            ,pr.create_user_id
            ,pr.create_dt
            ,pr.update_user_id
            ,pr.update_dt
            ,dbo.GET_USER_NM(pr.create_user_id) as create_user_nm
            ,dbo.GET_USER_NM(pr.update_user_id) as update_user_nm
        from ewtr_prevent_fac p
        left join ewtr_prevent_fac_run_tm pr
        on pr.measure_ymd = #{measureYmd}
        and p.ewtr_prevent_fac_no = pr.ewtr_prevent_fac_no
        and p.ewtr_clean_fac_no = pr.ewtr_clean_fac_no
        and pr.dept_cd = #{deptCd}
        where 1=1
        and p.use_yn = 'Y'
        and p.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        order by p.sort_order

    </select>

    <update id="updatePreventRunTm" parameterType="com.she.env.water.model.PreventFacRunTm">
        <selectKey keyProperty= "seqPreventRunFacNo" resultType= "int" order= "BEFORE">
            select next value for seq_prevent_run_fac_no
        </selectKey>
        merge into ewtr_prevent_fac_run_tm as t
        using (select #{ewtrPreventRunFacNo} ewtr_prevent_run_fac_no,  #{measureYmd} measure_ymd, #{ewtrPreventFacNo} ewtr_prevent_fac_no, #{ewtrCleanFacNo} ewtr_clean_fac_no, #{deptCd} dept_cd
                     ,#{h00Yn} h00_yn, #{h01Yn} h01_yn, #{h02Yn} h02_yn, #{h03Yn} h03_yn, #{h04Yn} h04_yn, #{h05Yn} h05_yn
                     ,#{h06Yn} h06_yn, #{h07Yn} h07_yn, #{h08Yn} h08_yn, #{h09Yn} h09_yn, #{h10Yn} h10_yn, #{h11Yn} h11_yn
                     ,#{h12Yn} h12_yn, #{h13Yn} h13_yn, #{h14Yn} h14_yn, #{h15Yn} h15_yn, #{h16Yn} h16_yn, #{h17Yn} h17_yn
                     ,#{h18Yn} h18_yn, #{h19Yn} h19_yn, #{h20Yn} h20_yn, #{h21Yn} h21_yn, #{h22Yn} h22_yn, #{h23Yn} h23_yn
              ) as s
        on (t.ewtr_prevent_run_fac_no = s.ewtr_prevent_run_fac_no and t.measure_ymd = s.measure_ymd and t.ewtr_clean_fac_no=s.ewtr_clean_fac_no and t.ewtr_prevent_fac_no = s.ewtr_prevent_fac_no and t.dept_cd = s.dept_cd
            )
        when not matched then
        insert  (
                    ewtr_prevent_run_fac_no
                    , measure_ymd
                    , ewtr_clean_fac_no
                    , ewtr_prevent_fac_no
                    , dept_cd
                    , h00_yn, h01_yn, h02_yn, h03_yn
                    , h04_yn, h05_yn, h06_yn, h07_yn
                    , h08_yn, h09_yn, h10_yn, h11_yn
                    , h12_yn, h13_yn, h14_yn, h15_yn
                    , h16_yn, h17_yn, h18_yn, h19_yn
                    , h20_yn, h21_yn, h22_yn, h23_yn
                    , create_user_id
                    , create_dt
                )
                values (
                    #{seqPreventRunFacNo}
                    ,s.measure_ymd
                    , s.ewtr_clean_fac_no, s.ewtr_prevent_fac_no
                    , s.dept_cd
                    , s.h00_yn, s.h01_yn, s.h02_yn, s.h03_yn
                    , s.h04_yn, s.h05_yn, s.h06_yn, s.h07_yn
                    , s.h08_yn, s.h09_yn, s.h10_yn, s.h11_yn
                    , s.h12_yn, s.h13_yn, s.h14_yn, s.h15_yn
                    , s.h16_yn, s.h17_yn, s.h18_yn, s.h19_yn
                    , s.h20_yn, s.h21_yn, s.h22_yn, s.h23_yn
                    , #{createUserId}
                    , getdate()
                )
         when matched then
         update set   h00_yn = s.h00_yn, h01_yn= s.h01_yn, h02_yn= s.h02_yn, h03_yn= s.h00_yn
                    , h04_yn = s.h04_yn, h05_yn = s.h05_yn, h06_yn = s.h06_yn, h07_yn = s.h07_yn
                    , h08_yn = s.h08_yn, h09_yn = s.h09_yn, h10_yn = s.h10_yn, h11_yn = s.h11_yn
                    , h12_yn = s.h12_yn, h13_yn = s.h13_yn, h14_yn = s.h14_yn, h15_yn = s.h15_yn
                    , h16_yn = s.h16_yn, h17_yn = s.h17_yn, h18_yn = s.h18_yn, h19_yn = s.h19_yn
                    , h20_yn = s.h20_yn, h21_yn = s.h21_yn, h22_yn = s.h22_yn, h23_yn = s.h23_yn
                    , update_user_id = #{updateUserId}
                    , update_dt = getdate()
        ;
    </update>

    <select id="getDownTime" resultType="hashmap">
        select
            from_down_time as fromDownTime
            ,to_down_time as toDownTime
        from ewtr_prevent_fac_break_hist
        where measure_ymd = #{measureYmd} and ewtr_prevent_fac_no = #{ewtrPreventFacNo}
    </select>

    <update id="updateDownTimeYn" parameterType="com.she.env.water.model.PreventFacRunTm">
        with tb as (
            select ewtr_prevent_fac_no
                , min(case when convert(datetime, #{measureYmd}+' 00:00:00') between from_date and to_date then 'N' else 'Y' end) as h00
                , min(case when convert(datetime, #{measureYmd}+' 01:00:00') between from_date and to_date then 'N' else 'Y' end) as h01
                , min(case when convert(datetime, #{measureYmd}+' 02:00:00') between from_date and to_date then 'N' else 'Y' end) as h02
                , min(case when convert(datetime, #{measureYmd}+' 03:00:00') between from_date and to_date then 'N' else 'Y' end) as h03
                , min(case when convert(datetime, #{measureYmd}+' 04:00:00') between from_date and to_date then 'N' else 'Y' end) as h04
                , min(case when convert(datetime, #{measureYmd}+' 05:00:00') between from_date and to_date then 'N' else 'Y' end) as h05
                , min(case when convert(datetime, #{measureYmd}+' 06:00:00') between from_date and to_date then 'N' else 'Y' end) as h06
                , min(case when convert(datetime, #{measureYmd}+' 07:00:00') between from_date and to_date then 'N' else 'Y' end) as h07
                , min(case when convert(datetime, #{measureYmd}+' 08:00:00') between from_date and to_date then 'N' else 'Y' end) as h08
                , min(case when convert(datetime, #{measureYmd}+' 09:00:00') between from_date and to_date then 'N' else 'Y' end) as h09
                , min(case when convert(datetime, #{measureYmd}+' 10:00:00') between from_date and to_date then 'N' else 'Y' end) as h10
                , min(case when convert(datetime, #{measureYmd}+' 11:00:00') between from_date and to_date then 'N' else 'Y' end) as h11
                , min(case when convert(datetime, #{measureYmd}+' 12:00:00') between from_date and to_date then 'N' else 'Y' end) as h12
                , min(case when convert(datetime, #{measureYmd}+' 13:00:00') between from_date and to_date then 'N' else 'Y' end) as h13
                , min(case when convert(datetime, #{measureYmd}+' 14:00:00') between from_date and to_date then 'N' else 'Y' end) as h14
                , min(case when convert(datetime, #{measureYmd}+' 15:00:00') between from_date and to_date then 'N' else 'Y' end) as h15
                , min(case when convert(datetime, #{measureYmd}+' 16:00:00') between from_date and to_date then 'N' else 'Y' end) as h16
                , min(case when convert(datetime, #{measureYmd}+' 17:00:00') between from_date and to_date then 'N' else 'Y' end) as h17
                , min(case when convert(datetime, #{measureYmd}+' 18:00:00') between from_date and to_date then 'N' else 'Y' end) as h18
                , min(case when convert(datetime, #{measureYmd}+' 19:00:00') between from_date and to_date then 'N' else 'Y' end) as h19
                , min(case when convert(datetime, #{measureYmd}+' 20:00:00') between from_date and to_date then 'N' else 'Y' end) as h20
                , min(case when convert(datetime, #{measureYmd}+' 21:00:00') between from_date and to_date then 'N' else 'Y' end) as h21
                , min(case when convert(datetime, #{measureYmd}+' 22:00:00') between from_date and to_date then 'N' else 'Y' end) as h22
                , min(case when convert(datetime, #{measureYmd}+' 23:00:00') between from_date and to_date then 'N' else 'Y' end) as h23
            from (
                select ewtr_prevent_fac_no
                    , convert(datetime, measure_ymd+' '+convert(varchar, from_down_time)+':00:00') as from_date
                    , convert(datetime, complete_ymd+' '+convert(varchar, to_down_time)+':00:00') as to_date
                from ewtr_prevent_fac_break_hist
                where convert(datetime, #{measureYmd}) between convert(datetime, measure_ymd) and convert(datetime, complete_ymd)
            ) tt
            group by ewtr_prevent_fac_no
        )
        update ewtr_prevent_fac_run_tm
        set h00_yn = case when t.h00='Y' then h00_yn else t.h00 end
            , h01_yn = case when t.h01='Y' then h01_yn else t.h01 end
            , h02_yn = case when t.h02='Y' then h02_yn else t.h02 end
            , h03_yn = case when t.h03='Y' then h03_yn else t.h03 end
            , h04_yn = case when t.h04='Y' then h04_yn else t.h04 end
            , h05_yn = case when t.h05='Y' then h05_yn else t.h05 end
            , h06_yn = case when t.h06='Y' then h06_yn else t.h06 end
            , h07_yn = case when t.h07='Y' then h07_yn else t.h07 end
            , h08_yn = case when t.h08='Y' then h08_yn else t.h08 end
            , h09_yn = case when t.h09='Y' then h09_yn else t.h09 end
            , h10_yn = case when t.h10='Y' then h10_yn else t.h10 end
            , h11_yn = case when t.h11='Y' then h11_yn else t.h11 end
            , h12_yn = case when t.h12='Y' then h12_yn else t.h12 end
            , h13_yn = case when t.h13='Y' then h13_yn else t.h13 end
            , h14_yn = case when t.h14='Y' then h14_yn else t.h14 end
            , h15_yn = case when t.h15='Y' then h15_yn else t.h15 end
            , h16_yn = case when t.h16='Y' then h16_yn else t.h16 end
            , h17_yn = case when t.h17='Y' then h17_yn else t.h17 end
            , h18_yn = case when t.h18='Y' then h18_yn else t.h18 end
            , h19_yn = case when t.h19='Y' then h19_yn else t.h19 end
            , h20_yn = case when t.h20='Y' then h20_yn else t.h20 end
            , h21_yn = case when t.h21='Y' then h21_yn else t.h21 end
            , h22_yn = case when t.h22='Y' then h22_yn else t.h22 end
            , h23_yn = case when t.h23='Y' then h23_yn else t.h23 end
        from tb t
        where ewtr_prevent_fac_run_tm.measure_ymd = #{measureYmd}
        and ewtr_prevent_fac_run_tm.ewtr_prevent_fac_no = t.ewtr_prevent_fac_no
    </update>

    <!-- 수질 운영현황 -->
    <select id="getOperationStatus" resultType="hashmap">
       /* OperationMapper.getOperationStatus [Operation.xml] */
      <!-- 보안취약점 점검에서 예외처리가 안 될 경우 SP로 사용 -->
      <!--EXEC SP_GET_OPERATION_STATUS_WTR #{fromYmd}, #{toYmd}, #{ymColStr}, #{plantCd}, #{totalTypeCd}, #{ewtrCleanFacNo}, #{search}, #{testItemStr}, #{deptCd}, #{defaultParam.lang}-->
      <!-- 용수량 -->
      <if test = "totalTypeCd == 'WTCCL'.toString()">
        select ef.dept_cd,dbo.GET_DEPT_NM(ef.dept_cd) as dept_nm, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_supl_no,  eh.ewtr_supl_nm
                <foreach collection= "ymCols" item= "item">
                , replace(convert(varchar, cast( isnull(sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.consum_amt) else 0 end),0) as money),1),'.00','') as ym${item}
                </foreach>
                , replace(convert(varchar, cast( isnull(sum(convert(numeric(18,2),er.consum_amt)),0) as money),1),'.00','') as ymtotal
        from ewtr_op_log_result et inner join ewtr_supl_chk_result er
                on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
            inner join ewtr_supl eh on er.ewtr_supl_no=eh.ewtr_supl_no
            inner join ewtr_clean_fac ef on et.ewtr_clean_fac_no=ef.ewtr_clean_fac_no

        where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd} and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
         <if test= "plantCd != null and !plantCd.equals('')">
            and eh.plant_cd = #{plantCd}
         </if>

         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
          <if test= "search != null and !search.equals('')">
            and eh.ewtr_supl_nm like '%'+ #{search} + '%'
          </if>
          <if test="deptCd !=null and !deptCd.equals('')">
            and ef.dept_cd = #{deptCd}
          </if>
         group by ef.dept_cd, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_supl_no,  eh.ewtr_supl_nm
         order by  ef.ewtr_clean_fac_nm, eh.sort_order, eh.ewtr_supl_nm

      </if>
      <!-- 폐수량  -->
      <if test = "totalTypeCd == 'WTCDI'.toString()">
        select ef.dept_cd, dbo.GET_DEPT_NM(ef.dept_cd) as dept_nm, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_disch_no,  eh.ewtr_disch_nm
                <foreach collection= "ymCols" item= "item">
                , replace(convert(varchar, cast( isnull(sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.consum_amt) else 0 end),0) as money),1),'.00','') as ym${item}
                </foreach>
                , replace(convert(varchar, cast( isnull(sum(convert(numeric(18,2),er.consum_amt)),0) as money),1),'.00','') as ymtotal
        from ewtr_op_log_result et inner join ewtr_disch_chk_result er
                on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
            inner join ewtr_disch eh on er.ewtr_disch_no=eh.ewtr_disch_no
            inner join ewtr_clean_fac ef on et.ewtr_clean_fac_no=ef.ewtr_clean_fac_no
         <if test= "plantCd != null and !plantCd.equals('')">
         and eh.plant_cd = #{plantCd}
         </if>

         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
        <if test= "search != null and !search.equals('')">
          and eh.ewtr_disch_nm like '%'+ #{search} + '%'
        </if>
        <if test="deptCd !=null and !deptCd.equals('')">
          and ef.dept_cd = #{deptCd}
        </if>
        where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd} and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
         group by ef.dept_cd, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_disch_no,  eh.ewtr_disch_nm
         order by  ef.ewtr_clean_fac_nm, eh.sort_order, eh.ewtr_disch_nm

      </if>

      <!-- 전력사용량 -->
      <if test = "totalTypeCd == 'WTCEL'.toString()">
        select ef.dept_cd,dbo.GET_DEPT_NM(ef.dept_cd) as dept_nm , eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_pwr_meter_no,  eh.ewtr_pwr_meter_nm
                <foreach collection= "ymCols" item= "item">
                , replace(convert(varchar, cast( isnull( sum(case replace(substring(et.measure_ymd,1,7),'-','') when ${item} then convert(numeric(18),er.pwr_consum_amt) else 0 end), '0') as money),1),'.00','') as x${item}
                , replace(convert(varchar, cast( isnull( sum(case replace(substring(et.measure_ymd,1,7),'-','') when ${item} then convert(numeric(18),er.pwr_consum_amt) else 0 end)*
                  max( case substring(et.measure_ymd,6,2) when '01' then m01_cost when '02' then m02_cost when '03' then m03_cost when '04' then m04_cost
                            when '05' then m05_cost when '06' then m06_cost when '07' then m07_cost when '08' then m08_cost
                            when '09' then m09_cost when '10' then m10_cost when '11' then m11_cost when '12' then m12_cost
                       else 0 end), '0') as money),1),'.00','') as y${item}
                </foreach>
        ,replace(convert(varchar, cast( isnull( sum(convert(numeric(18,2),er.pwr_consum_amt)), '0') as money),1),'.00','') as YSUM
        ,
        replace(convert(varchar, cast( isnull(
        <foreach collection= "ymCols" item= "item">
         sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.pwr_consum_amt) else 0 end)*
          max( case substring(et.measure_ymd,6,2) when '01' then m01_cost when '02' then m02_cost when '03' then m03_cost when '04' then m04_cost
                    when '05' then m05_cost when '06' then m06_cost when '07' then m07_cost when '08' then m08_cost
                    when '09' then m09_cost when '10' then m10_cost when '11' then m11_cost when '12' then m12_cost
               else 0 end) +

          </foreach>

          0, '0') as money),1),'.00','') as  CSUM
        from ewtr_op_log_result et inner join ewtr_pwrc_chk_result er
        on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
        inner join ewtr_pwr_meter eh on er.ewtr_pwr_meter_no=eh.ewtr_pwr_meter_no
        inner join ewtr_clean_fac ef on et.ewtr_clean_fac_no=ef.ewtr_clean_fac_no
        left outer join eair_elec_pwr_unit_cost ect on ect.plant_cd =et.plant_cd and  ect.year =substring(et.measure_ymd,1,4)
        where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd}  and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
         <if test= "plantCd != null and !plantCd.equals('')">
         and eh.plant_cd = #{plantCd}
         </if>

         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
        <if test= "search != null and !search.equals('')">
          and eh.ewtr_pwr_meter_nm like '%'+ #{search} + '%'
        </if>
        <if test="deptCd !=null and !deptCd.equals('')">
          and ef.dept_cd = #{deptCd}
        </if>
         group by ef.dept_cd, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_pwr_meter_no,  eh.ewtr_pwr_meter_nm
         order by  ef.ewtr_clean_fac_nm, eh.sort_order, eh.ewtr_pwr_meter_nm
      </if>

      <!--원료사용량 -->
      <if test = "totalTypeCd == 'WTCIN'.toString()">
        select ef.dept_cd,dbo.GET_DEPT_NM(ef.dept_cd) as dept_nm , eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_ingr_no,  eh.ewtr_ingr_nm
                <foreach collection= "ymCols" item= "item">
                , replace(convert(varchar, cast( isnull(sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.consum_amt) else 0 end), '0') as money),1),'.00','') as ym${item}
                </foreach>
                , replace(convert(varchar, cast( isnull(sum(convert(numeric(18,2),er.consum_amt)), '0') as money),1),'.00','') as ymtotal
        from ewtr_op_log_result et inner join ewtr_ingr_chk_result er
                on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
            inner join ewtr_ingr eh on er.ewtr_ingr_no=eh.ewtr_ingr_no
            inner join ewtr_clean_fac ef on et.ewtr_clean_fac_no=ef.ewtr_clean_fac_no
         <if test= "plantCd != null and !plantCd.equals('')">
         and eh.plant_cd = #{plantCd}
         </if>

         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
        <if test= "search != null and !search.equals('')">
          and eh.ewtr_ingr_nm like '%'+ #{search} + '%'
        </if>
        where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd} and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
        <if test="deptCd !=null and !deptCd.equals('')">
            and ef.dept_cd = #{deptCd}
        </if>
         group by ef.dept_cd, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_ingr_no,  eh.ewtr_ingr_nm
         order by  ef.ewtr_clean_fac_nm, eh.sort_order, eh.ewtr_ingr_nm
      </if>

      <!-- 약품사용량 -->
      <if test = "totalTypeCd == 'WTCCH'.toString()">
        select ef.dept_cd,dbo.GET_DEPT_NM(ef.dept_cd) as dept_nm , eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_chem_no,  eh.ewtr_chem_nm,
        (select code_nm from dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'ENV_UNIT') where code = max(eh.env_unit_cd)) as env_unit_nm
            <foreach collection= "ymCols" item= "item">
                , replace(convert(varchar, cast( isnull(sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.in_amt) else 0 end), '0') as money),1),'.00','') as x${item}
                , replace(convert(varchar, cast( isnull(sum(case replace(substring(et.measure_ymd,1,7),'-','') when #{item} then convert(numeric(18),er.consum_amt) else 0 end), '0') as money),1),'.00','') as y${item}
                </foreach>
                , replace(convert(varchar, cast( isnull(sum(convert(numeric(18),er.in_amt)), '0') as money),1),'.00','') as xtotal
                , replace(convert(varchar, cast( isnull(sum(convert(numeric(18),er.consum_amt)), '0') as money),1),'.00','') as ytotal

        from ewtr_op_log_result et inner join ewtr_chem_chk_result er
                on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
            inner join ewtr_chem eh on er.ewtr_chem_no=eh.ewtr_chem_no
            inner join ewtr_clean_fac ef on et.ewtr_clean_fac_no=ef.ewtr_clean_fac_no
         <if test= "plantCd != null and !plantCd.equals('')">
         and eh.plant_cd = #{plantCd}
         </if>
         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
         <if test= "search != null and !search.equals('')">
          and eh.ewtr_chem_nm like '%'+ #{search} + '%'
        </if>

         where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd} and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
         <if test="deptCd !=null and !deptCd.equals('')">
            and ef.dept_cd = #{deptCd}
         </if>
         group by ef.dept_cd, eh.sort_order, et.ewtr_clean_fac_no, ef.ewtr_clean_fac_nm, eh.ewtr_chem_no,  eh.ewtr_chem_nm
         order by  ef.ewtr_clean_fac_nm, eh.sort_order, eh.ewtr_chem_nm
      </if>

      <!-- 자가측정 -->
      <if test = "totalTypeCd == 'WTCME'.toString()">

        select et.measure_ymd, eh.ewtr_mon_pos_no, eh.ewtr_mon_pos_nm
            <foreach collection="testItem" item="arr">
            , max( case er.ewtr_test_item_cd when #{arr.ewtrTestItemCd} then num_result else 0 end) AS '${arr.ewtrTestItemCd}'
            </foreach>
            from ewtr_op_log_result et inner join ewtr_test_item_result er
            on et.ewtr_clean_fac_no=er.ewtr_clean_fac_no and et.measure_ymd=er.measure_ymd
            inner join ewtr_mon_pos eh on er.ewtr_mon_pos_no=eh.ewtr_mon_pos_no
         <if test= "plantCd != null and !plantCd.equals('')">
         and eh.plant_cd = #{plantCd}
         </if>

         <if test= "ewtrCleanFacNo != null and !ewtrCleanFacNo.equals('')">
            and et.ewtr_clean_fac_no= #{ewtrCleanFacNo}
         </if>
         <if test= "search != null and !search.equals('')">
          and eh.ewtr_mon_pos_nm like '%'+ #{search} + '%'
        </if>
        where substring(et.measure_ymd,1,10) <![CDATA[ >=]]>  #{fromYmd} and substring(et.measure_ymd,1,10) <![CDATA[<=]]> #{toYmd}
         group by et.measure_ymd, eh.ewtr_mon_pos_no, eh.ewtr_mon_pos_nm
         order by  et.measure_ymd desc, eh.ewtr_mon_pos_nm
      </if>
    </select>

    <!-- 클린센터 목록 출력 -->
    <select id="getWasteDischFacs" resultType="com.she.env.water.model.WasteDischFac">
        select ewtr_clean_fac_no, ewtr_clean_fac_nm
        from ewtr_clean_fac
        where use_yn='Y' and plant_cd=#{plantCd}
        order by sort_order
    </select>

    <!-- 슬러지 시설,지도점검 사항 리스트 목록-->

	 <select id="DailyReportList" resultType="com.she.env.water.model.OpLogResult">
        select
             o.amt_sludge_gen   /* 슬러지 발생량(㎥) */
            ,o.amt_sludge_tx    /* 슬러지 처리량(㎥) */
            ,o.amt_sludge_sto    /* 슬러지 보관량(㎥) */
            ,o.sludge_mc        /* 슬러지 함수율(%) */
            ,o.sludge_sto_po    /* 슬러지 보관장소 */
            ,o.sludge_tx_po        /* 슬러지 처리장소 또는 위탁처리업체 */
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_gen,0) as money),1),'.00','') as  amt_sludge_gen_t  /* 슬러지 발생량(㎥) /일지용*/
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_tx,0) as money),1),'.00','') as  amt_sludge_tx_t   /* 슬러지 처리량(㎥) / 일지용*/
            ,replace(convert(varchar, cast( isnull(o.amt_sludge_sto,0) as money),1),'.00','') as  amt_sludge_sto_t   /* 슬러지 보관량(㎥) / 일지용 */
            ,replace(convert(varchar, cast( isnull(o.sludge_mc,0) as money),1),'.00','')  as sludge_mc_t      /* 슬러지 함수율(%)/ 일지용 */
            ,o.regulator        /* 단속 기관 */
            ,o.regulator_worker    /* 단속 기관 점검자 */
            ,o.violation        /* 위반사항 */
            ,o.action            /* 조치사항 */
        from ewtr_oplog_base_dept bd
        inner join ewtr_clean_fac cf
        on bd.ewtr_clean_fac_no = cf.ewtr_clean_fac_no
        left join ewtr_op_log_result o
        on o.ewtr_clean_fac_no = cf.ewtr_clean_fac_no
        and o.dept_cd = bd.dept_cd
        left join com_appr_rqst car on o.appr_rqst_no = car.appr_rqst_no
        left join com_user u on o.create_user_id = u.user_id
        left join com_dept d on u.dept_cd = d.dept_cd
        left join com_user cu on o.create_user_id = cu.user_id
        left join com_user uu on o.update_user_id = uu.user_id
        where 1=1
        and o.measure_ymd = #{measureYmd}
        and o.ewtr_clean_fac_no = #{ewtrCleanFacNo}
        <if test="plantCd != null and !plantCd.equals('')">
        and o.plant_cd = #{plantCd}
        </if>
        and o.dept_cd = #{deptCd}

        </select>

   <!--
    SAP Procedure (삭제할거임)

    수질운영일지 메인정보-날씨,온도,근무자
    <insert id="getSapOpLogResult" parameterType="String">
           EXEC IF_SAP_WTR_LOG_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 용수사용량, 폐수배출량(일부)
    <insert id="getSapSuplResult" parameterType="String">
           EXEC IF_SAP_WTR_SUPL_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 폐수배출량
    <insert id="getSapDischResult" parameterType="String">
           EXEC IF_SAP_WTR_DISCH_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 전력사용량
    <insert id="getElecPwrResult" parameterType="String">
           EXEC IF_SAP_WTR_ELEC_PWR_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 약품사용량
    <insert id="getSapChemResult" parameterType="String">
           EXEC IF_SAP_WTR_CHEM_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 슬러지처리량
    <insert id="getSapSludgeResult" parameterType="String">
           EXEC IF_SAP_WTR_SLUDGE_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 배출시설가동시간-SAP I/F데이터는 없으나, 시설별 가동시간을 24시간으로 저장 처리하며, 일지화면에서 변경가능.
    <insert id="getSapDischTmResult" parameterType="String">
           EXEC IF_SAP_WTR_DISCH_TM_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 방지시설가동시간 - SAP I/F데이터는 없으나, 시설별 가동시간24시간으로 저장 처리하며, 일지화면에서 변경가능.
    <insert id="getSapPreventTmResult" parameterType="String">
           EXEC IF_SAP_WTR_PREVENT_TM_TO_SHE #{measureYmd}
    </insert>

    수질운영일지 자가측정 분석결과 -RFC는 ZSHE_INTF_WQMEASURE(수질분석정보)로 별도
    <insert id="getSapMeasResult" parameterType="String">
           EXEC IF_SAP_WTR_MEAS_TO_SHE #{measureYmd}
    </insert>

    결재가 진행중이거나 완료된건은 프로시저를 실행하지 않는다. (울산사업장 / 수질은 울산사업장만 인터페이스함.)
    <select id="getSapOperationCheck" resultType="String">
        select
            case biz_appr_step_cd when  'BAPSG' then 'Y' when  'BAPSA' then 'Y'
                else 'N'
                end as state
        from (
            select
                plant_cd, left(ymd,4) +'-'+substring(ymd,5,2)+'-'+right(ymd,2) as measure_ymd
            from sap_wtr_log_400
            where  ymd = replace(#{measureYmd},'-','')
            and plant_cd = '3000'
        ) a
        inner join ewtr_op_log_result b
        left outer join com_appr_rqst cat on cat.appr_rqst_no = b.appr_rqst_no
        left outer join com_code_master ccm on ccm.code_group_cd = 'COM_BIZ_APPR_STEP' and cat.biz_appr_step_cd = ccm.code
        on a.plant_cd = b.plant_cd
        and a.measure_ymd = b.measure_ymd
    </select> -->
</mapper>