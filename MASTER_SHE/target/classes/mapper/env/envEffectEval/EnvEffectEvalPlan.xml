<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.env.envEffectEval.mapper.EnvEffectEvalPlanMapper">

	<select id="getEnvEffectEvalPlans" resultType="com.she.env.envEffectEval.model.EnvEffectEvalPlan">
		select p.eval_plan_no, p.env_eff_eval_plan_step_cd, sc.code_nm as env_eff_eval_plan_step_nm, p.env_eff_eval_div_cd, dc.code_nm as env_eff_eval_div_nm
			, p.eval_year, p.eval_start_ymd, p.eval_end_ymd, p.eval_title, p.remark, p.eval_start_ymd+'~'+p.eval_end_ymd as eval_period
			, p.plant_cd, pc.code_nm as plant_nm, p.dept_cd, d.dept_nm, p.tgt_dept_cd, td.dept_nm as tgt_dept_nm, p.tgt_process_cd, pp.process_nm as tgt_process_nm
			, p.plan_appr_rqst_no, pr.biz_appr_step_cd as plan_appr_step_cd, isnull(prc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) as plan_appr_step_nm
			, p.rslt_appr_rqst_no, rr.biz_appr_step_cd as rslt_appr_step_cd, isnull(rrc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) as rslt_appr_step_nm
            , case when p.env_eff_eval_plan_step_cd='EEE01' then pr.biz_appr_step_cd else rr.biz_appr_step_cd end as appr_step_cd
            , case when p.env_eff_eval_plan_step_cd='EEE01' then isnull(prc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) else isnull(rrc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) end as appr_step_nm
			, format(isnull(p.update_dt, p.create_dt), 'yyyy-MM-dd') as write_dt
			, isnull(p.update_user_id, p.create_user_id) as write_user_id
			, isnull(uu.user_nm, cu.user_nm) as write_user_nm
		from env_effect_eval_plan p
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pc on p.plant_cd = pc.code
		inner join com_dept d on p.dept_cd = d.dept_cd
		inner join com_dept td on p.tgt_dept_cd = td.dept_cd
		inner join com_process pp on p.tgt_process_cd = pp.process_cd
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'ENV_EFF_EVAL_PLAN_STEP_CD') sc on p.env_eff_eval_plan_step_cd = sc.code
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'ENV_EFF_EVAL_DIV_CD') dc on p.env_eff_eval_div_cd = dc.code
		inner join com_user cu on p.create_user_id = cu.user_id
		left join com_user uu on p.update_user_id = uu.user_id
		left join com_appr_rqst pr on p.plan_appr_rqst_no = pr.appr_rqst_no
		left join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') prc on pr.biz_appr_step_cd = prc.code
		left join com_appr_rqst rr on p.rslt_appr_rqst_no = rr.appr_rqst_no
		left join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') rrc on rr.biz_appr_step_cd = rrc.code
		<where>
            <if test="plantCd !=null and !plantCd.equals('')">
                and p.plant_cd = #{plantCd}
            </if>
            <if test="deptCd !=null and !deptCd.equals('')">
                and p.dept_cd = #{deptCd}
            </if>
            <if test="tgtDeptCd !=null and !tgtDeptCd.equals('')">
                and p.tgt_dept_cd = #{tgtDeptCd}
            </if>
            <if test="envEffEvalPlanStepCd !=null and !envEffEvalPlanStepCd.equals('')">
                and p.env_eff_eval_plan_step_cd = #{envEffEvalPlanStepCd}
            </if>
            <if test="envEffEvalDivCd !=null and !envEffEvalDivCd.equals('')">
                and p.env_eff_eval_div_cd = #{envEffEvalDivCd}
            </if>            
            <if test="evalTitle !=null and !evalTitle.equals('')">
                and p.eval_title like '%' + #{evalTitle} + '%'
            </if>
            <if test="evalYearFrom !=null and !evalYearFrom.equals('')">
                and p.eval_year between #{evalYearFrom} and #{evalYearTo}
            </if>
            <if test="apprStepCd !=null and !apprStepCd.equals('')">
                -- 계획단계와 결과단계의 결재 상태가 다름 
                and isnull(case when p.env_eff_eval_plan_step_cd='EEE01' then pr.biz_appr_step_cd else rr.biz_appr_step_cd end, 'BAPSB') = #{apprStepCd}
            </if>
        </where>		
		order by p.eval_year desc, p.eval_start_ymd desc, p.create_dt desc	
	</select>
	
	<select id="getEnvEffectEvalPlan" resultType="com.she.env.envEffectEval.model.EnvEffectEvalPlan">
		select p.eval_plan_no, p.env_eff_eval_plan_step_cd, sc.code_nm as env_eff_eval_plan_step_nm, p.env_eff_eval_div_cd, dc.code_nm as env_eff_eval_div_nm
			, p.eval_year, p.eval_start_ymd, p.eval_end_ymd, p.eval_title, p.remark, p.eval_start_ymd+'~'+p.eval_end_ymd as eval_period
			, p.plant_cd, pc.code_nm as plant_nm, p.dept_cd, d.dept_nm, p.tgt_dept_cd, td.dept_nm as tgt_dept_nm, p.tgt_process_cd, pp.process_nm as tgt_process_nm
			, p.plan_appr_rqst_no, pr.biz_appr_step_cd as plan_appr_step_cd, isnull(prc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) as plan_appr_step_nm
			, p.rslt_appr_rqst_no, rr.biz_appr_step_cd as rslt_appr_step_cd, isnull(rrc.code_nm, dbo.GET_CODE_NM_LANG('KR', 'COM_BIZ_APPR_STEP', 'BAPSB')) as rslt_appr_step_nm
			, format(isnull(p.update_dt, p.create_dt), 'yyyy-MM-dd') as write_dt
			, isnull(p.update_user_id, p.create_user_id) as write_user_id
			, isnull(uu.user_nm, cu.user_nm) as write_user_nm
		from env_effect_eval_plan p
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pc on p.plant_cd = pc.code
		inner join com_dept d on p.dept_cd = d.dept_cd
		inner join com_dept td on p.tgt_dept_cd = td.dept_cd
		inner join com_process pp on p.tgt_process_cd = pp.process_cd
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'ENV_EFF_EVAL_PLAN_STEP_CD') sc on p.env_eff_eval_plan_step_cd = sc.code
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'ENV_EFF_EVAL_DIV_CD') dc on p.env_eff_eval_div_cd = dc.code
		inner join com_user cu on p.create_user_id = cu.user_id
		left join com_user uu on p.update_user_id = uu.user_id
		left join com_appr_rqst pr on p.plan_appr_rqst_no = pr.appr_rqst_no
		left join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') prc on pr.biz_appr_step_cd = prc.code
		left join com_appr_rqst rr on p.rslt_appr_rqst_no = rr.appr_rqst_no
		left join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') rrc on rr.biz_appr_step_cd = rrc.code
		where p.eval_plan_no = #{evalPlanNo}
	</select>
	
	<select id="getEnvEffectEvalResults" resultType="com.she.env.envEffectEval.model.EnvEffectEvalRslt">
		select r.eval_rslt_no, r.eval_plan_no, r.saf_facility_cd, isnull(fm.facility_nm, dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000003394')) as saf_facility_nm, r.detail_process
			, r.facility_nm, r.facility_fuel, r.facility_amt, r.input_nm, r.input_amt, r.output_nm, r.output_amt, r.residue_nm, r.residue_amt
			, r.env_gen, r.env_act, r.env_imp_div, r.env_imp_mng, r.env_imp_issue
			, r.impo_gen, r.impo_effect, r.impo_toxic, r.impo_toxic_score, r.impo_qnt, r.impo_qnt_score, r.impo_ctrl, r.impo_ctrl_score, r.impo_weight, r.impo_seriousness, r.impo_rate, r.impo_type
			, r.conf_desc,  r.manager_comment, r.manager_id, um.user_nm as manager_nm, r.manager_dt
			, r.env_impo_yn, case when isnull(r.env_impo_yn, 'N')='Y' then dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000003213') else dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000001065') end as env_impo_yn_nm
			, r.create_dt, r.create_user_id
            , dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000000276') as impr_act_lbl
            , dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000002737') as impr_act_imme_lbl
		from env_effect_eval_rslt r
		left join saf_facility_mst fm on r.saf_facility_cd = fm.saf_facility_cd
		left join com_user um on r.manager_id = um.user_id
		where r.eval_plan_no = #{evalPlanNo}
		order by r.eval_rslt_no
	</select>
	
	<select id="getEnvEffectEvalResult" resultType="com.she.env.envEffectEval.model.EnvEffectEvalRslt">
		select r.eval_rslt_no, r.eval_plan_no, r.saf_facility_cd, isnull(fm.facility_nm, dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000003394')) as saf_facility_nm, r.detail_process
			, r.facility_nm, r.facility_fuel, r.facility_amt, r.input_nm, r.input_amt, r.output_nm, r.output_amt, r.residue_nm, r.residue_amt
			, r.env_gen, r.env_act, r.env_imp_div, r.env_imp_mng, r.env_imp_issue
			, r.impo_gen, r.impo_effect, r.impo_toxic, r.impo_toxic_score, r.impo_qnt, r.impo_qnt_score, r.impo_ctrl, r.impo_ctrl_score, r.impo_weight, r.impo_seriousness, r.impo_rate, r.impo_type
			, r.conf_desc,  r.manager_comment, r.manager_id, um.user_nm as manager_nm, r.manager_dt
			, r.env_impo_yn, case when isnull(r.env_impo_yn, 'N')='Y' then dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000003213') else dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000001065') end as env_impo_yn_nm
			, r.create_dt, r.create_user_id			
            , dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000000276') as impr_act_lbl
            , dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000002737') as impr_act_imme_lbl
		from env_effect_eval_rslt r
		left join saf_facility_mst fm on r.saf_facility_cd = fm.saf_facility_cd
		left join com_user um on r.manager_id = um.user_id
		where r.eval_rslt_no = #{evalRsltNo}
	</select>
	
	<select id="getEnvEffectEvalImpoResults" resultType="com.she.env.envEffectEval.model.EnvEffectEvalRslt">
		select r.eval_rslt_no, r.eval_plan_no, r.saf_facility_cd, fm.facility_nm as saf_facility_nm, r.detail_process
			, r.facility_nm, r.facility_fuel, r.facility_amt, r.input_nm, r.input_amt, r.output_nm, r.output_amt, r.residue_nm, r.residue_amt
			, r.env_gen, r.env_act, r.env_imp_div, r.env_imp_mng, r.env_imp_issue
			, r.impo_gen, r.impo_effect, r.impo_toxic, r.impo_toxic_score, r.impo_qnt, r.impo_qnt_score, r.impo_ctrl, r.impo_ctrl_score, r.impo_weight, r.impo_seriousness, r.impo_rate, r.impo_type
			, r.conf_desc,  r.manager_comment, r.manager_id, um.user_nm as manager_nm, r.manager_dt
			, r.env_impo_yn, case when isnull(r.env_impo_yn, 'N')='Y' then dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000003213') else dbo.GET_LBL_NM_LANG(#{defaultParam.lang}, 'L0000001065') end as env_impo_yn_nm
			, r.create_dt, r.create_user_id
			, ia.saf_impr_act_no, ia.impr_class_cd, ia.ref_table_id, ia.act_class_cd, ia.impr_step_cd, ias.code_nm as impr_step_nm
			, p.plant_cd, pc.code_nm as plant_nm, p.dept_cd, d.dept_nm, p.tgt_dept_cd, td.dept_nm as tgt_dept_nm, p.tgt_process_cd, pp.process_nm as tgt_process_nm 
			, p.eval_year, p.eval_title, p.eval_start_ymd+'~'+p.eval_end_ymd as eval_period
            , format(isnull(p.update_dt, p.create_dt), 'yyyy-MM-dd') as write_dt
            , isnull(p.update_user_id, p.create_user_id) as write_user_id
            , isnull(uu.user_nm, cu.user_nm) as write_user_nm
		from env_effect_eval_rslt r
		inner join env_effect_eval_plan p on r.eval_plan_no = p.eval_plan_no
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pc on p.plant_cd = pc.code
		inner join com_dept d on p.dept_cd = d.dept_cd
		inner join com_dept td on p.tgt_dept_cd = td.dept_cd
		inner join com_process pp on p.tgt_process_cd = pp.process_cd
		inner join saf_facility_mst fm on r.saf_facility_cd = fm.saf_facility_cd
		inner join saf_impr_act ia on r.eval_rslt_no = ia.ref_table_id and ia.impr_class_cd = 'ICL35' and ia. act_class_cd = 'ACL02'
		inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_IMPR_STEP') ias on ia.impr_step_cd = ias.code
		inner join com_user cu on p.create_user_id = cu.user_id
        left join com_user uu on p.update_user_id = uu.user_id
        left join com_user um on r.manager_id = um.user_id
		<where>
			and r.env_impo_yn = 'Y' 
            and p.env_eff_eval_plan_step_cd = 'EEE02'
            and exists (
                select 1
                from com_appr_rqst
                where p.rslt_appr_rqst_no = appr_rqst_no
                and biz_appr_step_cd = 'BAPSG'
            )
            <if test="plantCd !=null and !plantCd.equals('')">
                and p.plant_cd = #{plantCd}
            </if>
            <if test="deptCd !=null and !deptCd.equals('')">
                and p.dept_cd = #{deptCd}
            </if>
            <if test="tgtDeptCd !=null and !tgtDeptCd.equals('')">
                and p.tgt_dept_cd = #{tgtDeptCd}
            </if>
            <if test="tgtProcessCd !=null and !tgtProcessCd.equals('')">
                and p.tgt_process_cd = #{tgtProcessCd}
            </if>            
            <if test="evalTitle !=null and !evalTitle.equals('')">
                and p.eval_title like '%' + #{evalTitle} + '%'
            </if>
            <if test="evalYearFrom !=null and !evalYearFrom.equals('')">
                and p.eval_year between #{evalYearFrom} and #{evalYearTo}
            </if>
            <if test="safFacilityCd !=null and !safFacilityCd.equals('')">
                and r.saf_facility_cd = #{safFacilityCd}
            </if>
            <if test="impoRate !=null and !impoRate.equals('')">
                and r.impo_rate = #{impoRate}
            </if>
        </where>
		order by p.eval_year desc, p.eval_start_ymd desc, p.create_dt desc, r.eval_rslt_no
	</select>
			
	<insert id="createEnvEffectEvalPlan" parameterType="com.she.env.envEffectEval.model.EnvEffectEvalPlan">
		<selectKey keyProperty="evalPlanNo" resultType="int" order="BEFORE">
            SELECT next value for seq_env_effect_eval_plan as evalPlanNo
        </selectKey>
		insert into env_effect_eval_plan (
			eval_plan_no
			, plant_cd
			, dept_cd
			, env_eff_eval_plan_step_cd
			, env_eff_eval_div_cd
			, eval_year
			, eval_start_ymd
			, eval_end_ymd
			, eval_title
			, tgt_dept_cd
			, tgt_process_cd
			, remark
			, create_user_id
			, create_dt
			, create_dept_nm
			, create_dept_cd
			, create_position_nm
			, create_position_cd
		)
		values (
			#{evalPlanNo}
			, #{plantCd}
			, #{deptCd}
			, #{envEffEvalPlanStepCd}
			, #{envEffEvalDivCd}
			, #{evalYear}
			, #{evalStartYmd}
			, #{evalEndYmd}
			, #{evalTitle}
			, #{tgtDeptCd}
			, #{tgtProcessCd}
			, #{remark}
			, #{createUserId}
			, getdate()
			, (select dbo.GET_DEPT_NM(dept_cd) from com_user where user_id = #{createUserId})
			, (select dept_cd from com_user where user_id = #{createUserId})
			, (select position_nm from com_user where user_id = #{createUserId})
			, (select position_cd from com_user where user_id = #{createUserId})
		)
	</insert>
	
	<update id="updateEnvEffectEvalPlan" parameterType="com.she.env.envEffectEval.model.EnvEffectEvalPlan">
		update env_effect_eval_plan
		set plant_cd = #{plantCd}
			, dept_cd = #{deptCd}
			, env_eff_eval_div_cd = #{envEffEvalDivCd}
			, eval_year = #{evalYear}
			, eval_start_ymd = #{evalStartYmd}
			, eval_end_ymd = #{evalEndYmd}
			, eval_title = #{evalTitle}
			, tgt_dept_cd = #{tgtDeptCd}
			, tgt_process_cd = #{tgtProcessCd}
			, remark = #{remark}
			, update_user_id = #{updateUserId}
			, update_dt = getdate()
			, update_dept_nm = (select dbo.GET_DEPT_NM(dept_cd) from com_user where user_id = #{updateUserId})
			, update_dept_cd = (select dept_cd from com_user where user_id = #{updateUserId})
			, update_position_nm = (select position_nm from com_user where user_id = #{updateUserId})
			, update_position_cd = (select position_cd from com_user where user_id = #{updateUserId})
		where eval_plan_no = #{evalPlanNo}
	</update>
	
	<delete id="deleteEnvEffectEvalPlan" parameterType="hashMap">
		delete env_effect_eval_plan
		where eval_plan_no = #{evalPlanNo}
	</delete>
	
	<insert id="createEnvEffectEvalRslt" parameterType="com.she.env.envEffectEval.model.EnvEffectEvalRslt">
		<selectKey keyProperty="evalRsltNo" resultType="int" order="BEFORE">
            SELECT next value for seq_env_effect_eval_rslt as evalRsltNo
        </selectKey>
		insert into env_effect_eval_rslt (
			eval_rslt_no
			, eval_plan_no
			, saf_facility_cd
			, detail_process
			, facility_nm
			, facility_fuel
			, facility_amt
			, input_nm
			, input_amt
			, output_nm
			, output_amt
			, residue_nm
			, residue_amt
			, env_gen
			, env_act
			, env_imp_div
			, env_imp_mng
			, env_imp_issue
			, impo_gen
			, impo_effect
			, impo_toxic
			, impo_toxic_score
			, impo_qnt
			, impo_qnt_score
			, impo_ctrl
			, impo_ctrl_score
			, impo_weight
			, impo_seriousness
			, impo_rate
			, impo_type
			, conf_desc
			, env_impo_yn
			, create_dt
			, create_user_id
		)
		values (
			#{evalRsltNo}
			, #{evalPlanNo}
			, #{safFacilityCd}
			, #{detailProcess}
			, #{facilityNm}
			, #{facilityFuel}
			, #{facilityAmt}
			, #{inputNm}
			, #{inputAmt}
			, #{outputNm}
			, #{outputAmt}
			, #{residueNm}
			, #{residueAmt}
			, #{envGen}
			, #{envAct}
			, #{envImpDiv}
			, #{envImpMng}
			, #{envImpIssue}
			, #{impoGen}
			, #{impoEffect}
			, #{impoToxic}
			, #{impoToxicScore}
			, #{impoQnt}
			, #{impoQntScore}
			, #{impoCtrl}
			, #{impoCtrlScore}
			, #{impoWeight}
			, #{impoSeriousness}
			, #{impoRate}
			, #{impoType}
			, #{confDesc}
			, #{envImpoYn}
			, getdate()
			, #{createUserId}
		)
	</insert>
 	
	<update id="updateEnvEffectEvalRslt" parameterType="com.she.env.envEffectEval.model.EnvEffectEvalRslt">
		update env_effect_eval_rslt
		set eval_plan_no = #{evalPlanNo}
            , saf_facility_cd = #{safFacilityCd}
			, detail_process = #{detailProcess}
			, facility_nm = #{facilityNm}
			, facility_fuel = #{facilityFuel}
			, facility_amt = #{facilityAmt}
			, input_nm = #{inputNm}
			, input_amt = #{inputAmt}
			, output_nm = #{outputNm}
			, output_amt = #{outputAmt}
			, residue_nm = #{residueNm}
			, residue_amt = #{residueAmt}
			, env_gen = #{envGen}
			, env_act = #{envAct}
			, env_imp_div = #{envImpDiv}
			, env_imp_mng = #{envImpMng}
			, env_imp_issue = #{envImpIssue}
			, impo_gen = #{impoGen}
			, impo_effect = #{impoEffect}
			, impo_toxic = #{impoToxic}
			, impo_toxic_score = #{impoToxicScore}
			, impo_qnt = #{impoQnt}
			, impo_qnt_score = #{impoQntScore}
			, impo_ctrl = #{impoCtrl}
			, impo_ctrl_score = #{impoCtrlScore}
			, impo_weight = #{impoWeight}
			, impo_seriousness = #{impoSeriousness}
			, impo_rate = #{impoRate}
			, impo_type = #{impoType}
			, conf_desc = #{confDesc}
			, env_impo_yn = #{envImpoYn}	
		where eval_rslt_no = #{evalRsltNo}
	</update>
	
	<delete id="deleteEnvEffectEvalRslt" parameterType="hashMap">
		delete env_effect_eval_rslt
		where eval_rslt_no = #{evalRsltNo}
	</delete>
 
    <delete id="deleteEnvEffectEvalRslts" parameterType="hashMap">
        delete env_effect_eval_rslt
        where eval_plan_no = #{evalPlanNo}
    </delete>
	
	<update id="updateEnvEffectEvalRsltManagerComment" parameterType="hashMap">
		update env_effect_eval_rslt
		set manager_comment = #{managerComment}
			, manager_dt = getdate()
			, manager_id = #{managerId}
		where eval_rslt_no = #{evalRsltNo}
	</update>
 
    <update id="updateEnvEffectEvalPlanStatus">
        update env_effect_eval_plan
        set env_eff_eval_plan_step_cd = #{envEffEvalPlanStepCd}
        where eval_plan_no = #{evalPlanNo}    
    </update>
    
    <update id="updateEnvEffectEvalImprStatus">
        update saf_impr_act
        set impr_step_cd = (case when act_class_cd='ACL02' then 'IMST2' else 'IMST5' end)
        where impr_class_cd = 'ICL35'
        and ref_table_id in (
            select eval_rslt_no
            from env_effect_eval_rslt
            where eval_plan_no = #{evalPlanNo}
        )
    </update>
	
	<update id="updateEnvEffectEvalPlanAppr" parameterType="hashMap">
		update env_effect_eval_plan
		set plan_appr_rqst_no = #{apprRqstNo}
		where eval_plan_no = #{evalPlanNo}			
	</update>
	
	<update id="updateEnvEffectEvalRsltAppr" parameterType="hashMap">
		update env_effect_eval_plan
		set rslt_appr_rqst_no = #{apprRqstNo}
		where eval_plan_no = #{evalPlanNo}			
	</update>
 
    <select id="checkExcelFacilityNm" resultType="String" parameterType="hashMap">
        select isnull(max(t.saf_facility_cd), '') as text
        from saf_facility_mst t
        where t.facility_nm = #{facilityNm}
        and exists (
            select 1 
            from env_effect_eval_plan
            where t.process_cd = tgt_process_cd
            and eval_plan_no = #{evalPlanNo}
        )
    </select>
    
    <select id="checkExcelLbl" resultType="String" parameterType="hashMap">
        with t as (
            select (case #{lang} when 'kr' then lbl_val 
                when 'en' then lbl_val_en 
                when 'ja' then lbl_val_ja 
                when 'zh_cn' then lbl_val_zh_cn 
                when 'zh_tw' then lbl_val_zh_tw 
                else lbl_val end) as lbl_txt
            from com_lbl_dtl
            where (case when lbl_cd in ('L0000002286', 'L0000002902', 'L0000004904') then 'detailProcess'
                when lbl_cd in ('L0000003569', 'L0000004905', 'L0000004906') then 'envGen'
                when lbl_cd in ('L0000004901', 'L0000004907', 'L0000004908', 'L0000003285') then 'envImpDiv'
                when lbl_cd in ('L0000004902', 'L0000004909') then 'impoToxicCtrl'
                when lbl_cd in ('L0000004903', 'L0000004910') then 'impoQnt' end) = #{grpCd}
        )
        select isnull(max(lbl_txt), '') as text
        from t
        where lbl_txt = #{val}
    </select>
    
    <select id="getExcelMessageLbl" resultType="hashMap" parameterType="hashMap">
        with t as (
            select (case #{lang} when 'kr' then lbl_val 
                when 'en' then lbl_val_en 
                when 'ja' then lbl_val_ja 
                when 'zh_cn' then lbl_val_zh_cn 
                when 'zh_tw' then lbl_val_zh_tw 
                else lbl_val end) as lbl_txt, lbl_cd
            from com_lbl_dtl
        )
        select max(case when lbl_cd='L0000004954' then lbl_txt else null end) as L0000004954
            ,  max(case when lbl_cd='L0000004953' then lbl_txt else null end) as L0000004953
            ,  max(case when lbl_cd='L0000004952' then lbl_txt else null end) as L0000004952
            ,  max(case when lbl_cd='L0000004951' then lbl_txt else null end) as L0000004951
            ,  max(case when lbl_cd='L0000004950' then lbl_txt else null end) as L0000004950
            ,  max(case when lbl_cd='L0000004949' then lbl_txt else null end) as L0000004949    
            ,  max(case when lbl_cd='L0000004948' then lbl_txt else null end) as L0000004948
            ,  max(case when lbl_cd='L0000004947' then lbl_txt else null end) as L0000004947
            ,  max(case when lbl_cd='L0000004946' then lbl_txt else null end) as L0000004946
            ,  max(case when lbl_cd='L0000004945' then lbl_txt else null end) as L0000004945
            ,  max(case when lbl_cd='L0000004944' then lbl_txt else null end) as L0000004944
            ,  max(case when lbl_cd='L0000004943' then lbl_txt else null end) as L0000004943
            ,  max(case when lbl_cd='L0000003887' then lbl_txt else null end) as L0000003887
            ,  max(case when lbl_cd='L0000004955' then lbl_txt else null end) as L0000004955
        from t
    </select>

</mapper>