<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.safety.facilityCheck.mapper.FacilityCheckResultMapper">

    <insert id= "createFacilityCheckMaster" parameterType= "com.she.safety.model.FacilityCheckMaster">
        /* FacilityCheckResultMapper."createFacilityCheckMaster" [FacilityCheckResult.xml] */
        <selectKey keyProperty= "safFacilityCheckNo" resultType= "int" order= "BEFORE">
            select next value for seq_saf_facility_check_master as safFacilityCheckNo
          </selectKey>
        insert into saf_facility_check_master
            (saf_facility_check_no
            ,plant_cd
            ,dept_cd
            ,saf_check_type_cd
            ,saf_facility_check_title
            ,saf_facility_check_plan_symd
            ,saf_facility_check_plan_eymd
            ,saf_facility_check_perd
            ,create_user_id
            ,create_dt)
        values
            (#{safFacilityCheckNo}
            ,#{plantCd}
            ,#{deptCd}
            ,#{safCheckTypeCd}
            ,#{safFacilityCheckTitle}
            ,#{safFacilityCheckPlanSymd}
            ,#{safFacilityCheckPlanEymd}
            ,#{safFacilityCheckPerd}
            ,#{createUserId}
            ,getdate())
    </insert>

    <update id= "updateFacilityCheckMaster" parameterType= "com.she.safety.model.FacilityCheckMaster">
        /* FacilityCheckResultMapper."updateFacilityCheckMaster" [FacilityCheckResult.xml] */
        update saf_facility_check_master
        set plant_cd = #{plantCd}
            ,dept_cd = #{deptCd}
            ,saf_check_type_cd = #{safCheckTypeCd}
            ,saf_facility_check_title = #{safFacilityCheckTitle}
            ,saf_facility_check_plan_symd = #{safFacilityCheckPlanSymd}
            ,saf_facility_check_plan_eymd = #{safFacilityCheckPlanEymd}
            ,saf_facility_check_perd = #{safFacilityCheckPerd}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_facility_check_no = #{safFacilityCheckNo}
    </update>

    <delete id= "deleteFacilityCheckSchedules">
        /* FacilityCheckResultMapper.deleteFacilityCheckSchedules [FacilityCheckResult.xml] */
        delete from saf_facility_check_schedule
        where saf_facility_check_no = #{safFacilityCheckNo}
    </delete>

    <delete id= "deleteFacilityCheckMaster">
        /* FacilityCheckResultMapper.deleteFacilityCheckMaster [FacilityCheckResult.xml] */
        delete from saf_facility_check_master
        where saf_facility_check_no = #{safFacilityCheckNo}
    </delete>

    <select id= "getFacilityCheckResults" resultType= "com.she.safety.model.FacilityCheckSchedule">
        /* FacilityCheckResultMapper.getFacilityCheckResults [FacilityCheckResult.xml] */
        select sfcs.saf_facility_check_schedule_no
            ,sfcs.saf_facility_check_no
            ,sfcs.saf_facility_check_nm
            ,sfcm.plant_cd
            ,plant.code_nm as plant_nm
            ,sfcm.dept_cd
            ,cd.dept_nm
            ,sfm.plant_cd as facility_plant_cd
            ,facilityPlant.code_nm as facility_plant_nm
            ,sfm.dept_cd as facility_dept_cd
            ,facilityDept.dept_nm as facility_dept_nm
            ,sfm.process_cd as facility_process_cd
            ,facilityProcess.process_nm as facility_process_nm
            ,sfcm.saf_facility_check_title
            ,sfcm.saf_check_type_cd
            ,checkType.code_nm as saf_check_type_nm
            ,sfcs.saf_facility_cd
            ,sfm.facility_nm
            ,sft.saf_facility_type_cd
            ,sft.saf_facility_type_nm
            ,sfcs.saf_facility_check_sch_ymd
            ,sfcs.saf_facility_check_ymd
            ,sfcs.saf_facility_check_result
            ,sfcs.check_step_cd
            ,checkStep.code_nm as check_step_nm
            ,sfcs.appr_step_cd
            ,apprStep.code_nm as appr_step_nm
            ,sfcs.check_result_cd
            ,checkResultCls.code_nm as check_result_nm
            ,sfcs.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sfcs.create_dt, 23) as create_dt
            ,sfcs.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sfcs.update_dt, 23) as update_dt
            ,sfcs.p_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm, '결재요청전' ) as biz_appr_step_nm
        from saf_facility_check_schedule sfcs
        left outer join com_appr_rqst car
         on sfcs.p_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
         on car.biz_appr_step_cd = bizAppr.code


        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FAC_CHK_CYE') checkCycle
         on sfcm.saf_facility_check_perd = checkCycle.code
        inner join saf_facility_check_master sfcm
         on sfcs.saf_facility_check_no = sfcm.saf_facility_check_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
         on sfcm.plant_cd = plant.code
        inner join com_dept cd
         on sfcm.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') checkType
         on sfcm.saf_check_type_cd = checkType.code
        inner join saf_facility_mst sfm
        on sfcs.saf_facility_cd = sfm.saf_facility_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') facilityPlant
         on sfm.plant_cd = facilityPlant.code
        inner join com_dept facilityDept
         on sfm.dept_cd = facilityDept.dept_cd
        inner join com_process facilityProcess
         on sfm.process_cd = facilityProcess.process_cd
        inner join saf_facility_type sft
         on sfm.saf_facility_type_cd = sft.saf_facility_type_cd
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP') checkStep
         on sfcs.check_step_cd = checkStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') apprStep
         on sfcs.appr_step_cd = apprStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_F_CHK_RSLT_CLS') checkResultCls
         on sfcs.check_result_cd = checkResultCls.code

        inner join com_user createUser
        on sfcs.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sfcs.update_user_id = updateUser.user_id
        where 1=1
        and sfm.facility_nm like '%' + #{facilityNm} + '%'
        <if test= "safFacilityCheckNo != null and safFacilityCheckNo > 0">
        and sfcs.saf_facility_check_no = #{safFacilityCheckNo}
        </if>
        <if test= "startYmd != null and !startYmd.equals('') and endYmd != null and !endYmd.equals('')">
        and convert(date, sfcs.saf_facility_check_sch_ymd) between convert(date, #{startYmd}) and convert(date, #{endYmd})
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
        and sfcm.plant_cd = #{plantCd}
        </if>
        <if test= "safCheckTypeCd != null and !safCheckTypeCd.equals('')">
        and sfcm.saf_check_type_cd = #{safCheckTypeCd}
        </if>
        <if test= "safFacilityTypeCd != null and !safFacilityTypeCd.equals('')">
        and sft.saf_facility_type_cd = #{safFacilityTypeCd}
        </if>
        <if test= "checkStepCd != null and !checkStepCd.equals('')">
        and sfcs.check_step_cd = #{checkStepCd}
        </if>
    </select>

    <select id= "getFacilityCheckResult" resultType= "com.she.safety.model.FacilityCheckSchedule">
        /* FacilityCheckResultMapper.getFacilityCheckResult [FacilityCheckResult.xml] */
        select sfcs.saf_facility_check_schedule_no
            ,sfcs.saf_facility_check_no
            ,sfcs.saf_facility_check_nm
            ,sfcm.plant_cd
            ,plant.code_nm as plant_nm
            ,sfcm.dept_cd
            ,cd.dept_nm
            ,sfcm.saf_facility_check_title
            ,sfcm.saf_check_type_cd
            ,checkType.code_nm as saf_check_type_nm
            ,sfcs.saf_facility_cd
            ,sfm.facility_nm
            ,sft.saf_facility_type_cd
            ,sft.saf_facility_type_nm
            ,sfcs.saf_facility_check_sch_ymd
            ,sfcs.saf_facility_check_ymd
            ,sfcs.saf_facility_check_result
            ,sfcs.check_step_cd
            ,checkStep.code_nm as check_step_nm
            ,sfcs.appr_step_cd
            ,apprStep.code_nm as appr_step_nm
            ,sfcs.check_result_cd
            ,sfcs.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sfcs.create_dt, 23) as create_dt
            ,sfcs.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sfcs.update_dt, 23) as update_dt
            ,sfcs.p_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm, '결재요청전' ) as biz_appr_step_nm
        from saf_facility_check_schedule sfcs
        left outer join com_appr_rqst car
         on sfcs.p_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
         on car.biz_appr_step_cd = bizAppr.code
        inner join saf_facility_check_master sfcm
         on sfcs.saf_facility_check_no = sfcm.saf_facility_check_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
         on sfcm.plant_cd = plant.code
        inner join com_dept cd
         on sfcm.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') checkType
         on sfcm.saf_check_type_cd = checkType.code
        inner join saf_facility_mst sfm
         on sfcs.saf_facility_cd = sfm.saf_facility_cd
        inner join saf_facility_type sft
         on sfm.saf_facility_type_cd = sft.saf_facility_type_cd
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP') checkStep
         on sfcs.check_step_cd = checkStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') apprStep
         on sfcs.appr_step_cd = apprStep.code
        inner join com_user createUser
         on sfcs.create_user_id = createUser.user_id
        left outer join com_user updateUser
         on sfcs.update_user_id = updateUser.user_id
        where sfcs.saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </select>

    <select id= "getrFacilityCheckResults" resultType= "com.she.safety.model.FacilityCheckSchedule">
        /* FacilityCheckResultMapper.getrFacilityCheckResults [FacilityCheckResult.xml] */
        select sfcs.saf_facility_check_schedule_no
            ,sfcs.saf_facility_check_no
            ,sfcs.saf_facility_check_nm
            ,sfcm.plant_cd
            ,plant.code_nm as plant_nm
            ,sfcm.dept_cd
            ,cd.dept_nm
            ,sfm.plant_cd as facility_plant_cd
            ,facilityPlant.code_nm as facility_plant_nm
            ,sfm.dept_cd as facility_dept_cd
            ,facilityDept.dept_nm as facility_dept_nm
            ,sfm.process_cd as facility_process_cd
            ,facilityProcess.process_nm as facility_process_nm
            ,sfcm.saf_facility_check_title
            ,sfcm.saf_check_type_cd
            ,checkType.code_nm as saf_check_type_nm
            ,sfcs.saf_facility_cd
            ,sfm.facility_nm
            ,sft.saf_facility_type_cd
            ,sft.saf_facility_type_nm
            ,sfcs.saf_facility_check_sch_ymd
            ,sfcs.saf_facility_check_ymd
            ,sfcs.saf_facility_check_result
            ,sfcs.check_step_cd
            ,checkStep.code_nm as check_step_nm
            ,sfcs.appr_step_cd
            ,apprStep.code_nm as appr_step_nm
            ,sfcs.check_result_cd
            ,checkResultCls.code_nm as check_result_nm
            ,sfcs.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sfcs.create_dt, 23) as create_dt
            ,sfcs.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sfcs.update_dt, 23) as update_dt
            ,sfcs.r_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm, '결재요청전' ) as biz_appr_step_nm
        from saf_facility_check_schedule sfcs
        left outer join com_appr_rqst car
         on sfcs.r_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
         on car.biz_appr_step_cd = bizAppr.code
        inner join saf_facility_check_master sfcm
        on sfcs.saf_facility_check_no = sfcm.saf_facility_check_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
         on sfcm.plant_cd = plant.code
        inner join com_dept cd
         on sfcm.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') checkType
         on sfcm.saf_check_type_cd = checkType.code
        inner join saf_facility_mst sfm
         on sfcs.saf_facility_cd = sfm.saf_facility_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') facilityPlant
         on sfm.plant_cd = facilityPlant.code
        inner join com_dept facilityDept
         on sfm.dept_cd = facilityDept.dept_cd
        inner join com_process facilityProcess
         on sfm.process_cd = facilityProcess.process_cd
        inner join saf_facility_type sft
         on sfm.saf_facility_type_cd = sft.saf_facility_type_cd
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP') checkStep
         on sfcs.check_step_cd = checkStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') apprStep
         on sfcs.appr_step_cd = apprStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_F_CHK_RSLT_CLS') checkResultCls
         on sfcs.check_result_cd = checkResultCls.code

        inner join com_user createUser
        on sfcs.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sfcs.update_user_id = updateUser.user_id
        where 1=1
        and sfm.facility_nm like '%' + #{facilityNm} + '%'
        <if test= "safFacilityCheckNo != null and safFacilityCheckNo > 0">
        and sfcs.saf_facility_check_no = #{safFacilityCheckNo}
        </if>
        <if test= "startYmd != null and !startYmd.equals('') and endYmd != null and !endYmd.equals('')">
        and convert(date, sfcs.saf_facility_check_sch_ymd) between convert(date, #{startYmd}) and convert(date, #{endYmd})
        </if>
        <if test= "startYmd != null and !startYmd.equals('') and (endYmd == null or endYmd.equals(''))">
        and convert(date, sfcs.saf_facility_check_sch_ymd) &gt;= convert(date, #{startYmd})
        </if>
        <if test= "(startYmd == null or startYmd.equals('')) and endYmd != null and !endYmd.equals('')">
        and convert(date, sfcs.saf_facility_check_sch_ymd) &lt;= convert(date, #{endYmd})
        </if>
        <if test= "plantCd != null and !plantCd.equals('')">
        and sfcm.plant_cd = #{plantCd}
        </if>
        <if test= "safCheckTypeCd != null and !safCheckTypeCd.equals('')">
        and sfcm.saf_check_type_cd = #{safCheckTypeCd}
        </if>
        <if test= "safFacilityTypeCd != null and !safFacilityTypeCd.equals('')">
        and sft.saf_facility_type_cd = #{safFacilityTypeCd}
        </if>
        <choose>
            <when test='checkStepCd.equals("CHS99")'>
                and sfcs.check_step_cd in ('CHS02', 'CHS04')
            </when>
            <when test= "checkStepCd != null and !checkStepCd.equals('')">
                and sfcs.check_step_cd = #{checkStepCd}
            </when>
            <otherwise>
            </otherwise>
        </choose>
    </select>

    <select id= "getrFacilityCheckResult" resultType= "com.she.safety.model.FacilityCheckSchedule">
        /* FacilityCheckResultMapper.getrFacilityCheckResult [FacilityCheckResult.xml] */
        select sfcs.saf_facility_check_schedule_no
            ,sfcs.saf_facility_check_no
            ,sfcs.saf_facility_check_nm
            ,sfcm.plant_cd
            ,plant.code_nm as plant_nm
            ,sfcm.dept_cd
            ,cd.dept_nm
            ,sfcm.saf_facility_check_title
            ,sfcm.saf_check_type_cd
            ,checkType.code_nm as saf_check_type_nm
            ,sfcs.saf_facility_cd
            ,sfm.facility_nm
            ,sft.saf_facility_type_cd
            ,sft.saf_facility_type_nm
            ,sfcs.saf_facility_check_sch_ymd
            ,sfcs.saf_facility_check_ymd
            ,sfcs.saf_facility_check_result
            ,sfcs.check_step_cd
            ,checkStep.code_nm as check_step_nm
            ,sfcs.appr_step_cd
            ,apprStep.code_nm as appr_step_nm
            ,sfcs.check_result_cd
            ,sfcs.create_user_id
            ,createUser.user_nm as create_user_nm
            ,convert(CHAR(10), sfcs.create_dt, 23) as create_dt
            ,sfcs.update_user_id
            ,updateUser.user_nm as update_user_nm
            ,convert(CHAR(10), sfcs.update_dt, 23) as update_dt
            ,sfcs.r_appr_rqst_no
            ,car.biz_appr_step_cd
            ,isnull(bizAppr.code_nm, '결재요청전' ) as biz_appr_step_nm
        from saf_facility_check_schedule sfcs
        left outer join com_appr_rqst car
        on sfcs.r_appr_rqst_no = car.appr_rqst_no
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') bizAppr
         on car.biz_appr_step_cd = bizAppr.code
        inner join saf_facility_check_master sfcm
         on sfcs.saf_facility_check_no = sfcm.saf_facility_check_no
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') plant
         on sfcm.plant_cd = plant.code
        inner join com_dept cd
         on sfcm.dept_cd = cd.dept_cd
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') checkType
         on sfcm.saf_check_type_cd = checkType.code
        inner join saf_facility_mst sfm
        on sfcs.saf_facility_cd = sfm.saf_facility_cd
        inner join saf_facility_type sft
        on sfm.saf_facility_type_cd = sft.saf_facility_type_cd
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP') checkStep
         on sfcs.check_step_cd = checkStep.code
        left outer join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') apprStep
         on sfcs.appr_step_cd = apprStep.code
        inner join com_user createUser
        on sfcs.create_user_id = createUser.user_id
        left outer join com_user updateUser
        on sfcs.update_user_id = updateUser.user_id
        where sfcs.saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </select>

    <update id= "updateFacilityCheckResult" parameterType= "com.she.safety.model.FacilityCheckSchedule">
        /* FacilityCheckResultMapper.updateFacilityCheckResult [FacilityCheckResult.xml] */
        update saf_facility_check_schedule
        set saf_facility_check_nm = #{safFacilityCheckNm}
            ,saf_facility_cd = #{safFacilityCd}
            ,saf_facility_check_sch_ymd = #{safFacilityCheckSchYmd}
            ,saf_facility_check_ymd = #{safFacilityCheckYmd}
            ,saf_facility_check_result = #{safFacilityCheckResult}
            ,check_step_cd = #{checkStepCd}
            ,appr_step_cd = #{apprStepCd}
            ,check_result_cd = #{checkResultCd}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </update>

    <delete id= "deleteFacilityCheckInspector">
        /* FacilityCheckResultMapper.deleteFacilityCheckInspector [FacilityCheckResult.xml] */
        delete from saf_facility_check_inspector
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </delete>

    <delete id= "deleteFacilityCheckItemResult">
        /* FacilityCheckResultMapper.deleteFacilityCheckItemResult [FacilityCheckResult.xml] */
        delete from saf_facility_check_item_result
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </delete>

    <insert id= "createFacilityCheckInspector" parameterType= "com.she.safety.model.FacilityCheckInspector">
        <selectKey keyProperty= "safFacilityCheckInspectorNo" resultType= "int" order= "BEFORE">
            select (next value for seq_saf_facility_check_inspector) as saf_facility_check_inspector_no
          </selectKey>
        insert into saf_facility_check_inspector
            (saf_facility_check_inspector_no
            ,saf_facility_check_no
            ,saf_facility_check_schedule_no
            ,inspector_class_cd
            ,user_id
            ,user_nm
            ,dept_cd
            ,dept_nm
            ,duty_nm
            ,check_sch_hour
            ,check_sch_minute
            ,check_sch_ehour
            ,check_sch_eminute
            ,remark)
        values
            (#{safFacilityCheckInspectorNo}
            ,#{safFacilityCheckNo}
            ,#{safFacilityCheckScheduleNo}
            ,#{inspectorClassCd}
            ,#{userId}
            ,#{userNm}
            ,#{deptCd}
            ,#{deptNm}
            ,#{dutyNm}
            ,#{checkSchHour}
            ,#{checkSchMinute}
            ,#{checkSchEhour}
            ,#{checkSchEminute}
            ,#{remark})
    </insert>

    <select id= "getFacilityCheckInspectors" resultType= "com.she.safety.model.FacilityCheckInspector">
        /* FacilityCheckResultMapper.getFacilityCheckInspectors [FacilityCheckResult.xml] */
        select sfci.saf_facility_check_inspector_no
            ,sfci.saf_facility_check_no
            ,sfci.saf_facility_check_schedule_no
            ,sfci.inspector_class_cd
            ,inspectorclass.code_nm as inspector_class_nm
            ,sfci.user_id
            ,sfci.user_nm
            ,sfci.dept_cd
            ,sfci.dept_nm
            ,sfci.duty_nm
            ,sfci.check_sch_hour
            ,sfci.check_sch_minute
            ,sfci.check_sch_ehour
            ,sfci.check_sch_eminute
            ,sfci.remark
        from saf_facility_check_inspector sfci
        inner join dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_INSPECTOR_CLASS') inspectorclass
         on sfci.inspector_class_cd = inspectorclass.code
        where 1=1
        <if test= "safFacilityCheckScheduleNo != null and safFacilityCheckScheduleNo > 0">
        and sfci.saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
        </if>
        <if test= "inspectorClassCd != null and !inspectorClassCd.equals('')">
        and sfci.inspector_class_cd = #{inspectorClassCd}
        </if>
    </select>

    <insert id= "createFacilityCheckItemResult" parameterType= "com.she.safety.model.FacilityCheckItemResult">
        /* FacilityCheckResultMapper.createFacilityCheckItemResult [FacilityCheckResult.xml] */
        insert into saf_facility_check_item_result
            (saf_facility_check_no
            ,saf_facility_check_schedule_no
           ,saf_facility_check_item_no
           ,check_result
           ,remark
           ,create_user_id
            ,create_dt)
        values
            (#{safFacilityCheckNo}
            ,#{safFacilityCheckScheduleNo}
            ,#{safFacilityCheckItemNo}
            ,#{checkResult}
            ,#{remark}
            ,#{createUserId}
            ,getdate())
    </insert>

    <update id= "updateFacilityCheckItemResult" parameterType= "com.she.safety.model.FacilityCheckItemResult">
        /* FacilityCheckResultMapper.updateFacilityCheckItemResult [FacilityCheckResult.xml] */
        update saf_facility_check_item_result
        set check_result = #{checkResult}
            ,remark = #{remark}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_facility_check_item_no = #{safFacilityCheckItemNo}
    </update>

    <select id= "getNewFacilityCheckItemResults" resultType= "com.she.safety.model.FacilityCheckItemResult">
        /* FacilityCheckResultMapper.getNewFacilityCheckItemResults [FacilityCheckResult.xml] */
        select sft.saf_facility_type_cd
            , sft.saf_facility_type_nm
            , sfci.saf_facility_check_item_no
            , sfci.saf_facility_check_nm
        from saf_facility_check_item sfci
        inner join saf_facility_type sft
        on sfci.saf_facility_type_cd = sft.saf_facility_type_cd
        where sfci.use_yn = 'Y'
        and sft.use_yn = 'Y'
        and sfci.saf_facility_type_cd = #{safFacilityTypeCd}
        and sfci.saf_check_type_cd = #{safCheckTypeCd}
        and sfci.plant_cd = #{plantCd}
        order by sfci.sort_order
    </select>

    <update id= "updateFacilityCheckResultStepCd">
        /* FacilityCheckResultMapper.updateFacilityCheckResultStepCd [FacilityCheckResult.xml] */
        update saf_facility_check_schedule
        set check_step_cd = #{checkStepCd}
            ,update_user_id = #{updateUserId}
            ,update_dt = getdate()
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </update>

    <update id="completeFacilityCheckMaster">
        /* FacilityCheckResultMapper.completeFacilityCheckMaster [FacilityCheckResult.xml] */
        update saf_facility_check_master
        set appr_rqst_no = #{apprRqstNo}
        where saf_facility_check_no = #{safFacilityCheckNo}
    </update>

    <update id="completeFacilityCheckMasterSchedule">
        /* FacilityCheckResultMapper.completeFacilityCheckMasterSchedule [FacilityCheckResult.xml] */
        update saf_facility_check_schedule
        set check_step_cd = #{checkStepCd}
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </update>

    <update id="completeFacilityCheckSchedule">
        /* FacilityCheckResultMapper.completeFacilityCheckSchedule [FacilityCheckResult.xml] */
        update saf_facility_check_schedule
        set p_appr_rqst_no = #{apprRqstNo}
        <if test="checkStepCd != null and !checkStepCd.equals('')">
        ,check_step_cd = #{checkStepCd}
        </if>
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </update>

    <update id="completeFacilityCheckScheduleResult">
        /* FacilityCheckResultMapper.completeFacilityCheckSchedule [FacilityCheckResult.xml] */
        update saf_facility_check_schedule
        set r_appr_rqst_no = #{apprRqstNo}
        <if test="checkStepCd != null and !checkStepCd.equals('')">
        ,check_step_cd = #{checkStepCd}
        </if>
        where saf_facility_check_schedule_no = #{safFacilityCheckScheduleNo}
    </update>

    <!-- =============================================================================== -->
    <!-- 설비점검계획 목록 조회 -->
    <select id="getFacilChkPlans" parameterType="map" resultType="com.she.safety.model.FacilChkMaster">
    /* getFacilChkPlans [설비점검계획 목록 조회] */
        SELECT p.saf_facil_chk_no
             , p.plant_cd
             , pl.code_nm AS plant_nm
             , p.saf_check_type_cd
             , ct.code_nm AS saf_check_type_nm
             , p.saf_facil_chk_title
             , p.dept_cd
             , d.dept_nm
             , fmst.dept_cd as t_dept_cd
             , cd.dept_nm as t_dept_nm
			 , r.dept_cd as p_dept_cd
			 , pcd.dept_nm as p_dept_nm
			 , CASE WHEN r.chk_end_yn = 'Y' THEN '완료' ELSE '미완료' END AS chkEndYnNm
			 , fmst.facility_nm
             , p.chk_step_cd
             , cs.code_nm AS chk_step_nm
             , p.create_user_id
             , u.user_nm AS create_user_nm
             , CONVERT(CHAR(10), p.create_dt, 23) AS create_dt
             , CASE WHEN apr.code = 'BAPSA' THEN apr.code_nm
                    WHEN apr.code = 'BAPSG' THEN apr.code_nm
                    ELSE '결재요청전' END AS bizApprStepNm
             , req.appr_rqst_no
             , case
                  when dbo.GET_USER_NM(p.update_user_id) = '' then dbo.GET_USER_NM(p.create_user_id)
                  else dbo.GET_USER_NM(p.update_user_id) end    as writer_user_nm
             , case when p.update_dt is null then convert(date, p.create_dt) else convert(date, p.update_dt) end   as writer_dt
          FROM saf_facil_chk_plan p
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pl
                       ON p.plant_cd = pl.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') ct
                      ON p.saf_check_type_cd = ct.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP2') cs
                      ON p.chk_step_cd = cs.code
               LEFT OUTER JOIN com_dept d
                       ON p.dept_cd = d.dept_cd
               LEFT OUTER JOIN com_user u
                       ON p.create_user_id = u.user_id
               LEFT OUTER JOIN com_appr_rqst req
                       ON p.appr_rqst_no = req.appr_rqst_no
               LEFT OUTER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_BIZ_APPR_STEP') apr
                       ON req.biz_appr_step_cd = apr.code
               INNER JOIN saf_facil_chk_rslt r
					   ON p.saf_facil_chk_no = r.saf_facil_chk_no
			   INNER JOIN saf_facility_mst fmst
                       ON r.saf_facility_cd = fmst.saf_facility_cd
			   LEFT OUTER JOIN com_dept cd
                       ON fmst.dept_cd = cd.dept_cd
			   LEFT OUTER JOIN com_dept pcd
                       ON r.dept_cd = pcd.dept_cd
         WHERE 1=1
         <if test="plantCd != null and !plantCd.equals('')">
           AND p.plant_cd = #{plantCd}
         </if>
         <if test="safCheckTypeCd != null and !safCheckTypeCd.equals('')">
           AND p.saf_check_type_cd = #{safCheckTypeCd}
         </if>
         <if test="checkStepCd != null and !checkStepCd.equals('')">
           AND p.chk_step_cd = #{checkStepCd}
         </if>
         <if test="deptCd != null and !deptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{deptSubYn} = 'Y' AND p.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{deptSubYn} = 'N' AND p.dept_cd = #{deptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
         <if test= "startYmd != null and !startYmd.equals('') and endYmd != null and !endYmd.equals('')">
           AND convert(date, p.create_dt) between convert(date, #{startYmd}) and convert(date, #{endYmd})
        </if>
          <if test="tDeptCd != null and !tDeptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{tDeptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{tDeptSubYn} = 'Y' AND fmst.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{tDeptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{tDeptSubYn} = 'N' AND fmst.dept_cd = #{tDeptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
          <if test="pDeptCd != null and !pDeptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{pDeptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{pDeptSubYn} = 'Y' AND r.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{pDeptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{pDeptSubYn} = 'N' AND r.dept_cd = #{pDeptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
          <if test="chkEndYn != null and !chkEndYn.equals('')">
           AND r.chk_end_yn = #{chkEndYn}
         </if>
        <if test= "@org.apache.commons.lang3.StringUtils@isNotBlank(keyword)">
           AND p.saf_facil_chk_title like '%' + #{keyword} + '%'
        </if>
        <if test= "@org.apache.commons.lang3.StringUtils@isNotBlank(facilityNm)">
           AND fmst.facility_nm like '%' + #{facilityNm} + '%'
        </if>
        order by writer_dt desc
    </select>

    <!-- 설비점검계획 상세 조회 -->
    <select id="getFacilChkPlan" resultType="com.she.safety.model.FacilChkMaster">
    /* getFacilChkPlan [설비점검계획 상세 조회 ] */
        SELECT p.saf_facil_chk_no
             , p.plant_cd
             , pl.code_nm AS plant_nm
             , p.saf_check_type_cd
             , ct.code_nm AS saf_check_type_nm
             , p.saf_facil_chk_title
             , p.dept_cd
             , d.dept_nm
             , p.chk_step_cd
             , cs.code_nm AS chk_step_nm
             , p.create_user_id
             , u.user_nm AS create_user_nm
             , CONVERT(CHAR(10), p.create_dt, 23) AS create_dt
             , req.biz_appr_step_cd
             , p.appr_rqst_no
              ,sc.saf_chng_no
              ,sc.chng_num
              , isnull(p.no_plan_yn, 'N') as no_plan_yn
          FROM saf_facil_chk_plan p
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pl
                      ON p.plant_cd = pl.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') ct
                      ON p.saf_check_type_cd = ct.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP2') cs
                      ON p.chk_step_cd = cs.code
               LEFT OUTER JOIN com_dept d
                       ON p.dept_cd = d.dept_cd
               LEFT OUTER JOIN com_user u
                       ON p.create_user_id = u.user_id
               LEFT OUTER JOIN com_appr_rqst req
                       ON p.appr_rqst_no = req.appr_rqst_no
          LEFT OUTER JOIN saf_chng_ref_work scrw
            ON scrw.ref_table_nm = 'saf_facil_chk_plan'
           AND scrw.ref_table_id = p.saf_facil_chk_no
          LEFT OUTER JOIN saf_chng sc
            ON scrw.saf_chng_no = sc.saf_chng_no
         WHERE p.saf_facil_chk_no = #{safFacilChkNo}
    </select>

    <!-- 설비점검 계획 등록 -->
    <insert id="createFacilChkPlan" parameterType="com.she.safety.model.FacilChkMaster">
    /* createFacilChkPlan [설비점검 계획 등록] */
        <selectKey keyProperty= "safFacilChkNo" resultType= "int" order= "BEFORE">
            SELECT NEXT VALUE FOR seq_saf_facil_chk_plan AS safFacilChkNo
        </selectKey>
        INSERT INTO saf_facil_chk_plan (
              saf_facil_chk_no
            , plant_cd
            , saf_check_type_cd
            , saf_facil_chk_title
            , create_user_id
            , create_dt
            , dept_cd
            , chk_step_cd
            , no_plan_yn
        ) VALUES (
              #{safFacilChkNo}
            , #{plantCd}
            , #{safCheckTypeCd}
            , #{safFacilChkTitle}
            , #{createUserId}
            , #{createDt}
            , #{deptCd}
            , #{chkStepCd}
            , #{noPlanYn}
        )
    </insert>

    <!-- 설비점검 계획 수정 -->
    <update id="updateFacilChkPlan" parameterType="com.she.safety.model.FacilChkMaster">
    /* updateFacilChkPlan [설비점검 계획수정] */
        UPDATE saf_facil_chk_plan
           SET plant_cd = #{plantCd}
             , saf_check_type_cd = #{safCheckTypeCd}
             , saf_facil_chk_title = #{safFacilChkTitle}
             , dept_cd = #{deptCd}
             , update_user_id = #{updateUserId}
             , update_dt = getdate()
         WHERE saf_facil_chk_no = #{safFacilChkNo}
    </update>

    <!-- 설비점검계획 삭제 -->
    <delete id="deleteFacilChkPlan">
    /* deleteFacilChkPlan [설비점검계획 삭제] */
        DELETE FROM saf_facil_chk_plan
         WHERE saf_facil_chk_no = #{safFacilChkNo}
    </delete>

    <!-- 설비점검결과 삭제 -->
    <delete id="deleteFacilChkResult">
    /* deleteFacilChkResult [설비점검결과 삭제] */
        DELETE FROM saf_facil_chk_rslt
         WHERE saf_facil_chk_no = #{safFacilChkNo}
    </delete>

    <!-- 설비점검 결과 목록 조회 -->
    <select id="getFacilChkResults" resultType="com.she.safety.model.FacilChkResult">
    /* getFacilChkResults [설비점검 결과목록 조회]*/
  		SELECT r.saf_facil_chk_no
             , r.saf_facility_cd
			 , r.chk_result_cd
			 , r.chk_result
			 , CASE WHEN r.chk_com_yn = 'Y' THEN '확정' ELSE '미확정' END AS chkComYn
             , sft.saf_facility_type_nm
             , sft.saf_facility_type_cd
             , r.chk_sch_ymd        AS safFacilityCheckSchYmd
             , r.user_id            AS createUserId
             , r.user_id
             , isnull(cu.user_nm,'') as user_nm
             , fmst.facility_nm
             , fmst.facility_mgr_num
             , fmst.process_cd
             , cp.process_nm
             , fmst.dept_cd as tdept_cd
             , tcd.dept_nm as tdept_nm
			 , isnull(r.dept_cd,'') as pdept_cd
			 , isnull(cd.dept_nm,'') as pdept_nm
             , r.chk_end_yn
             , CASE WHEN r.chk_end_yn = 'Y' THEN '완료' ELSE '미완료' END AS chkEndYnNm
             , r.chk_ymd
          FROM saf_facil_chk_rslt r
               INNER JOIN saf_facility_mst fmst
                       ON r.saf_facility_cd = fmst.saf_facility_cd
               INNER JOIN saf_facility_type sft
                      ON fmst.saf_facility_type_cd = sft.saf_facility_type_cd
               INNER JOIN com_process cp
                       ON fmst.process_cd = cp.process_cd
               LEFT JOIN com_dept tcd
                       ON fmst.dept_cd = tcd.dept_cd
			   LEFT JOIN com_dept cd
                       ON r.dept_cd = cd.dept_cd
               LEFT JOIN com_user cu
                       ON r.user_id = cu.user_id
         WHERE r.saf_facil_chk_no = #{safFacilChkNo}
          <if test="tDeptCd != null and !tDeptCd.equals('')">
           AND fmst.dept_cd = #{tDeptCd}
         </if>
          <if test="pDeptCd != null and !pDeptCd.equals('')">
           AND r.dept_cd = #{pDeptCd}
         </if>
          <if test="safFacilityCd != null and !safFacilityCd.equals('')">
           AND r.saf_facility_cd = #{safFacilityCd}
         </if>
    </select>

    <!-- 설비점검 결과 등록 -->
    <insert id="createFacilChkResult" parameterType="com.she.safety.model.FacilChkResult">
    /* createFacilChkResult [설비점검 결과 등록] */
        INSERT INTO saf_facil_chk_rslt (
              saf_facil_chk_no
            , saf_facility_cd
            , chk_sch_ymd
            , chk_ymd
            , user_id
            , chk_end_yn
            , dept_cd
            , chk_com_yn
            , chk_result_cd
            , chk_result
        ) VALUES (
              #{safFacilChkNo}
            , #{safFacilityCd}
            , #{safFacilityCheckSchYmd}
            , #{chkYmd}
            , #{createUserId}
            , #{chkEndYn}
            , #{createDeptCd}
            , #{chkComYn}
            , #{chkResultCd}
            , #{chkResult}
        )
    </insert>

    <!-- 설비점검 결과 삭제 -->
    <delete id="deleteFacilChkResults">
        DELETE FROM saf_facil_chk_rslt
         WHERE saf_facil_chk_no = #{safFacilChkNo}
         <if test="safFacilityCd != null and !safFacilityCd.equals('')">
       	 AND saf_facility_cd = #{safFacilityCd}
         </if>

    </delete>

    <!-- 설비점검결과 목록 조회 -->
    <select id="getRFacilChkPlans" parameterType="map" resultType="com.she.safety.model.FacilChkMaster">
    /* getRFacilChkPlans [설비점검결과 목록 조회] */
        SELECT p.saf_facil_chk_no
             , p.plant_cd
             , pl.code_nm AS plant_nm
             , p.saf_check_type_cd
             , ct.code_nm AS saf_check_type_nm
             , p.saf_facil_chk_title
             , p.dept_cd
             , d.dept_nm
             , fmst.dept_cd as t_dept_cd
             , cd.dept_nm as t_dept_nm
             , CONVERT(CHAR,p.saf_facil_chk_no) + fmst.dept_cd as t_merge_key
             , CONVERT(CHAR,p.saf_facil_chk_no) + r.dept_cd as p_merge_key
			 , r.dept_cd as p_dept_cd
			 , pcd.dept_nm as p_dept_nm
			 , pcd.plant_cd as p_plant_cd
             , p.chk_step_cd
             , cs.code_nm AS chk_step_nm
             , p.create_user_id
             , r.user_id as p_user_id
			 , pu.user_nm as p_user_nm
             , u.user_nm AS create_user_nm
             , CASE WHEN r.chk_end_yn = 'Y' THEN '완료' ELSE '미완료' END AS chkEndYnNm
			 , fmst.facility_nm
			 , r.saf_facility_cd
			 , fmst.plant_cd as t_plant_cd
             , CONVERT(CHAR(10), p.create_dt, 23) AS create_dt
             , case
                  when dbo.GET_USER_NM(p.update_user_id) = '' then dbo.GET_USER_NM(p.create_user_id)
                  else dbo.GET_USER_NM(p.update_user_id) end    as writer_user_nm
             , case when p.update_dt is null then convert(date, p.create_dt) else convert(date, p.update_dt) end   as writer_dt
          FROM saf_facil_chk_plan p
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'COM_PLANT_CD') pl
                      ON p.plant_cd = pl.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') ct
                      ON p.saf_check_type_cd = ct.code
               INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_CHK_STEP2') cs
                      ON p.chk_step_cd = cs.code
               LEFT OUTER JOIN com_dept d
                       ON p.dept_cd = d.dept_cd
               LEFT OUTER JOIN com_user u
                       ON p.create_user_id = u.user_id
               INNER JOIN saf_facil_chk_rslt r
					   ON p.saf_facil_chk_no = r.saf_facil_chk_no
			   INNER JOIN saf_facility_mst fmst
                       ON r.saf_facility_cd = fmst.saf_facility_cd
			   LEFT OUTER JOIN com_dept cd
                       ON fmst.dept_cd = cd.dept_cd
			   LEFT OUTER JOIN com_dept pcd
                       ON r.dept_cd = pcd.dept_cd
               LEFT OUTER JOIN com_user pu
                       ON r.user_id = pu.user_id
         WHERE 1=1
         <if test="plantCd != null and !plantCd.equals('')">
           AND p.plant_cd = #{plantCd}
         </if>
         <if test="safCheckTypeCd != null and !safCheckTypeCd.equals('')">
           AND p.saf_check_type_cd = #{safCheckTypeCd}
         </if>
         <if test="checkStepCd != null and !checkStepCd.equals('')">
           AND p.chk_step_cd = #{checkStepCd}
         </if>
         <if test="deptCd != null and !deptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{deptSubYn} = 'Y' AND p.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{deptSubYn} = 'N' AND p.dept_cd = #{deptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
          <if test="tDeptCd != null and !tDeptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{tDeptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{tDeptSubYn} = 'Y' AND fmst.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{tDeptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{tDeptSubYn} = 'N' AND fmst.dept_cd = #{tDeptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
          <if test="pDeptCd != null and !pDeptCd.equals('')">
           <!-- 하위부서 포함여부 관련 쿼리 시작 -->
           AND EXISTS (SELECT 1 WHERE ISNULL(#{pDeptCd}, '') = ''
                       UNION ALL
                       SELECT 1 WHERE #{pDeptSubYn} = 'Y' AND r.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{pDeptCd}))
                       UNION ALL
                       SELECT 1 WHERE #{pDeptSubYn} = 'N' AND r.dept_cd = #{pDeptCd}
                       )
           <!-- 하위부서 포함여부 관련 쿼리 끝 -->
         </if>
          <if test="chkEndYn != null and !chkEndYn.equals('')">
           AND r.chk_end_yn = #{chkEndYn}
         </if>
         <if test= "startYmd != null and !startYmd.equals('') and endYmd != null and !endYmd.equals('')">
           AND convert(date, p.create_dt) between convert(date, #{startYmd}) and convert(date, #{endYmd})
        </if>
        <if test= "@org.apache.commons.lang3.StringUtils@isNotBlank(keyword)">
           AND p.saf_facil_chk_title like '%' + #{keyword} + '%'
        </if>
        <if test= "@org.apache.commons.lang3.StringUtils@isNotBlank(facilityNm)">
           AND fmst.facility_nm like '%' + #{facilityNm} + '%'
        </if>
           order by writer_dt desc , p_merge_key , t_merge_key
    </select>

    <!-- 설비점검결과 상세 조회 -->
    <select id="getFacilChkResult" resultType="com.she.safety.model.FacilChkResult">
    /* getFacilChkResult [설비점검결과 상세 조회] */
        SELECT r.saf_facil_chk_no
             , r.saf_facility_cd
             , sft.saf_facility_type_nm
             , fmst.facility_nm
             , r.chk_sch_ymd        AS safFacilityCheckSchYmd
             , r.user_id            AS createUserId
             , r.chk_ymd
             , r.chk_end_yn
             , r.chk_result
             , r.chk_result_cd
             , r.dept_cd as p_dept_cd
			 , pcd.dept_nm as p_dept_nm
        FROM saf_facil_chk_rslt r
             INNER JOIN saf_facility_mst fmst
                     ON r.saf_facility_cd = fmst.saf_facility_cd
             INNER JOIN saf_facility_type sft
                    ON fmst.saf_facility_type_cd = sft.saf_facility_type_cd
             INNER JOIN com_process cp
                     ON fmst.process_cd = cp.process_cd
             INNER JOIN com_dept cd
                     ON fmst.dept_cd = cd.dept_cd
             LEFT OUTER JOIN com_user cu
                     ON r.user_id = cu.user_id
             LEFT OUTER JOIN com_dept pcd
                     ON r.dept_cd = pcd.dept_cd
                  WHERE 1=1
                    AND r.saf_facil_chk_no = #{safFacilChkNo}
                    AND r.saf_facility_cd = #{safFacilityCd}
    </select>

    <!-- 설비점검별 항목 목록 조회 -->
    <select id="getFacilChkItems" resultType="com.she.safety.model.FacilChkItemResult">
    /* getFacilChkItems [설비점검별 항목 목록 조회] */
        SELECT
          p.saf_facil_chk_no
           , i.saf_facility_check_nm
           , i.saf_facility_check_item_no
           , r.saf_facility_cd
           , ir.chk_result
           , ir.remark
           , m.saf_facility_type_cd
        FROM saf_facil_chk_itm_rslt ir
        inner join saf_facility_check_item i
        on ir.saf_facility_check_item_no = i.saf_facility_check_item_no
        inner join saf_facil_chk_rslt r
        on ir.saf_facil_chk_no = r.saf_facil_chk_no
        and ir.saf_facility_cd = r.saf_facility_cd
        inner join saf_facility_mst m
        on r.saf_facility_cd = m.saf_facility_cd
        inner join saf_facil_chk_plan p
        on r.saf_facil_chk_no = p.saf_facil_chk_no
        where 1=1
        and p.saf_facil_chk_no = #{safFacilChkNo}
        and m.saf_facility_cd = #{safFacilityCd}
    </select>

    <select id="getNewFacilChkItems" resultType="com.she.safety.model.FacilChkItemResult">
    /* getNewFacilChkItems [] */
        select i.saf_facility_check_nm
            ,i.saf_facility_check_item_no
            ,t.saf_facility_type_cd
        from saf_facility_check_item i
        inner join saf_facility_type t
        on i.saf_facility_type_cd = t.saf_facility_type_cd
        where 1=1
        and t.saf_facility_type_cd = #{safFacilityTypeCd}
        and i.plant_cd = #{plantCd}
        and i.saf_check_type_cd = #{safCheckTypeCd}
        and t.use_yn = 'Y'
        and i.use_yn = 'Y'
    </select>

    <!-- 설비점검결과 수정 -->
    <update id="updateFacilChkResult" parameterType="com.she.safety.model.FacilChkResult">
    /* updateFacilChkResult [설비점검결과 수정] */
        UPDATE saf_facil_chk_rslt
           SET chk_ymd = #{chkYmd}
             , chk_sch_ymd = #{safFacilityCheckSchYmd}
             , chk_result_cd = #{chkResultCd}
             , chk_end_yn = #{chkEndYn}
             , chk_result = #{chkResult}
             , dept_cd = #{pDeptCd}
         WHERE saf_facil_chk_no = #{safFacilChkNo}
           AND saf_facility_cd = #{safFacilityCd}
    </update>

    <!-- 점검항목별 결과 저장 및 수정 -->
    <update id="updateFacilChkItem" parameterType="com.she.safety.model.FacilChkItemResult">
    /* updateFacilChkItem [점검항목별 결과 저장 및 수정] */
        MERGE saf_facil_chk_itm_rslt ir
        USING ( SELECT 0 AS col ) AS t
           ON ir.saf_facil_chk_no = #{safFacilChkNo}
          AND ir.saf_facility_check_item_no = #{safFacilityCheckItemNo}
          AND ir.saf_facility_cd = #{safFacilityCd}
         WHEN MATCHED THEN
               UPDATE SET chk_result = #{chkResult}
                        , remark = #{remark}
         WHEN NOT MATCHED THEN
                   INSERT (
                        saf_facil_chk_no
                      , saf_facility_check_item_no
                      , saf_facility_cd
                      , chk_result
                      , remark
                   ) VALUES (
                        #{safFacilChkNo}
                      , #{safFacilityCheckItemNo}
                      , #{safFacilityCd}
                      , #{chkResult}
                      , #{remark}
                   );
    </update>

    <!-- 점검결과 전체완료 -->
    <update id="updateFacilChkResults" parameterType="com.she.safety.model.FacilChkMaster">
    /* updateFacilChkResults [점검결과 전체완료] */
        UPDATE saf_facil_chk_plan
           SET chk_step_cd = 'CHS04'
               ,update_user_id = #{updateUserId}
               ,update_dt = getdate()
         WHERE saf_facil_chk_no = #{safFacilChkNo}
    </update>

    <!-- 결재완료 후 설비점검계획 진행단계 변경 -->
    <update id="completeFacilChkPlan" parameterType="map">
    /* completeFacilChkPlan [결재완료 후 설비점검계획 진행단계 변경] */
        UPDATE saf_facil_chk_plan
           SET chk_step_cd = #{chkStepCd}
             , appr_rqst_no = #{apprRqstNo}
         WHERE saf_facil_chk_no = #{safFacilChkNo}
    </update>

    <!--설비점검결과 확정 유무 판별 -->
    <select id="getFacilChkComStatus" resultType="int">
    	select count(*) from saf_facil_chk_rslt where saf_facil_chk_no = #{safFacilChkNo} and chk_com_yn = 'N'
    </select>

    <!-- 설비점검 사업장별 실적집계 -->
    <select id="getFacilChkResultStatus" resultType="HashMap">
    /* getFacilChkResultStatus [설비점검 사업장별 실적집계] */
        WITH b AS
        (
            SELECT 1 mon
             UNION ALL
            SELECT mon + 1
              FROM b
             WHERE mon + 1 &lt;= 12
        ), p as (
            SELECT sfcp.saf_facil_chk_no
                 , sfcp.plant_cd
                 , sfcr.chk_sch_ymd
              FROM saf_facil_chk_plan sfcp
                   INNER JOIN saf_facil_chk_rslt sfcr
                           ON sfcp.saf_facil_chk_no = sfcr.saf_facil_chk_no
                   INNER JOIN saf_facility_mst sfm
                           ON sfcr.saf_facility_cd = sfm.saf_facility_cd
             WHERE sfcp.chk_step_cd != 'CHS01'
        ), r as (
            SELECT sfcp.saf_facil_chk_no
                 , sfcp.plant_cd
                 , sfcr.chk_ymd
              FROM saf_facil_chk_plan sfcp
                   INNER JOIN saf_facil_chk_rslt sfcr
                           ON sfcp.saf_facil_chk_no = sfcr.saf_facil_chk_no
 				   INNER JOIN saf_facility_mst fmst
                       ON sfcr.saf_facility_cd = fmst.saf_facility_cd
				   INNER JOIN com_process cp
                       ON fmst.process_cd = cp.process_cd
				   INNER JOIN com_dept cd
                       ON fmst.dept_cd = cd.dept_cd
				   LEFT OUTER JOIN com_user cu
                       ON sfcr.user_id = cu.user_id
             <!-- WHERE sfcp.chk_step_cd = 'CHS04' -->
             WHERE sfcr.chk_end_yn = 'Y'
             and sfcr.chk_com_yn = 'Y'
        ), a as (
            SELECT  *
            FROM (
                    select p.plant_cd
                        ,convert(varchar, b.mon) + '_plan' as mon
                        ,count(p.chk_sch_ymd) as cnt
                    from b
                    left outer join p
                    on DATEPART(yy, p.chk_sch_ymd) = #{year}
                    and DATEPART(mm, p.chk_sch_ymd) = b.mon
                    where isnull(p.plant_cd, '') != ''
                    group by p.plant_cd
                            ,b.mon
                    union all
                    select r.plant_cd
                        ,convert(varchar, b.mon) + '_result' as mon
                        ,count(r.chk_ymd) as cnt
                    from b
                    left outer join r
                    on DATEPART(yy, r.chk_ymd) = #{year}
                    and DATEPART(mm, r.chk_ymd) = b.mon
                    where isnull(r.plant_cd, '') != ''
                    group by r.plant_cd
                            ,b.mon
                ) d
            pivot
            (
                sum(cnt)
                for mon in ([1_plan], [1_result], [2_plan], [2_result], [3_plan], [3_result], [4_plan], [4_result], [5_plan], [5_result], [6_plan], [6_result], [7_plan], [7_result], [8_plan], [8_result], [9_plan], [9_result], [10_plan], [10_result], [11_plan], [11_result], [12_plan], [12_result])
            ) piv
        )
        select  plant.code as plant_cd, plant.code_nm as plant_nm
            ,isnull([1_plan], 0) as '01_plan', isnull([2_plan], 0) as '02_plan', isnull([3_plan], 0) as '03_plan', isnull([4_plan], 0) as '04_plan', isnull([5_plan], 0) as '05_plan'
            ,isnull([6_plan], 0) as '06_plan', isnull([7_plan], 0) as '07_plan', isnull([8_plan], 0) as '08_plan', isnull([9_plan], 0) as '09_plan', isnull([10_plan], 0) as '10_plan'
            ,isnull([11_plan], 0) as '11_plan', isnull([12_plan], 0) as '12_plan'
            ,isnull([1_result], 0) as '01_result', isnull([2_result], 0) as '02_result', isnull([3_result], 0) as '03_result', isnull([4_result], 0) as '04_result', isnull([5_result], 0) as '05_result'
            ,isnull([6_result], 0) as '06_result', isnull([7_result], 0) as '07_result', isnull([8_result], 0) as '08_result', isnull([9_result], 0) as '09_result', isnull([10_result], 0) as '10_result'
            ,isnull([11_result], 0) as '11_result', isnull([12_result], 0) as '12_result'
            ,isnull([1_plan], 0) + isnull([2_plan], 0) + isnull([3_plan], 0) + isnull([4_plan], 0) + isnull([5_plan], 0) + isnull([6_plan], 0) + isnull([7_plan], 0) + isnull([8_plan], 0) + isnull([9_plan], 0) + isnull([10_plan], 0) + isnull([11_plan], 0) + isnull([12_plan], 0) as sum_plan
            ,isnull([1_result], 0) + isnull([2_result], 0) + isnull([3_result], 0) + isnull([4_result], 0) + isnull([5_result], 0) + isnull([6_result], 0) + isnull([7_result], 0) + isnull([8_result], 0) + isnull([9_result], 0) + isnull([10_result], 0) + isnull([11_result], 0) + isnull([12_result], 0) as sum_result
            ,isnull([1_plan], 0) + isnull([2_plan], 0) + isnull([3_plan], 0) + isnull([4_plan], 0) + isnull([5_plan], 0) + isnull([6_plan], 0) + isnull([7_plan], 0) + isnull([8_plan], 0) + isnull([9_plan], 0) + isnull([10_plan], 0) + isnull([11_plan], 0) + isnull([12_plan], 0) +
            isnull([1_result], 0) + isnull([2_result], 0) + isnull([3_result], 0) + isnull([4_result], 0) + isnull([5_result], 0) + isnull([6_result], 0) + isnull([7_result], 0) + isnull([8_result], 0) + isnull([9_result], 0) + isnull([10_result], 0) + isnull([11_result], 0) + isnull([12_result], 0) as sum
        from com_code_master plant
        left outer join a
        on a.plant_cd = plant.code
        where plant.code_group_cd = 'COM_PLANT_CD'
        and plant.code != '0000'
        <if test= "plantCd != null and !''.equals(plantCd)">
        and plant.code = #{plantCd}
        </if>
    </select>

    <!-- 설비점검 사업장별 실적 세부집계 -->
    <select id="getFacilChkResultStatusSub" resultType="HashMap">
        WITH b AS
        (
            SELECT 1 mon
             UNION ALL
            SELECT mon + 1
              FROM b
             WHERE mon + 1 &lt;= 12
        ), p as (
            SELECT sfcp.plant_cd
                 , sfcp.saf_check_type_cd
                 , sfcr.dept_cd
                 , sfm.saf_facility_type_cd
                 , sfcr.chk_sch_ymd
              FROM saf_facil_chk_plan sfcp
                   INNER JOIN saf_facil_chk_rslt sfcr
                           ON sfcp.saf_facil_chk_no = sfcr.saf_facil_chk_no
                   INNER JOIN saf_facility_mst sfm
                           ON sfcr.saf_facility_cd = sfm.saf_facility_cd
             WHERE sfcp.chk_step_cd != 'CHS01'
        ), r as (
            SELECT sfcp.plant_cd
                 , sfcp.saf_check_type_cd
                 , sfcr.dept_cd
                 , sfm.saf_facility_type_cd
                 , sfcr.chk_ymd
              FROM saf_facil_chk_plan sfcp
                   INNER JOIN saf_facil_chk_rslt sfcr
                           ON sfcp.saf_facil_chk_no = sfcr.saf_facil_chk_no
                   INNER JOIN saf_facility_mst sfm
                           ON sfcr.saf_facility_cd = sfm.saf_facility_cd
   			  	   INNER JOIN com_process cp
                       ON sfm.process_cd = cp.process_cd
				   INNER JOIN com_dept cd
                       ON sfm.dept_cd = cd.dept_cd
				   LEFT OUTER JOIN com_user cu
                       ON sfcr.user_id = cu.user_id

             WHERE sfcr.chk_end_yn = 'Y'
             and sfcr.chk_com_yn = 'Y'
        ), a as (
            select  *
            from (
                    select p.plant_cd
                    	,p.saf_check_type_cd
                        ,p.saf_facility_type_cd
                        ,p.dept_cd
                        ,convert(varchar, b.mon) + '_plan' as mon
                        ,count(p.chk_sch_ymd) as cnt
                    from b
                    left outer join p
                    on DATEPART(yy, p.chk_sch_ymd) = #{year}
                    and DATEPART(mm, p.chk_sch_ymd) = b.mon
                    where 1=1
                    <if test= "plantCd != null and !''.equals(plantCd)">
                    and p.plant_cd = #{plantCd}
                    </if>
                    <if test= "safCheckTypeCd != null and !''.equals(safCheckTypeCd)">
                    and p.saf_check_type_cd = #{safCheckTypeCd}
                    </if>
                    <if test= "safFacilityTypeCd != null and !''.equals(safFacilityTypeCd)">
                    and p.saf_facility_type_cd = #{safFacilityTypeCd}
                    </if>
                    <if test= "deptCd != null and !''.equals(deptCd)">
                    <!-- 하위부서 포함여부 관련 쿼리 시작 -->
                    AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                                UNION ALL
                                SELECT 1 WHERE #{deptSubYn} = 'Y' AND p.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                                UNION ALL
                                SELECT 1 WHERE #{deptSubYn} = 'N' AND p.dept_cd = #{deptCd}
                                )
                    <!-- 하위부서 포함여부 관련 쿼리 끝 -->
                    </if>
                    group by p.plant_cd
                    		,p.saf_check_type_cd
                            ,p.saf_facility_type_cd
                            ,p.dept_cd
                            ,b.mon
                    union all
                    select r.plant_cd
                    	,r.saf_check_type_cd
                        ,r.saf_facility_type_cd
                        ,r.dept_cd
                        ,convert(varchar, b.mon) + '_result' as mon
                        ,count(r.chk_ymd) as cnt
                    from b
                    left outer join r
                    on DATEPART(yy, r.chk_ymd) = #{year}
                    and DATEPART(mm, r.chk_ymd) = b.mon
                    where 1=1
                    <if test= "plantCd != null and !''.equals(plantCd)">
                    and r.plant_cd = #{plantCd}
                    </if>
                    <if test= "safCheckTypeCd != null and !''.equals(safCheckTypeCd)">
                    and r.saf_check_type_cd = #{safCheckTypeCd}
                    </if>
                    <if test= "safFacilityTypeCd != null and !''.equals(safFacilityTypeCd)">
                    and r.saf_facility_type_cd = #{safFacilityTypeCd}
                    </if>
                    <if test= "deptCd != null and !''.equals(deptCd)">
                    <!-- 하위부서 포함여부 관련 쿼리 시작 -->
                    AND EXISTS (SELECT 1 WHERE ISNULL(#{deptCd}, '') = ''
                                UNION ALL
                                SELECT 1 WHERE #{deptSubYn} = 'Y' AND r.dept_cd IN (SELECT dept_cd FROM dbo.GET_UNDER_DEPTS(#{deptCd}))
                                UNION ALL
                                SELECT 1 WHERE #{deptSubYn} = 'N' AND r.dept_cd = #{deptCd}
                                )
                    <!-- 하위부서 포함여부 관련 쿼리 끝 -->
                    </if>
                    group by r.plant_cd
                    		,r.saf_check_type_cd
                            ,r.saf_facility_type_cd
                            ,r.dept_cd
                            ,b.mon
                ) d
            pivot
            (
                sum(cnt)
                for mon in ([1_plan], [1_result], [2_plan], [2_result], [3_plan], [3_result], [4_plan], [4_result], [5_plan], [5_result], [6_plan], [6_result], [7_plan], [7_result], [8_plan], [8_result], [9_plan], [9_result], [10_plan], [10_result], [11_plan], [11_result], [12_plan], [12_result])
            ) piv
        )
        select a.plant_cd, pl.code_nm as plant_nm, a.saf_check_type_cd, checkType.code_nm as saf_check_type_nm
            ,a.saf_facility_type_cd, sft.saf_facility_type_nm
            ,a.dept_cd, cd.dept_nm
            ,isnull([1_plan], 0) as '01_plan', isnull([2_plan], 0) as '02_plan', isnull([3_plan], 0) as '03_plan', isnull([4_plan], 0) as '04_plan', isnull([5_plan], 0) as '05_plan'
            ,isnull([6_plan], 0) as '06_plan', isnull([7_plan], 0) as '07_plan', isnull([8_plan], 0) as '08_plan', isnull([9_plan], 0) as '09_plan', isnull([10_plan], 0) as '10_plan'
            ,isnull([11_plan], 0) as '11_plan', isnull([12_plan], 0) as '12_plan'
            ,isnull([1_result], 0) as '01_result', isnull([2_result], 0) as '02_result', isnull([3_result], 0) as '03_result', isnull([4_result], 0) as '04_result', isnull([5_result], 0) as '05_result'
            ,isnull([6_result], 0) as '06_result', isnull([7_result], 0) as '07_result', isnull([8_result], 0) as '08_result', isnull([9_result], 0) as '09_result', isnull([10_result], 0) as '10_result'
            ,isnull([11_result], 0) as '11_result', isnull([12_result], 0) as '12_result'
            ,isnull([1_plan], 0) + isnull([2_plan], 0) + isnull([3_plan], 0) + isnull([4_plan], 0) + isnull([5_plan], 0) + isnull([6_plan], 0) + isnull([7_plan], 0) + isnull([8_plan], 0) + isnull([9_plan], 0) + isnull([10_plan], 0) + isnull([11_plan], 0) + isnull([12_plan], 0) as sum_plan
            ,isnull([1_result], 0) + isnull([2_result], 0) + isnull([3_result], 0) + isnull([4_result], 0) + isnull([5_result], 0) + isnull([6_result], 0) + isnull([7_result], 0) + isnull([8_result], 0) + isnull([9_result], 0) + isnull([10_result], 0) + isnull([11_result], 0) + isnull([12_result], 0) as sum_result
            ,isnull([1_plan], 0) + isnull([2_plan], 0) + isnull([3_plan], 0) + isnull([4_plan], 0) + isnull([5_plan], 0) + isnull([6_plan], 0) + isnull([7_plan], 0) + isnull([8_plan], 0) + isnull([9_plan], 0) + isnull([10_plan], 0) + isnull([11_plan], 0) + isnull([12_plan], 0) +
            isnull([1_result], 0) + isnull([2_result], 0) + isnull([3_result], 0) + isnull([4_result], 0) + isnull([5_result], 0) + isnull([6_result], 0) + isnull([7_result], 0) + isnull([8_result], 0) + isnull([9_result], 0) + isnull([10_result], 0) + isnull([11_result], 0) + isnull([12_result], 0) as sum
        from a
        INNER JOIN dbo.LANG_CODE_MASTER(#{defaultParam.lang}, 'SAF_FACILITY_CHECK') checkType
        on a.saf_check_type_cd = checkType.code
        inner join saf_facility_type sft
        on a.saf_facility_type_cd = sft.saf_facility_type_cd
        left join com_dept cd
        on a.dept_cd = cd.dept_cd
        INNER JOIN dbo.LANG_CODE_MASTER('kr', 'COM_PLANT_CD') pl
        ON a.plant_cd = pl.code
    </select>


    <!-- 설비점검 결과 목록 조회 -->
    <select id="getFacilChkResultTable" resultType="com.she.safety.model.FacilChkResult">
    /* getFacilChkResultTable [설비점검 결과 목록 조회] */
        SELECT r.saf_facil_chk_no
             , r.saf_facility_cd
             , sft.saf_facility_type_nm
             , r.chk_sch_ymd        AS safFacilityCheckSchYmd
             , r.user_id            AS createUserId
             , cu.user_nm
             , fmst.facility_nm
             , fmst.facility_mgr_num
             , fmst.process_cd
             , cp.process_nm
             , fmst.dept_cd
             , cd.dept_nm
             , r.chk_end_yn
             , CASE WHEN r.chk_end_yn = 'Y' THEN '완료' ELSE '미완료' END AS chkEndYnNm
             , r.chk_ymd
             , p.saf_facil_chk_title
          FROM saf_facil_chk_rslt r
               INNER JOIN saf_facil_chk_plan p
                       ON r.saf_facil_chk_no = p.saf_facil_chk_no
               INNER JOIN saf_facility_mst fmst
                       ON r.saf_facility_cd = fmst.saf_facility_cd
               INNER JOIN saf_facility_type sft
                      ON fmst.saf_facility_type_cd = sft.saf_facility_type_cd
               INNER JOIN com_process cp
                       ON fmst.process_cd = cp.process_cd
               INNER JOIN com_dept cd
                       ON fmst.dept_cd = cd.dept_cd
               LEFT OUTER JOIN com_user cu
                       ON r.user_id = cu.user_id
         WHERE 1=1
         <if test="chkEndYn != null and !chkEndYn.equals('')">
           AND r.chk_end_yn = #{chkEndYn}
         </if>
         <if test="deptCd != null and !deptCd.equals('')">
           AND r.dept_cd = #{deptCd}
         </if>
         <if test="safCheckTypeCd != null and !safCheckTypeCd.equals('')">
           AND p.saf_check_type_cd = #{safCheckTypeCd}
         </if>
         <if test="safFacilityTypeCd != null and !safFacilityTypeCd.equals('')">
           AND sft.saf_facility_type_cd = #{safFacilityTypeCd}
         </if>
         <if test="plantCd != null and !plantCd.equals('')">
           AND p.plant_cd = #{plantCd}
         </if>
        <if test="chkStepCd == 'CHS02'.toString()">
            AND r.chk_sch_ymd <![CDATA[>=]]> #{startDate}
            AND r.chk_sch_ymd <![CDATA[<=]]> #{endDate}
            AND p.chk_step_cd != 'CHS01'
        </if>
         <if test="chkStepCd == 'CHS04'.toString()">
             AND r.chk_ymd <![CDATA[>=]]> #{startDate}
             AND r.chk_ymd <![CDATA[<=]]> #{endDate}
       		 AND r.chk_com_yn = 'Y'
         </if>

    </select>
</mapper>