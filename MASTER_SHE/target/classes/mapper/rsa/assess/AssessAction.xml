<?xml version= "1.0" encoding= "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace= "com.she.rsa.assess.mapper.AssessActionMapper">

    <select id= "getRiskAssesses" resultType= "com.she.rsa.model.RiskAssess">
        with A as (
            select assess_plan_no
                ,job_id
                , dept_cd
                , risk_hazard_no
                , count(*) as kras_cnt
            from  rsa_kras
            where job_id = #{jobId}
            group by assess_plan_no, dept_cd, job_id, risk_hazard_no
        )
        select rj.job_id
            , rjr.job_step_id
            , rjs.job_step_nm + '(' + convert(varchar, rjs.rev_no) + ')' as job_step_nm_rev
            , rjr.risk_hazard_no
            , rrh.risk_hazard_nm
            , pRrh.risk_hazard_no as p_risk_hazard_no
            , pRrh.risk_hazard_nm as p_risk_hazard_nm
            , (rrh.risk_hazard_nm + ' / ' + pRrh.risk_hazard_nm) as risk_hazard
            , rrh.risk_hazard_desc
            , case when rk.assess_date is null then 'N'
              else 'Y' end as assess_yn
            , cRrm.risk_size as current_risk_size
            , cRrm.frequency_size as current_frequency_size
            , cRrm.strong_size as current_strong_size
            , rk.improve
            , aRrm.risk_size as after_risk_size
            , aRrm.frequency_size as after_frequency_size
            , aRrm.strong_size as after_strong_size
            , rk.assess_date
            , rk.dept_cd
            , rk.assess_plan_no
            , rk.current_risk_no
            , rk.after_risk_no
            , rk.user_id as assess_user_id
            , cu.user_nm as assess_user_nm
            , cu.dept_cd as assess_dept_cd
            , cd.dept_nm as assess_dept_nm
            , isnull(A.kras_cnt, 0) as kras_cnt
        from rsa_dept_assess_job rdaj
        inner join rsa_job rj
        on rdaj.dept_cd = rj.dept_cd
        and rdaj.job_id = rj.job_id
        and rj.use_yn = 'Y'
        inner join rsa_job_step rjs
        on rj.job_id = rjs.job_id
        and rjs.use_yn = 'Y'
        inner join (select job_id, job_step_id, risk_hazard_no
                    from (
                        select job_id, job_step_id, risk_hazard_no
                        from rsa_kras
                        where assess_plan_no = #{assessPlanNo}
                        union all
                        select rrjs.job_id, min(rrjs.job_step_id) as job_step_id, rr.risk_hazard_no
                        from rsa_job_riskhazard rr
                        inner join (select job_id, max(job_step_id) as job_step_id
                                    from rsa_job_step
                                    group by job_id, job_step_no) rrjs
                        on rr.job_step_id = rrjs.job_step_id
                        group by rrjs.job_id, rr.risk_hazard_no
                        ) rjr
                    group by job_id, job_step_id, risk_hazard_no) rjr
        on rj.job_id = rjr.job_id
        and rjs.job_step_id = rjr.job_step_id
        inner join rsa_risk_hazard rrh
        on rjr.risk_hazard_no = rrh.risk_hazard_no
        inner join rsa_risk_hazard pRrh
        on rrh.p_risk_hazard_no = pRrh.risk_hazard_no
        left outer join rsa_kras rk
        on rjr.job_id = rk.job_id
        and rjr.job_step_id = rk.job_step_id
        and rjr.risk_hazard_no = rk.risk_hazard_no
        and rdaj.assess_plan_no = rk.assess_plan_no
        left outer join A
        on rk.job_id = A.job_id
        and rk.dept_cd = A.dept_cd
        and rk.assess_plan_no = A.assess_plan_no
        and rk.risk_hazard_no = A.risk_hazard_no
        left outer join rsa_risk_matrix cRrm
        on rk.current_risk_no = cRrm.risk_no
        left outer join rsa_risk_matrix aRrm
        on rk.after_risk_no = aRrm.risk_no
        left outer join com_user cu
        on rk.user_id = cu.user_id
        left outer join com_dept cd
        on cu.dept_cd = cd.dept_cd
        where rj.job_id = #{jobId}
        and rdaj.assess_plan_no = #{assessPlanNo}
    </select>


    <insert id= "createRiskKras" parameterType= "com.she.rsa.model.RiskAssess">
           <selectKey keyProperty= "currentRiskNo,afterRiskNo" resultType= "com.she.rsa.model.RiskAssess" order= "BEFORE">
            select (select risk_no
                    from rsa_risk_matrix
                    where frequency_size = #{currentFrequencySize}
                    and strong_size = #{currentStrongSize}
                    and assess_type_no = #{assessTypeNo}) as currentRiskNo
                , (select risk_no
                       from rsa_risk_matrix
                    where frequency_size = #{afterFrequencySize}
                    and strong_size = #{afterStrongSize}
                    and assess_type_no = #{assessTypeNo}) as afterRiskNo
          </selectKey>
        insert into rsa_kras_jsa
            (process_cd
            ,assess_plan_no
            ,job_id
            ,job_step_id
            ,risk_hazard_no
            ,improve
            ,eval_desc
            ,user_id
            ,current_risk_no
            ,after_risk_no
            ,assess_date)
         values
               (#{processCd}
            ,#{assessPlanNo}
            ,#{jobId}
            ,#{jobStepId}
            ,#{riskHazardNo}
            ,#{improve}
            ,#{evalDesc}
            ,#{assessUserId}
            ,#{currentRiskNo}
            ,#{afterRiskNo}
            <if test= "assessDate != null and !assessDate.equals('')">
            ,#{assessDate})
            </if>
            <if test= "assessDate == null or assessDate.equals('')">
            ,getdate())
            </if>
    </insert>

    <select id= "getRiskKras" resultType= "com.she.rsa.model.RiskAssess">
        select assess_plan_no
            , process_cd
            , job_id
            , job_step_id
            , risk_hazard_no
        from rsa_kras_jsa
        where 1=1
        and assess_plan_no = #{assessPlanNo}
        and process_cd = #{processCd}
        and job_id = #{jobId}
        and job_step_id = #{jobStepId}
        and risk_hazard_no = #{riskHazardNo}

    </select>

    <update id= "updateRiskKras" parameterType= "com.she.rsa.model.RiskAssess">
           <selectKey keyProperty= "currentRiskNo,afterRiskNo" resultType= "com.she.rsa.model.RiskAssess" order= "BEFORE">
            select (select risk_no
                    from rsa_risk_matrix
                    where frequency_size = #{currentFrequencySize}
                    and strong_size = #{currentStrongSize}
                    and assess_type_no = #{assessTypeNo}) as currentRiskNo
                , (select risk_no
                       from rsa_risk_matrix
                    where frequency_size = #{afterFrequencySize}
                    and strong_size = #{afterStrongSize}
                    and assess_type_no = #{assessTypeNo}) as afterRiskNo
          </selectKey>
        update rsa_kras_jsa
            set current_risk_no = #{currentRiskNo}
                ,after_risk_no = #{afterRiskNo}
                ,improve = #{improve}
                ,eval_desc = #{evalDesc}
                ,assess_date = getdate()
        where job_id = #{jobId}
        and job_step_id = #{jobStepId}
        and assess_plan_no = #{assessPlanNo}
        and process_cd = #{processCd}
        and risk_hazard_no = #{riskHazardNo}

        update rsa_risk_assess_plan
            set update_user_id = #{updateUserId}
                , update_dt = getDate()
        where assess_plan_no = #{assessPlanNo}
    </update>

    <!-- 위험 Matrix 빈도 목록 조회 -->
    <select id= "getFrequencyRiskMatrixes" resultType= "com.she.rsa.model.RiskMatrix">
        select rrm.frequency_size
            , rrm.frequency_desc
        from rsa_risk_matrix rrm
        where 1=1
        and rrm.assess_type_no = #{assessTypeNo}
        group by rrm.frequency_size, rrm.frequency_desc
        order by rrm.frequency_size
    </select>

    <!-- 위험 Matrix 강도 목록 조회 -->
    <select id= "getStrongRiskMatrixes" resultType= "com.she.rsa.model.RiskMatrix">
        select rrm.strong_size
            , rrm.strong_desc
        from rsa_risk_matrix rrm
        where 1=1
        and rrm.assess_type_no = #{assessTypeNo}
        group by rrm.strong_size, rrm.strong_desc
        order by rrm.strong_size
    </select>

        <!-- 위험 Matrix 강도 목록 조회 -->
    <select id= "getRiskMatrixes" resultType= "com.she.rsa.model.RiskMatrix">
        SELECT rrm.risk_no
              ,rrm.risk_size
              ,rrm.risk_desc
              ,frequency_size
              ,strong_size
          FROM rsa_risk_matrix rrm
         WHERE rrm.assess_type_no = #{assessTypeNo}
         ORDER BY rrm.risk_size
    </select>

    <select id= "getAssessActionsJsaJob" resultType= "com.she.rsa.model.AssessAction">
        /* AssessActionMapper.getAssessActionsJsaJob [AssessAction.xml] */
        select rrap.assess_plan_no
            , rrap.process_cd
            , cp.process_nm
            , cd.dept_nm
            , rpaj.job_id
            , rj.job_cd
            , rj.job_nm
            , rj.job_revno
            , rj.sop_no
            , rj.sop_nm
        from rsa_risk_assess_process rrap
        inner join rsa_process_assess_job rpaj
        on rrap.assess_plan_no = rpaj.assess_plan_no
        and rrap.process_cd = rpaj.process_cd
        inner join rsa_job rj
        on rpaj.process_cd = rj.process_cd
        and rpaj.job_id = rj.job_id
        inner join com_process cp
        on rrap.process_cd = cp.process_cd
        inner join com_dept cd
        on rj.dept_cd = cd.dept_cd
        where 1=1
        and rrap.assess_plan_no = #{assessPlanNo}
        and rj.job_nm like '%' + #{jobNm} + '%'
        <if test= "plantCd != null and !plantCd.equals('')">
        and rj.plant_cd = #{plantCd}
        </if>
<!--        <if test= "deptCd != null and !deptCd.equals('')">-->
<!--        and rj.dept_cd = #{deptCd}-->
<!--        </if>-->
        <if test= "processCd != null and !processCd.equals('')">
        and rrap.process_cd = #{processCd}
        </if>
        order by rrap.assess_plan_no
    </select>

    <!-- 위험성평가 실행 JSA 목록 조회 -->
    <select id= "getAssessActionsJsa" resultType= "com.she.rsa.model.AssessAction">
        /* AssessActionMapper.getAssessActionsJsa [AssessAction.xml] */
        with A as
        (
            select assess_plan_no
            , process_cd
            , rkj.job_id
            , rjss.job_step_no
            , count(risk_hazard_no) as risk_hazard_cnt
            , convert(char(10), max(assess_date), 23) as last_assess_date
            from rsa_kras_jsa rkj
            inner join rsa_job_step rjss
            on rkj.job_id = rjss.job_id
            and rkj.job_step_id = rjss.job_step_id
            where 1=1
            <if test= "jobId != null and jobId > 0">
            and rkj.job_id = #{jobId}
            </if>
            group by assess_plan_no, process_cd, rkj.job_id, rjss.job_step_no
        ), B as (
            select job_id, job_step_no, max(job_step_id) as job_step_id
            from rsa_job_step
            group by job_id, job_step_no
        )
        select rrap.assess_plan_no
            , rrap.process_cd
            , cp.process_nm
            , rb.job_id
            , rb.job_cd
            , rb.job_nm
            , rb.job_revno
            , rjs.job_step_no
            , rjs.job_step_nm
            , rjs.job_step_id
            , A.last_assess_date
            , isnull(A.risk_hazard_cnt, 0) as risk_hazard_cnt
        from rsa_risk_assess_process rrap
        inner join com_process cp
        on rrap.process_cd = cp.process_cd
        inner join rsa_process_assess_job rpaj
        on rrap.assess_plan_no = rpaj.assess_plan_no
        and rrap.process_cd = rpaj.process_cd
        inner join rsa_job rb
        on rpaj.job_id = rb.job_id
        inner join rsa_job_step rjs
        on rpaj.job_id = rjs.job_id
        inner join B
        on rpaj.job_id = B.job_id
        and rjs.job_step_id = B.job_step_id
        and rjs.job_step_no = B.job_step_no
        left outer join A
        on rpaj.assess_plan_no = A.assess_plan_no
        and rpaj.process_cd = A.process_cd
        and rpaj.job_id = A.job_id
        and rjs.job_step_no = A.job_step_no
        where 1=1
        and rrap.assess_plan_no = #{assessPlanNo}
        <if test= "jobId != null and jobId > 0">
        and rb.job_id = #{jobId}
        </if>
        and rjs.job_step_id is not null
        <if test= "processCd != null and !processCd.equals('')">
        and rb.process_cd = #{processCd}
        </if>
        order by rrap.assess_plan_no, rjs.job_id, rjs.job_step_no
    </select>

    <select id= "getRiskAssessesJsa" resultType= "com.she.rsa.model.RiskAssess">
        /* AssessActionMapper.getRiskAssessesJsa [AssessAction.xml] */
        with A as (
            select assess_plan_no
                , process_cd
                , rk.job_id
                , rk.job_step_id
                , risk_hazard_no
                , count(*) as kras_cnt
            from  rsa_kras_jsa rk
            inner join rsa_job_step rjss
            on rk.job_id = rjss.job_id
            and rk.job_step_id = rjss.job_step_id
            where rk.job_id = #{jobId}
            group by assess_plan_no, process_cd, rk.job_id, rk.job_step_id, risk_hazard_no
        )
        select rj.job_id
            , rjs.job_step_id
            , rjs.job_step_no
            , rjs.job_step_nm , rjs.rev_no
            , rjs.job_step_nm + '(' + convert(varchar, rjs.rev_no) + ')' as job_step_nm_rev
            , rjr.risk_hazard_no
            , rrh.risk_hazard_nm
            , pRrh.risk_hazard_no as p_risk_hazard_no
            , pRrh.risk_hazard_nm as p_risk_hazard_nm
            , (rrh.risk_hazard_nm + ' / ' + pRrh.risk_hazard_nm) as risk_hazard
            , rrh.risk_hazard_desc
            , case when ra.assess_date is null then 'N'
                else 'Y' end as assess_yn
            , cRrm.risk_size as current_risk_size
            , cRrm.frequency_size as current_frequency_size
            , cRrm.strong_size as current_strong_size
            , ra.improve
            , aRrm.risk_size as after_risk_size
            , aRrm.frequency_size as after_frequency_size
            , aRrm.strong_size as after_strong_size
            , ra.assess_date
            , rj.dept_cd
            , jobDept.dept_nm
            , ra.process_cd
            , ra.assess_plan_no
            , ra.current_risk_no
            , ra.after_risk_no
            , ra.user_id as assess_user_id
            , cu.user_nm as assess_user_nm
            , cu.dept_cd as assess_dept_cd
            , cd.dept_nm as assess_dept_nm
            , isnull(A.kras_cnt, 0) as kras_cnt
            , ra.eval_desc
        from rsa_process_assess_job rdaj
        inner join rsa_job rj
        on rdaj.job_id = rj.job_id
        inner join rsa_job_step rjs
        on rdaj.job_id = rjs.job_id
        inner join com_dept jobDept
        on rj.dept_cd = jobDept.dept_cd
        inner join (select job_id, job_step_id, risk_hazard_no
                    from (
                        select job_id, job_step_id, risk_hazard_no
                        from rsa_kras_jsa
                        where assess_plan_no = #{assessPlanNo}
                        union all
                        select rrjs.job_id, rrjs.job_step_id, rr.risk_hazard_no
                        from rsa_job_riskhazard rr
                        inner join (select job_id, max(job_step_id) as job_step_id
                                    from rsa_job_step
                                    group by job_id, job_step_no, job_step_group_no) rrjs
                        on rr.job_step_id = rrjs.job_step_id
                        group by rrjs.job_id, rrjs.job_step_id, rr.risk_hazard_no
                        ) rjr
                    group by job_id, job_step_id, risk_hazard_no) rjr
        on rjs.job_step_id = rjr.job_step_id
        inner join rsa_risk_hazard rrh
        on rjr.risk_hazard_no = rrh.risk_hazard_no
        left outer join rsa_risk_hazard pRrh
        on rrh.p_risk_hazard_no = pRrh.risk_hazard_no
        left outer join rsa_kras_jsa ra
        on rj.job_id = ra.job_id
        and rjr.job_step_id = ra.job_step_id
        and rjr.risk_hazard_no = ra.risk_hazard_no
        and rdaj.assess_plan_no = ra.assess_plan_no
        left outer join A
        on ra.job_id = A.job_id
        and ra.process_cd = a.process_cd
        and ra.assess_plan_no = a.assess_plan_no
        and ra.risk_hazard_no = a.risk_hazard_no
        and ra.job_step_id = a.job_step_id
        left outer join rsa_risk_matrix cRrm
        on ra.current_risk_no = cRrm.risk_no
        left outer join rsa_risk_matrix aRrm
        on ra.after_risk_no = aRrm.risk_no
        left outer join com_user cu
        on ra.user_id = cu.user_id
        left outer join com_dept cd
        on cu.dept_cd = cd.dept_cd
        where rjs.job_id = #{jobId}
        and rjs.job_step_no = #{jobStepNo}
        and rdaj.assess_plan_no = #{assessPlanNo}
    </select>

    <insert id= "createRiskJsa" parameterType= "com.she.rsa.model.RiskAssess">
           <selectKey keyProperty= "currentRiskNo,afterRiskNo" resultType= "com.she.rsa.model.RiskAssess" order= "BEFORE">
            select (select risk_no
                    from rsa_risk_matrix
                    where frequency_size = #{currentFrequencySize}
                    and strong_size = #{currentStrongSize}
                    and assess_type_no = #{assessTypeNo}) as currentRiskNo
                , (select risk_no
                       from rsa_risk_matrix
                    where frequency_size = #{afterFrequencySize}
                    and strong_size = #{afterStrongSize}
                    and assess_type_no = #{assessTypeNo}) as afterRiskNo
          </selectKey>
        insert into rsa_jsa
        (
            assess_plan_no
            , dept_cd
            , job_id
            , job_step_no
            , risk_hazard_no
            , improve
            , user_id
            , current_risk_no
            , after_risk_no
            , assess_date
        )
        values
           (
               #{assessPlanNo}
            , #{deptCd}
            , #{jobId}
            , #{jobStepNo}
            , #{riskHazardNo}
            , #{improve}
            , #{assessUserId}
            , #{currentRiskNo}
            , #{afterRiskNo}
            , getdate()
        )
    </insert>

    <update id= "updateRiskJsa" parameterType= "com.she.rsa.model.RiskAssess">
           <selectKey keyProperty= "currentRiskNo,afterRiskNo" resultType= "com.she.rsa.model.RiskAssess" order= "BEFORE">
            select (select risk_no
                    from rsa_risk_matrix
                    where frequency_size = #{currentFrequencySize}
                    and strong_size = #{currentStrongSize}
                    and assess_type_no = #{assessTypeNo}) as currentRiskNo
                , (select risk_no
                       from rsa_risk_matrix
                    where frequency_size = #{afterFrequencySize}
                    and strong_size = #{afterStrongSize}
                    and assess_type_no = #{assessTypeNo}) as afterRiskNo
          </selectKey>
        update rsa_jsa
            set current_risk_no = #{currentRiskNo}
                ,after_risk_no = #{afterRiskNo}
                ,improve = #{improve}
                ,assess_date = getdate()
        where job_id = #{jobId}
        and assess_plan_no = #{assessPlanNo}
        and dept_cd = #{deptCd}
        and job_step_no = #{jobStepNo}
        and risk_hazard_no = #{riskHazardNo}
    </update>

    <update id= "updateAssessStep" parameterType= "com.she.rsa.model.AssessAction">
     update rsa_risk_assess_plan
        <!-- set assess_step_cd = 'C'  AS-IS -->
             set assess_step_cd = 'E'  <!-- TO-BE 진행중으로 변경 -->
            , update_user_id = #{updateUserId}
            , update_dt = getdate()
      where assess_plan_no = #{assessPlanNo}
    </update>

    <select id = "getMaxRiskMatrix" resultType= "com.she.rsa.model.RiskMatrix">
        select max(frequency_size) as frequency_size, max(strong_size) as strong_size
        from rsa_risk_matrix rrm
        inner join rsa_assess_type rat
        on rat.assess_type_no = rrm.assess_type_no
        where rrm.assess_type_no = #{assessTypeNo}
    </select>
    <select id= "getAssessExcel" resultType= "java.util.LinkedHashMap">
    with deptAssessJob as
            (
                select rpaj.assess_plan_no
                    --,rpaj.dept_cd
                    ,rpaj.process_cd
                    ,rpaj.job_id
                    ,rpaj.create_user_id
                    ,createUser.user_nm as create_user_nm
                    ,rpaj.create_dt
                from rsa_process_assess_job rpaj
                inner join com_user createUser
                on rpaj.create_user_id = createUser.user_id
            )
            select
                ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS no
                ,rraplan.assess_plan_no
                ,rraplan.assess_nm
                ,cd.dept_cd
                ,cd.dept_nm
                ,cp.process_cd
                ,cp.process_nm
                ,rrm.assess_nm as matrix_nm
                ,rj.job_id
                ,rj.job_nm
                ,rjs.job_step_id
                ,rjs.job_step_nm
                ,rrh.risk_hazard_no
                ,prrh.risk_hazard_nm as p_risk_hazard_nm
                ,rrh.risk_hazard_nm
                ,'' as beforeFrequency
                ,'' as beforeStrong
                ,'' as improve
                ,'' as afterFrequency
                ,'' as afterStrong
                ,'' as assessDesc
                ,convert(char(10), getDate(), 120) as assessDate

            FROM rsa_risk_assess_process rrap
            INNER JOIN com_process cp
             on rrap.process_cd = cp.process_cd
            INNER JOIN rsa_job rj
             on rrap.process_cd = rj.process_cd
            INNER JOIN com_dept cd
             on rj.dept_cd = cd.dept_cd
            LEFT OUTER JOIN deptAssessJob
             on rrap.assess_plan_no = deptAssessJob.assess_plan_no
             and rrap.process_cd = deptAssessJob.process_cd
             and rj.job_id = deptAssessJob.job_id
            INNER JOIN rsa_risk_assess_plan rraplan
             on rraplan.assess_plan_no = rrap.assess_plan_no
            INNER JOIN (select rrj.job_revno job_revno, rrj.dept_cd, rrj.process_cd, rrj.job_cd
                        from rsa_process_assess_job trrj
                        inner join rsa_job rrj
                        on trrj.job_id = rrj.job_id
                        where assess_plan_no = #{assessPlanNo}
                        union
                        select max(trj.job_revno) job_revno, trj.dept_cd, trj.process_cd, trj.job_cd
                        from rsa_job trj
                        group by trj.dept_cd, trj.process_cd, trj.job_cd) maxRevNo
             on rrap.process_cd = maxRevNo.process_cd
             and cd.dept_cd = maxRevNo.dept_cd
             and rj.job_revno = maxRevNo.job_revno
             and rj.job_cd = maxRevNo.job_cd
            INNER JOIN (
                select job_id, max(job_step_id) as job_step_id
                from rsa_job_step
                group by job_id, job_step_no
              ) as max_step
             on max_step.job_id = rj.job_id
            INNER JOIN rsa_job_step rjs
             on rjs.job_step_id = max_step.job_step_id
            INNER JOIN rsa_job_riskhazard rjr
             on max_step.job_step_id = rjr.job_step_id
            INNER JOIN rsa_risk_hazard rrh
             on rjr.risk_hazard_no = rrh.risk_hazard_no
            INNER JOIN rsa_risk_hazard prrh
             on prrh.risk_hazard_no = rrh.p_risk_hazard_no
            INNER JOIN rsa_assess_type rrm
             on rrm.assess_type_no = rraplan.assess_type_no
            WHERE 1=1
             and rrap.assess_plan_no = #{assessPlanNo}
             and rrap.process_cd in (select process_cd
                                from rsa_risk_assess_process
                                where assess_plan_no = #{assessPlanNo}
                                and (isnull('', '') = '' or process_cd = ''))

             and rj.job_id in (select trrj.job_id
                    from rsa_job_step trrj
                    inner join rsa_job_riskhazard rjr
                    on trrj.job_step_id = rjr.job_step_id
                    inner join rsa_risk_hazard rrh
                    on rjr.risk_hazard_no = rrh.risk_hazard_no
                    group by trrj.job_id)

             and deptAssessJob.create_user_id != ''

            order by rj.dept_cd, cp.sort_order
    </select>

</mapper>